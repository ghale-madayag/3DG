import {
  AttributeCommand
} from "./chunk-RU5RYWHM.js";
import {
  ButtonView
} from "./chunk-GVJYUFQW.js";
import {
  Plugin,
  icons
} from "./chunk-W4RSC2T7.js";
import "./chunk-5NSBEPH7.js";
import "./chunk-ROME4SDB.js";

// node_modules/@ckeditor/ckeditor5-basic-styles/src/bold/boldediting.js
var BOLD = "bold";
var BoldEditing = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "BoldEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    editor.model.schema.extend("$text", { allowAttributes: BOLD });
    editor.model.schema.setAttributeProperties(BOLD, {
      isFormatting: true,
      copyOnEnter: true
    });
    editor.conversion.attributeToElement({
      model: BOLD,
      view: "strong",
      upcastAlso: [
        "b",
        (viewElement) => {
          const fontWeight = viewElement.getStyle("font-weight");
          if (!fontWeight) {
            return null;
          }
          if (fontWeight == "bold" || Number(fontWeight) >= 600) {
            return {
              name: true,
              styles: ["font-weight"]
            };
          }
          return null;
        }
      ]
    });
    editor.commands.add(BOLD, new AttributeCommand(editor, BOLD));
    editor.keystrokes.set("CTRL+B", BOLD);
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/bold/boldui.js
var BOLD2 = "bold";
var BoldUI = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "BoldUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    const t = editor.t;
    editor.ui.componentFactory.add(BOLD2, (locale) => {
      const command = editor.commands.get(BOLD2);
      const view = new ButtonView(locale);
      view.set({
        label: t("Bold"),
        icon: icons.bold,
        keystroke: "CTRL+B",
        tooltip: true,
        isToggleable: true
      });
      view.bind("isOn", "isEnabled").to(command, "value", "isEnabled");
      this.listenTo(view, "execute", () => {
        editor.execute(BOLD2);
        editor.editing.view.focus();
      });
      return view;
    });
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/bold.js
var Bold = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [BoldEditing, BoldUI];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Bold";
  }
};
export {
  Bold as default
};
/*! Bundled license information:

@ckeditor/ckeditor5-basic-styles/src/bold/boldediting.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/bold/boldui.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/bold.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)
*/
//# sourceMappingURL=@ckeditor_ckeditor5-basic-styles_src_bold.js.map
