{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-basic-styles/src/italic/italicediting.js", "../../@ckeditor/ckeditor5-basic-styles/src/italic/italicui.js", "../../@ckeditor/ckeditor5-basic-styles/src/italic.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/italic/italicediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport AttributeCommand from '../attributecommand';\nconst ITALIC = 'italic';\n/**\n * The italic editing feature.\n *\n * It registers the `'italic'` command, the <kbd>Ctrl+I</kbd> keystroke and introduces the `italic` attribute in the model\n * which renders to the view as an `<i>` element.\n */\nexport default class ItalicEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'ItalicEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // Allow italic attribute on text nodes.\n        editor.model.schema.extend('$text', { allowAttributes: ITALIC });\n        editor.model.schema.setAttributeProperties(ITALIC, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        editor.conversion.attributeToElement({\n            model: ITALIC,\n            view: 'i',\n            upcastAlso: [\n                'em',\n                {\n                    styles: {\n                        'font-style': 'italic'\n                    }\n                }\n            ]\n        });\n        // Create italic command.\n        editor.commands.add(ITALIC, new AttributeCommand(editor, ITALIC));\n        // Set the Ctrl+I keystroke.\n        editor.keystrokes.set('CTRL+I', ITALIC);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/italic/italicui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ButtonView } from 'ckeditor5/src/ui';\nimport italicIcon from '../../theme/icons/italic.svg';\nconst ITALIC = 'italic';\n/**\n * The italic UI feature. It introduces the Italic button.\n */\nexport default class ItalicUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'ItalicUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(ITALIC, locale => {\n            const command = editor.commands.get(ITALIC);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Italic'),\n                icon: italicIcon,\n                keystroke: 'CTRL+I',\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => {\n                editor.execute(ITALIC);\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/italic\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport ItalicEditing from './italic/italicediting';\nimport ItalicUI from './italic/italicui';\n/**\n * The italic feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature} guide\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/italic/italicediting~ItalicEditing} and\n * {@link module:basic-styles/italic/italicui~ItalicUI} plugins.\n */\nexport default class Italic extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [ItalicEditing, ItalicUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Italic';\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;AASA,IAAM,SAAS;AAOf,IAAqB,gBAArB,cAA2C,OAAO;AAAA;AAAA;AAAA;AAAA,EAI9C,WAAW,aAAa;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO;AACH,UAAM,SAAS,KAAK;AAEpB,WAAO,MAAM,OAAO,OAAO,SAAS,EAAE,iBAAiB,OAAO,CAAC;AAC/D,WAAO,MAAM,OAAO,uBAAuB,QAAQ;AAAA,MAC/C,cAAc;AAAA,MACd,aAAa;AAAA,IACjB,CAAC;AACD,WAAO,WAAW,mBAAmB;AAAA,MACjC,OAAO;AAAA,MACP,MAAM;AAAA,MACN,YAAY;AAAA,QACR;AAAA,QACA;AAAA,UACI,QAAQ;AAAA,YACJ,cAAc;AAAA,UAClB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,WAAO,SAAS,IAAI,QAAQ,IAAI,iBAAiB,QAAQ,MAAM,CAAC;AAEhE,WAAO,WAAW,IAAI,UAAU,MAAM;AAAA,EAC1C;AACJ;;;AC1CA,OAAO,gBAAgB;AACvB,IAAMA,UAAS;AAIf,IAAqB,WAArB,cAAsC,OAAO;AAAA;AAAA;AAAA;AAAA,EAIzC,WAAW,aAAa;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO;AACH,UAAM,SAAS,KAAK;AACpB,UAAM,IAAI,OAAO;AAEjB,WAAO,GAAG,iBAAiB,IAAIA,SAAQ,YAAU;AAC7C,YAAM,UAAU,OAAO,SAAS,IAAIA,OAAM;AAC1C,YAAM,OAAO,IAAI,WAAW,MAAM;AAClC,WAAK,IAAI;AAAA,QACL,OAAO,EAAE,QAAQ;AAAA,QACjB,MAAM;AAAA,QACN,WAAW;AAAA,QACX,SAAS;AAAA,QACT,cAAc;AAAA,MAClB,CAAC;AACD,WAAK,KAAK,QAAQ,WAAW,EAAE,GAAG,SAAS,SAAS,WAAW;AAE/D,WAAK,SAAS,MAAM,WAAW,MAAM;AACjC,eAAO,QAAQA,OAAM;AACrB,eAAO,QAAQ,KAAK,MAAM;AAAA,MAC9B,CAAC;AACD,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AACJ;;;AC5BA,IAAqB,SAArB,cAAoC,OAAO;AAAA;AAAA;AAAA;AAAA,EAIvC,WAAW,WAAW;AAClB,WAAO,CAAC,eAAe,QAAQ;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,aAAa;AACpB,WAAO;AAAA,EACX;AACJ;",
  "names": ["ITALIC"]
}
