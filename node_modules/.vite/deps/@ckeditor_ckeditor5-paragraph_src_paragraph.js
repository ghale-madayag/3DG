import {
  Command,
  Plugin,
  first
} from "./chunk-W4RSC2T7.js";
import "./chunk-5NSBEPH7.js";
import "./chunk-ROME4SDB.js";

// node_modules/@ckeditor/ckeditor5-paragraph/src/paragraphcommand.js
var ParagraphCommand = class extends Command {
  constructor(editor) {
    super(editor);
    this._isEnabledBasedOnSelection = false;
  }
  /**
   * @inheritDoc
   */
  refresh() {
    const model = this.editor.model;
    const document = model.document;
    const block = first(document.selection.getSelectedBlocks());
    this.value = !!block && block.is("element", "paragraph");
    this.isEnabled = !!block && checkCanBecomeParagraph(block, model.schema);
  }
  /**
   * Executes the command. All the blocks (see {@link module:engine/model/schema~Schema}) in the selection
   * will be turned to paragraphs.
   *
   * @fires execute
   * @param options Options for the executed command.
   * @param options.selection The selection that the command should be applied to. By default,
   * if not provided, the command is applied to the {@link module:engine/model/document~Document#selection}.
   */
  execute(options = {}) {
    const model = this.editor.model;
    const document = model.document;
    const selection = options.selection || document.selection;
    if (!model.canEditAt(selection)) {
      return;
    }
    model.change((writer) => {
      const blocks = selection.getSelectedBlocks();
      for (const block of blocks) {
        if (!block.is("element", "paragraph") && checkCanBecomeParagraph(block, model.schema)) {
          writer.rename(block, "paragraph");
        }
      }
    });
  }
};
function checkCanBecomeParagraph(block, schema) {
  return schema.checkChild(block.parent, "paragraph") && !schema.isObject(block);
}

// node_modules/@ckeditor/ckeditor5-paragraph/src/insertparagraphcommand.js
var InsertParagraphCommand = class extends Command {
  constructor(editor) {
    super(editor);
    this._isEnabledBasedOnSelection = false;
  }
  /**
   * Executes the command.
   *
   * @param options Options for the executed command.
   * @param options.position The model position at which the new paragraph will be inserted.
   * @param options.attributes Attributes keys and values to set on a inserted paragraph.
   * @fires execute
   */
  execute(options) {
    const model = this.editor.model;
    const attributes = options.attributes;
    let position = options.position;
    if (!model.canEditAt(position)) {
      return;
    }
    model.change((writer) => {
      position = this._findPositionToInsertParagraph(position, writer);
      if (!position) {
        return;
      }
      const paragraph = writer.createElement("paragraph");
      if (attributes) {
        model.schema.setAllowedAttributes(paragraph, attributes, writer);
      }
      model.insertContent(paragraph, position);
      writer.setSelection(paragraph, "in");
    });
  }
  /**
   * Returns the best position to insert a new paragraph.
   */
  _findPositionToInsertParagraph(position, writer) {
    const model = this.editor.model;
    if (model.schema.checkChild(position, "paragraph")) {
      return position;
    }
    const allowedParent = model.schema.findAllowedParent(position, "paragraph");
    if (!allowedParent) {
      return null;
    }
    const positionParent = position.parent;
    const isTextAllowed = model.schema.checkChild(positionParent, "$text");
    if (positionParent.isEmpty || isTextAllowed && position.isAtEnd) {
      return model.createPositionAfter(positionParent);
    }
    if (!positionParent.isEmpty && isTextAllowed && position.isAtStart) {
      return model.createPositionBefore(positionParent);
    }
    return writer.split(position, allowedParent).position;
  }
};

// node_modules/@ckeditor/ckeditor5-paragraph/src/paragraph.js
var Paragraph = class _Paragraph extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Paragraph";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    const model = editor.model;
    editor.commands.add("paragraph", new ParagraphCommand(editor));
    editor.commands.add("insertParagraph", new InsertParagraphCommand(editor));
    model.schema.register("paragraph", { inheritAllFrom: "$block" });
    editor.conversion.elementToElement({ model: "paragraph", view: "p" });
    editor.conversion.for("upcast").elementToElement({
      model: (viewElement, { writer }) => {
        if (!_Paragraph.paragraphLikeElements.has(viewElement.name)) {
          return null;
        }
        if (viewElement.isEmpty) {
          return null;
        }
        return writer.createElement("paragraph");
      },
      view: /.+/,
      converterPriority: "low"
    });
  }
};
Paragraph.paragraphLikeElements = /* @__PURE__ */ new Set([
  "blockquote",
  "dd",
  "div",
  "dt",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "li",
  "p",
  "td",
  "th"
]);
export {
  Paragraph as default
};
/*! Bundled license information:

@ckeditor/ckeditor5-paragraph/src/paragraphcommand.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-paragraph/src/insertparagraphcommand.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-paragraph/src/paragraph.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)
*/
//# sourceMappingURL=@ckeditor_ckeditor5-paragraph_src_paragraph.js.map
