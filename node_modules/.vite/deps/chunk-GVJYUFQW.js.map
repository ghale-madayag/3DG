{
  "version": 3,
  "sources": ["../../color-name/index.js", "../../color-convert/conversions.js", "../../color-convert/route.js", "../../color-convert/index.js", "../../@ckeditor/ckeditor5-ui/src/viewcollection.js", "../../@ckeditor/ckeditor5-ui/src/template.js", "../../@ckeditor/ckeditor5-ui/src/view.js", "../../@ckeditor/ckeditor5-ui/src/icon/iconview.js", "../../@ckeditor/ckeditor5-ui/src/button/buttonlabelview.js", "../../@ckeditor/ckeditor5-ui/src/button/buttonview.js", "../../@ckeditor/ckeditor5-ui/src/button/switchbuttonview.js", "../../@ckeditor/ckeditor5-ui/src/colorgrid/colortileview.js", "../../@ckeditor/ckeditor5-ui/src/colorgrid/colorgridview.js", "../../color-parse/index.mjs", "../../@ckeditor/ckeditor5-ui/src/colorpicker/utils.js", "../../@ckeditor/ckeditor5-ui/src/label/labelview.js", "../../@ckeditor/ckeditor5-ui/src/labeledfield/labeledfieldview.js", "../../@ckeditor/ckeditor5-ui/src/input/inputbase.js", "../../@ckeditor/ckeditor5-ui/src/input/inputview.js", "../../@ckeditor/ckeditor5-ui/src/inputtext/inputtextview.js", "../../@ckeditor/ckeditor5-ui/src/textarea/textareaview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/dropdownview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/button/dropdownbuttonview.js", "../../@ckeditor/ckeditor5-ui/src/focuscycler.js", "../../@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js", "../../@ckeditor/ckeditor5-ui/src/list/listview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/button/splitbuttonview.js", "../../@ckeditor/ckeditor5-ui/src/dropdown/utils.js", "../../@ckeditor/ckeditor5-ui/src/labeledfield/utils.js", "../../vanilla-colorful/src/lib/utils/math.ts", "../../vanilla-colorful/src/lib/utils/convert.ts", "../../vanilla-colorful/src/lib/utils/compare.ts", "../../vanilla-colorful/src/lib/utils/dom.ts", "../../vanilla-colorful/src/lib/components/slider.ts", "../../vanilla-colorful/src/lib/components/hue.ts", "../../vanilla-colorful/src/lib/components/saturation.ts", "../../vanilla-colorful/src/lib/styles/color-picker.ts", "../../vanilla-colorful/src/lib/styles/hue.ts", "../../vanilla-colorful/src/lib/styles/saturation.ts", "../../vanilla-colorful/src/lib/components/color-picker.ts", "../../vanilla-colorful/src/lib/entrypoints/hex.ts", "../../vanilla-colorful/src/hex-color-picker.ts", "../../@ckeditor/ckeditor5-ui/src/colorpicker/colorpickerview.js", "../../@ckeditor/ckeditor5-ui/src/colorselector/documentcolorcollection.js", "../../@ckeditor/ckeditor5-ui/src/colorselector/colorgridsfragmentview.js", "../../@ckeditor/ckeditor5-ui/src/colorselector/colorpickerfragmentview.js", "../../@ckeditor/ckeditor5-ui/src/colorselector/colorselectorview.js", "../../@ckeditor/ckeditor5-ui/src/componentfactory.js", "../../@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview.js", "../../@ckeditor/ckeditor5-ui/src/tooltipmanager.js", "../../@ckeditor/ckeditor5-ui/src/editorui/poweredby.js", "../../@ckeditor/ckeditor5-ui/src/arialiveannouncer.js", "../../@ckeditor/ckeditor5-ui/src/editorui/editorui.js", "../../@ckeditor/ckeditor5-ui/src/editorui/editoruiview.js", "../../@ckeditor/ckeditor5-ui/src/formheader/formheaderview.js", "../../@ckeditor/ckeditor5-ui/src/model.js", "../../@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon.js", "../../@ckeditor/ckeditor5-ui/src/panel/sticky/stickypanelview.js", "../../@ckeditor/ckeditor5-ui/src/search/text/searchtextqueryview.js", "../../@ckeditor/ckeditor5-ui/src/search/searchinfoview.js", "../../@ckeditor/ckeditor5-ui/src/search/searchresultsview.js", "../../@ckeditor/ckeditor5-ui/src/search/text/searchtextview.js", "../../@ckeditor/ckeditor5-ui/src/autocomplete/autocompleteview.js", "../../@ckeditor/ckeditor5-ui/src/highlightedtext/highlightedtextview.js", "../../@ckeditor/ckeditor5-ui/src/collapsible/collapsibleview.js", "../../@ckeditor/ckeditor5-ui/src/spinner/spinnerview.js", "../../@ckeditor/ckeditor5-ui/src/toolbar/balloon/balloontoolbar.js", "../../@ckeditor/ckeditor5-ui/src/toolbar/block/blockbuttonview.js", "../../@ckeditor/ckeditor5-ui/src/toolbar/block/blocktoolbar.js", "../../@ckeditor/ckeditor5-ui/src/index.js"],
  "sourcesContent": ["'use strict'\n\nmodule.exports = {\n\t\"aliceblue\": [240, 248, 255],\n\t\"antiquewhite\": [250, 235, 215],\n\t\"aqua\": [0, 255, 255],\n\t\"aquamarine\": [127, 255, 212],\n\t\"azure\": [240, 255, 255],\n\t\"beige\": [245, 245, 220],\n\t\"bisque\": [255, 228, 196],\n\t\"black\": [0, 0, 0],\n\t\"blanchedalmond\": [255, 235, 205],\n\t\"blue\": [0, 0, 255],\n\t\"blueviolet\": [138, 43, 226],\n\t\"brown\": [165, 42, 42],\n\t\"burlywood\": [222, 184, 135],\n\t\"cadetblue\": [95, 158, 160],\n\t\"chartreuse\": [127, 255, 0],\n\t\"chocolate\": [210, 105, 30],\n\t\"coral\": [255, 127, 80],\n\t\"cornflowerblue\": [100, 149, 237],\n\t\"cornsilk\": [255, 248, 220],\n\t\"crimson\": [220, 20, 60],\n\t\"cyan\": [0, 255, 255],\n\t\"darkblue\": [0, 0, 139],\n\t\"darkcyan\": [0, 139, 139],\n\t\"darkgoldenrod\": [184, 134, 11],\n\t\"darkgray\": [169, 169, 169],\n\t\"darkgreen\": [0, 100, 0],\n\t\"darkgrey\": [169, 169, 169],\n\t\"darkkhaki\": [189, 183, 107],\n\t\"darkmagenta\": [139, 0, 139],\n\t\"darkolivegreen\": [85, 107, 47],\n\t\"darkorange\": [255, 140, 0],\n\t\"darkorchid\": [153, 50, 204],\n\t\"darkred\": [139, 0, 0],\n\t\"darksalmon\": [233, 150, 122],\n\t\"darkseagreen\": [143, 188, 143],\n\t\"darkslateblue\": [72, 61, 139],\n\t\"darkslategray\": [47, 79, 79],\n\t\"darkslategrey\": [47, 79, 79],\n\t\"darkturquoise\": [0, 206, 209],\n\t\"darkviolet\": [148, 0, 211],\n\t\"deeppink\": [255, 20, 147],\n\t\"deepskyblue\": [0, 191, 255],\n\t\"dimgray\": [105, 105, 105],\n\t\"dimgrey\": [105, 105, 105],\n\t\"dodgerblue\": [30, 144, 255],\n\t\"firebrick\": [178, 34, 34],\n\t\"floralwhite\": [255, 250, 240],\n\t\"forestgreen\": [34, 139, 34],\n\t\"fuchsia\": [255, 0, 255],\n\t\"gainsboro\": [220, 220, 220],\n\t\"ghostwhite\": [248, 248, 255],\n\t\"gold\": [255, 215, 0],\n\t\"goldenrod\": [218, 165, 32],\n\t\"gray\": [128, 128, 128],\n\t\"green\": [0, 128, 0],\n\t\"greenyellow\": [173, 255, 47],\n\t\"grey\": [128, 128, 128],\n\t\"honeydew\": [240, 255, 240],\n\t\"hotpink\": [255, 105, 180],\n\t\"indianred\": [205, 92, 92],\n\t\"indigo\": [75, 0, 130],\n\t\"ivory\": [255, 255, 240],\n\t\"khaki\": [240, 230, 140],\n\t\"lavender\": [230, 230, 250],\n\t\"lavenderblush\": [255, 240, 245],\n\t\"lawngreen\": [124, 252, 0],\n\t\"lemonchiffon\": [255, 250, 205],\n\t\"lightblue\": [173, 216, 230],\n\t\"lightcoral\": [240, 128, 128],\n\t\"lightcyan\": [224, 255, 255],\n\t\"lightgoldenrodyellow\": [250, 250, 210],\n\t\"lightgray\": [211, 211, 211],\n\t\"lightgreen\": [144, 238, 144],\n\t\"lightgrey\": [211, 211, 211],\n\t\"lightpink\": [255, 182, 193],\n\t\"lightsalmon\": [255, 160, 122],\n\t\"lightseagreen\": [32, 178, 170],\n\t\"lightskyblue\": [135, 206, 250],\n\t\"lightslategray\": [119, 136, 153],\n\t\"lightslategrey\": [119, 136, 153],\n\t\"lightsteelblue\": [176, 196, 222],\n\t\"lightyellow\": [255, 255, 224],\n\t\"lime\": [0, 255, 0],\n\t\"limegreen\": [50, 205, 50],\n\t\"linen\": [250, 240, 230],\n\t\"magenta\": [255, 0, 255],\n\t\"maroon\": [128, 0, 0],\n\t\"mediumaquamarine\": [102, 205, 170],\n\t\"mediumblue\": [0, 0, 205],\n\t\"mediumorchid\": [186, 85, 211],\n\t\"mediumpurple\": [147, 112, 219],\n\t\"mediumseagreen\": [60, 179, 113],\n\t\"mediumslateblue\": [123, 104, 238],\n\t\"mediumspringgreen\": [0, 250, 154],\n\t\"mediumturquoise\": [72, 209, 204],\n\t\"mediumvioletred\": [199, 21, 133],\n\t\"midnightblue\": [25, 25, 112],\n\t\"mintcream\": [245, 255, 250],\n\t\"mistyrose\": [255, 228, 225],\n\t\"moccasin\": [255, 228, 181],\n\t\"navajowhite\": [255, 222, 173],\n\t\"navy\": [0, 0, 128],\n\t\"oldlace\": [253, 245, 230],\n\t\"olive\": [128, 128, 0],\n\t\"olivedrab\": [107, 142, 35],\n\t\"orange\": [255, 165, 0],\n\t\"orangered\": [255, 69, 0],\n\t\"orchid\": [218, 112, 214],\n\t\"palegoldenrod\": [238, 232, 170],\n\t\"palegreen\": [152, 251, 152],\n\t\"paleturquoise\": [175, 238, 238],\n\t\"palevioletred\": [219, 112, 147],\n\t\"papayawhip\": [255, 239, 213],\n\t\"peachpuff\": [255, 218, 185],\n\t\"peru\": [205, 133, 63],\n\t\"pink\": [255, 192, 203],\n\t\"plum\": [221, 160, 221],\n\t\"powderblue\": [176, 224, 230],\n\t\"purple\": [128, 0, 128],\n\t\"rebeccapurple\": [102, 51, 153],\n\t\"red\": [255, 0, 0],\n\t\"rosybrown\": [188, 143, 143],\n\t\"royalblue\": [65, 105, 225],\n\t\"saddlebrown\": [139, 69, 19],\n\t\"salmon\": [250, 128, 114],\n\t\"sandybrown\": [244, 164, 96],\n\t\"seagreen\": [46, 139, 87],\n\t\"seashell\": [255, 245, 238],\n\t\"sienna\": [160, 82, 45],\n\t\"silver\": [192, 192, 192],\n\t\"skyblue\": [135, 206, 235],\n\t\"slateblue\": [106, 90, 205],\n\t\"slategray\": [112, 128, 144],\n\t\"slategrey\": [112, 128, 144],\n\t\"snow\": [255, 250, 250],\n\t\"springgreen\": [0, 255, 127],\n\t\"steelblue\": [70, 130, 180],\n\t\"tan\": [210, 180, 140],\n\t\"teal\": [0, 128, 128],\n\t\"thistle\": [216, 191, 216],\n\t\"tomato\": [255, 99, 71],\n\t\"turquoise\": [64, 224, 208],\n\t\"violet\": [238, 130, 238],\n\t\"wheat\": [245, 222, 179],\n\t\"white\": [255, 255, 255],\n\t\"whitesmoke\": [245, 245, 245],\n\t\"yellow\": [255, 255, 0],\n\t\"yellowgreen\": [154, 205, 50]\n};\n", "/* MIT license */\n/* eslint-disable no-mixed-operators */\nconst cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nconst reverseKeywords = {};\nfor (const key of Object.keys(cssKeywords)) {\n\treverseKeywords[cssKeywords[key]] = key;\n}\n\nconst convert = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\nmodule.exports = convert;\n\n// Hide .channels and .labels properties\nfor (const model of Object.keys(convert)) {\n\tif (!('channels' in convert[model])) {\n\t\tthrow new Error('missing channels property: ' + model);\n\t}\n\n\tif (!('labels' in convert[model])) {\n\t\tthrow new Error('missing channel labels property: ' + model);\n\t}\n\n\tif (convert[model].labels.length !== convert[model].channels) {\n\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t}\n\n\tconst {channels, labels} = convert[model];\n\tdelete convert[model].channels;\n\tdelete convert[model].labels;\n\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\tObject.defineProperty(convert[model], 'labels', {value: labels});\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst min = Math.min(r, g, b);\n\tconst max = Math.max(r, g, b);\n\tconst delta = max - min;\n\tlet h;\n\tlet s;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tconst l = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tlet rdif;\n\tlet gdif;\n\tlet bdif;\n\tlet h;\n\tlet s;\n\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst v = Math.max(r, g, b);\n\tconst diff = v - Math.min(r, g, b);\n\tconst diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = 0;\n\t\ts = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tconst r = rgb[0];\n\tconst g = rgb[1];\n\tlet b = rgb[2];\n\tconst h = convert.rgb.hsl(rgb)[0];\n\tconst w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\n\tconst k = Math.min(1 - r, 1 - g, 1 - b);\n\tconst c = (1 - r - k) / (1 - k) || 0;\n\tconst m = (1 - g - k) / (1 - k) || 0;\n\tconst y = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\nfunction comparativeDistance(x, y) {\n\t/*\n\t\tSee https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n\t*/\n\treturn (\n\t\t((x[0] - y[0]) ** 2) +\n\t\t((x[1] - y[1]) ** 2) +\n\t\t((x[2] - y[2]) ** 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tconst reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tlet currentClosestDistance = Infinity;\n\tlet currentClosestKeyword;\n\n\tfor (const keyword of Object.keys(cssKeywords)) {\n\t\tconst value = cssKeywords[keyword];\n\n\t\t// Compute comparative distance\n\t\tconst distance = comparativeDistance(rgb, value);\n\n\t\t// Check if its less, if so set as closest\n\t\tif (distance < currentClosestDistance) {\n\t\t\tcurrentClosestDistance = distance;\n\t\t\tcurrentClosestKeyword = keyword;\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tlet r = rgb[0] / 255;\n\tlet g = rgb[1] / 255;\n\tlet b = rgb[2] / 255;\n\n\t// Assume sRGB\n\tr = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);\n\n\tconst x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tconst y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tconst z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tconst xyz = convert.rgb.xyz(rgb);\n\tlet x = xyz[0];\n\tlet y = xyz[1];\n\tlet z = xyz[2];\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);\n\n\tconst l = (116 * y) - 16;\n\tconst a = 500 * (x - y);\n\tconst b = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tconst h = hsl[0] / 360;\n\tconst s = hsl[1] / 100;\n\tconst l = hsl[2] / 100;\n\tlet t2;\n\tlet t3;\n\tlet val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tconst t1 = 2 * l - t2;\n\n\tconst rgb = [0, 0, 0];\n\tfor (let i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tconst h = hsl[0];\n\tlet s = hsl[1] / 100;\n\tlet l = hsl[2] / 100;\n\tlet smin = s;\n\tconst lmin = Math.max(l, 0.01);\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tconst v = (l + s) / 2;\n\tconst sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tconst h = hsv[0] / 60;\n\tconst s = hsv[1] / 100;\n\tlet v = hsv[2] / 100;\n\tconst hi = Math.floor(h) % 6;\n\n\tconst f = h - Math.floor(h);\n\tconst p = 255 * v * (1 - s);\n\tconst q = 255 * v * (1 - (s * f));\n\tconst t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tconst h = hsv[0];\n\tconst s = hsv[1] / 100;\n\tconst v = hsv[2] / 100;\n\tconst vmin = Math.max(v, 0.01);\n\tlet sl;\n\tlet l;\n\n\tl = (2 - s) * v;\n\tconst lmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tconst h = hwb[0] / 360;\n\tlet wh = hwb[1] / 100;\n\tlet bl = hwb[2] / 100;\n\tconst ratio = wh + bl;\n\tlet f;\n\n\t// Wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\tconst i = Math.floor(6 * h);\n\tconst v = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tconst n = wh + f * (v - wh); // Linear interpolation\n\n\tlet r;\n\tlet g;\n\tlet b;\n\t/* eslint-disable max-statements-per-line,no-multi-spaces */\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v;  g = n;  b = wh; break;\n\t\tcase 1: r = n;  g = v;  b = wh; break;\n\t\tcase 2: r = wh; g = v;  b = n; break;\n\t\tcase 3: r = wh; g = n;  b = v; break;\n\t\tcase 4: r = n;  g = wh; b = v; break;\n\t\tcase 5: r = v;  g = wh; b = n; break;\n\t}\n\t/* eslint-enable max-statements-per-line,no-multi-spaces */\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tconst c = cmyk[0] / 100;\n\tconst m = cmyk[1] / 100;\n\tconst y = cmyk[2] / 100;\n\tconst k = cmyk[3] / 100;\n\n\tconst r = 1 - Math.min(1, c * (1 - k) + k);\n\tconst g = 1 - Math.min(1, m * (1 - k) + k);\n\tconst b = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tconst x = xyz[0] / 100;\n\tconst y = xyz[1] / 100;\n\tconst z = xyz[2] / 100;\n\tlet r;\n\tlet g;\n\tlet b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// Assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tlet x = xyz[0];\n\tlet y = xyz[1];\n\tlet z = xyz[2];\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);\n\n\tconst l = (116 * y) - 16;\n\tconst a = 500 * (x - y);\n\tconst b = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tconst l = lab[0];\n\tconst a = lab[1];\n\tconst b = lab[2];\n\tlet x;\n\tlet y;\n\tlet z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tconst y2 = y ** 3;\n\tconst x2 = x ** 3;\n\tconst z2 = z ** 3;\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tconst l = lab[0];\n\tconst a = lab[1];\n\tconst b = lab[2];\n\tlet h;\n\n\tconst hr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tconst c = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tconst l = lch[0];\n\tconst c = lch[1];\n\tconst h = lch[2];\n\n\tconst hr = h / 360 * 2 * Math.PI;\n\tconst a = c * Math.cos(hr);\n\tconst b = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args, saturation = null) {\n\tconst [r, g, b] = args;\n\tlet value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tlet ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// Optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tconst r = args[0];\n\tconst g = args[1];\n\tconst b = args[2];\n\n\t// We use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tconst ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tlet color = args % 10;\n\n\t// Handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tconst mult = (~~(args > 50) + 1) * 0.5;\n\tconst r = ((color & 1) * mult) * 255;\n\tconst g = (((color >> 1) & 1) * mult) * 255;\n\tconst b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// Handle greyscale\n\tif (args >= 232) {\n\t\tconst c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tlet rem;\n\tconst r = Math.floor(args / 36) / 5 * 255;\n\tconst g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tconst b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tconst integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tconst string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tconst match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tlet colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(char => {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tconst integer = parseInt(colorString, 16);\n\tconst r = (integer >> 16) & 0xFF;\n\tconst g = (integer >> 8) & 0xFF;\n\tconst b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst max = Math.max(Math.max(r, g), b);\n\tconst min = Math.min(Math.min(r, g), b);\n\tconst chroma = (max - min);\n\tlet grayscale;\n\tlet hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tconst s = hsl[1] / 100;\n\tconst l = hsl[2] / 100;\n\n\tconst c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));\n\n\tlet f = 0;\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tconst s = hsv[1] / 100;\n\tconst v = hsv[2] / 100;\n\n\tconst c = s * v;\n\tlet f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tconst h = hcg[0] / 360;\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tconst pure = [0, 0, 0];\n\tconst hi = (h % 1) * 6;\n\tconst v = hi % 1;\n\tconst w = 1 - v;\n\tlet mg = 0;\n\n\t/* eslint-disable max-statements-per-line */\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\t/* eslint-enable max-statements-per-line */\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tconst v = c + g * (1.0 - c);\n\tlet f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tconst l = g * (1.0 - c) + 0.5 * c;\n\tlet s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\tconst v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tconst w = hwb[1] / 100;\n\tconst b = hwb[2] / 100;\n\tconst v = 1 - b;\n\tconst c = v - w;\n\tlet g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hsv = convert.gray.hsl;\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tconst val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tconst integer = (val << 16) + (val << 8) + val;\n\n\tconst string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tconst val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n", "const conversions = require('./conversions');\n\n/*\n\tThis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tconst graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tconst models = Object.keys(conversions);\n\n\tfor (let len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tconst graph = buildGraph();\n\tconst queue = [fromModel]; // Unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tconst current = queue.pop();\n\t\tconst adjacents = Object.keys(conversions[current]);\n\n\t\tfor (let len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tconst adjacent = adjacents[i];\n\t\t\tconst node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tconst path = [graph[toModel].parent, toModel];\n\tlet fn = conversions[graph[toModel].parent][toModel];\n\n\tlet cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tconst graph = deriveBFS(fromModel);\n\tconst conversion = {};\n\n\tconst models = Object.keys(graph);\n\tfor (let len = models.length, i = 0; i < len; i++) {\n\t\tconst toModel = models[i];\n\t\tconst node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// No possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n", "const conversions = require('./conversions');\nconst route = require('./route');\n\nconst convert = {};\n\nconst models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\tconst result = fn(args);\n\n\t\t// We're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (let len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(fromModel => {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tconst routes = route(fromModel);\n\tconst routeModels = Object.keys(routes);\n\n\trouteModels.forEach(toModel => {\n\t\tconst fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/viewcollection\n */\nimport { CKEditorError, Collection } from '@ckeditor/ckeditor5-utils';\n/**\n * Collects {@link module:ui/view~View} instances.\n *\n * ```ts\n * const parentView = new ParentView( locale );\n * const collection = new ViewCollection( locale );\n *\n * collection.setParent( parentView.element );\n *\n * const viewA = new ChildView( locale );\n * const viewB = new ChildView( locale );\n * ```\n *\n * View collection renders and manages view {@link module:ui/view~View#element elements}:\n *\n * ```ts\n * collection.add( viewA );\n * collection.add( viewB );\n *\n * console.log( parentView.element.firsChild ); // -> viewA.element\n * console.log( parentView.element.lastChild ); // -> viewB.element\n * ```\n *\n * It {@link module:ui/viewcollection~ViewCollection#delegate propagates} DOM events too:\n *\n * ```ts\n * // Delegate #click and #keydown events from viewA and viewB to the parentView.\n * collection.delegate( 'click' ).to( parentView );\n *\n * parentView.on( 'click', ( evt ) => {\n * \tconsole.log( `${ evt.source } has been clicked.` );\n * } );\n *\n * // This event will be delegated to the parentView.\n * viewB.fire( 'click' );\n * ```\n *\n * **Note**: A view collection can be used directly in the {@link module:ui/template~TemplateDefinition definition}\n * of a {@link module:ui/template~Template template}.\n */\nexport default class ViewCollection extends Collection {\n    /**\n     * Creates a new instance of the {@link module:ui/viewcollection~ViewCollection}.\n     *\n     * @param initialItems The initial items of the collection.\n     */\n    constructor(initialItems = []) {\n        super(initialItems, {\n            // An #id Number attribute should be legal and not break the `ViewCollection` instance.\n            // https://github.com/ckeditor/ckeditor5-ui/issues/93\n            idProperty: 'viewUid'\n        });\n        // Handle {@link module:ui/view~View#element} in DOM when a new view is added to the collection.\n        this.on('add', (evt, view, index) => {\n            this._renderViewIntoCollectionParent(view, index);\n        });\n        // Handle {@link module:ui/view~View#element} in DOM when a view is removed from the collection.\n        this.on('remove', (evt, view) => {\n            if (view.element && this._parentElement) {\n                view.element.remove();\n            }\n        });\n        this._parentElement = null;\n    }\n    /**\n     * Destroys the view collection along with child views.\n     * See the view {@link module:ui/view~View#destroy} method.\n     */\n    destroy() {\n        this.map(view => view.destroy());\n    }\n    /**\n     * Sets the parent HTML element of this collection. When parent is set, {@link #add adding} and\n     * {@link #remove removing} views in the collection synchronizes their\n     * {@link module:ui/view~View#element elements} in the parent element.\n     *\n     * @param element A new parent element.\n     */\n    setParent(elementOrDocFragment) {\n        this._parentElement = elementOrDocFragment;\n        // Take care of the initial collection items passed to the constructor.\n        for (const view of this) {\n            this._renderViewIntoCollectionParent(view);\n        }\n    }\n    /**\n     * Delegates selected events coming from within views in the collection to any\n     * {@link module:utils/emittermixin~Emitter}.\n     *\n     * For the following views and collection:\n     *\n     * ```ts\n     * const viewA = new View();\n     * const viewB = new View();\n     * const viewC = new View();\n     *\n     * const views = parentView.createCollection();\n     *\n     * views.delegate( 'eventX' ).to( viewB );\n     * views.delegate( 'eventX', 'eventY' ).to( viewC );\n     *\n     * views.add( viewA );\n     * ```\n     *\n     * the `eventX` is delegated (fired by) `viewB` and `viewC` along with `customData`:\n     *\n     * ```ts\n     * viewA.fire( 'eventX', customData );\n     * ```\n     *\n     * and `eventY` is delegated (fired by) `viewC` along with `customData`:\n     *\n     * ```ts\n     * viewA.fire( 'eventY', customData );\n     * ```\n     *\n     * See {@link module:utils/emittermixin~Emitter#delegate}.\n     *\n     * @param events {@link module:ui/view~View} event names to be delegated to another\n     * {@link module:utils/emittermixin~Emitter}.\n     * @returns Object with `to` property, a function which accepts the destination\n     * of {@link module:utils/emittermixin~Emitter#delegate delegated} events.\n     */\n    delegate(...events) {\n        if (!events.length || !isStringArray(events)) {\n            /**\n             * All event names must be strings.\n             *\n             * @error ui-viewcollection-delegate-wrong-events\n             */\n            throw new CKEditorError('ui-viewcollection-delegate-wrong-events', this);\n        }\n        return {\n            to: dest => {\n                // Activate delegating on existing views in this collection.\n                for (const view of this) {\n                    for (const evtName of events) {\n                        view.delegate(evtName).to(dest);\n                    }\n                }\n                // Activate delegating on future views in this collection.\n                this.on('add', (evt, view) => {\n                    for (const evtName of events) {\n                        view.delegate(evtName).to(dest);\n                    }\n                });\n                // Deactivate delegating when view is removed from this collection.\n                this.on('remove', (evt, view) => {\n                    for (const evtName of events) {\n                        view.stopDelegating(evtName, dest);\n                    }\n                });\n            }\n        };\n    }\n    /**\n     * This method {@link module:ui/view~View#render renders} a new view added to the collection.\n     *\n     * If the {@link #_parentElement parent element} of the collection is set, this method also adds\n     * the view's {@link module:ui/view~View#element} as a child of the parent in DOM at a specified index.\n     *\n     * **Note**: If index is not specified, the view's element is pushed as the last child\n     * of the parent element.\n     *\n     * @param view A new view added to the collection.\n     * @param index An index the view holds in the collection. When not specified,\n     * the view is added at the end.\n     */\n    _renderViewIntoCollectionParent(view, index) {\n        if (!view.isRendered) {\n            view.render();\n        }\n        if (view.element && this._parentElement) {\n            this._parentElement.insertBefore(view.element, this._parentElement.children[index]);\n        }\n    }\n    /**\n     * Removes a child view from the collection. If the {@link #setParent parent element} of the\n     * collection has been set, the {@link module:ui/view~View#element element} of the view is also removed\n     * in DOM, reflecting the order of the collection.\n     *\n     * See the {@link #add} method.\n     *\n     * @param subject The view to remove, its id or index in the collection.\n     * @returns The removed view.\n     */\n    remove(subject) {\n        return super.remove(subject);\n    }\n}\n/**\n * Check if all entries of the array are of `String` type.\n *\n * @param arr An array to be checked.\n */\nfunction isStringArray(arr) {\n    return arr.every(a => typeof a == 'string');\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/template\n */\n/* global document */\nimport View from './view';\nimport ViewCollection from './viewcollection';\nimport { CKEditorError, EmitterMixin, isNode, toArray } from '@ckeditor/ckeditor5-utils';\nimport { isObject, cloneDeepWith } from 'lodash-es';\nconst xhtmlNs = 'http://www.w3.org/1999/xhtml';\n/**\n * A basic Template class. It renders a DOM HTML element or text from a\n * {@link module:ui/template~TemplateDefinition definition} and supports element attributes, children,\n * bindings to {@link module:utils/observablemixin~Observable observables} and DOM event propagation.\n *\n * A simple template can look like this:\n *\n * ```ts\n * const bind = Template.bind( observable, emitter );\n *\n * new Template( {\n * \ttag: 'p',\n * \tattributes: {\n * \t\tclass: 'foo',\n * \t\tstyle: {\n * \t\t\tbackgroundColor: 'yellow'\n * \t\t}\n * \t},\n * \ton: {\n * \t\tclick: bind.to( 'clicked' )\n * \t},\n * \tchildren: [\n * \t\t'A paragraph.'\n * \t]\n * } ).render();\n * ```\n *\n * and it will render the following HTML element:\n *\n * ```html\n * <p class=\"foo\" style=\"background-color: yellow;\">A paragraph.</p>\n * ```\n *\n * Additionally, the `observable` will always fire `clicked` upon clicking `<p>` in the DOM.\n *\n * See {@link module:ui/template~TemplateDefinition} to know more about templates and complex\n * template definitions.\n */\nexport default class Template extends EmitterMixin() {\n    /**\n     * Creates an instance of the {@link ~Template} class.\n     *\n     * @param def The definition of the template.\n     */\n    constructor(def) {\n        super();\n        Object.assign(this, normalize(clone(def)));\n        this._isRendered = false;\n        this._revertData = null;\n    }\n    /**\n     * Renders a DOM Node (an HTML element or text) out of the template.\n     *\n     * ```ts\n     * const domNode = new Template( { ... } ).render();\n     * ```\n     *\n     * See: {@link #apply}.\n     */\n    render() {\n        const node = this._renderNode({\n            intoFragment: true\n        });\n        this._isRendered = true;\n        return node;\n    }\n    /**\n     * Applies the template to an existing DOM Node, either HTML element or text.\n     *\n     * **Note:** No new DOM nodes will be created. Applying extends:\n     *\n     * {@link module:ui/template~TemplateDefinition attributes},\n     * {@link module:ui/template~TemplateDefinition event listeners}, and\n     * `textContent` of {@link module:ui/template~TemplateDefinition children} only.\n     *\n     * **Note:** Existing `class` and `style` attributes are extended when a template\n     * is applied to an HTML element, while other attributes and `textContent` are overridden.\n     *\n     * **Note:** The process of applying a template can be easily reverted using the\n     * {@link module:ui/template~Template#revert} method.\n     *\n     * ```ts\n     * const element = document.createElement( 'div' );\n     * const observable = new Model( { divClass: 'my-div' } );\n     * const emitter = Object.create( EmitterMixin );\n     * const bind = Template.bind( observable, emitter );\n     *\n     * new Template( {\n     * \tattributes: {\n     * \t\tid: 'first-div',\n     * \t\tclass: bind.to( 'divClass' )\n     * \t},\n     * \ton: {\n     * \t\tclick: bind( 'elementClicked' ) // Will be fired by the observable.\n     * \t},\n     * \tchildren: [\n     * \t\t'Div text.'\n     * \t]\n     * } ).apply( element );\n     *\n     * console.log( element.outerHTML ); // -> '<div id=\"first-div\" class=\"my-div\"></div>'\n     * ```\n     *\n     * @see module:ui/template~Template#render\n     * @see module:ui/template~Template#revert\n     * @param node Root node for the template to apply.\n     */\n    apply(node) {\n        this._revertData = getEmptyRevertData();\n        this._renderNode({\n            node,\n            intoFragment: false,\n            isApplying: true,\n            revertData: this._revertData\n        });\n        return node;\n    }\n    /**\n     * Reverts a template {@link module:ui/template~Template#apply applied} to a DOM node.\n     *\n     * @param node The root node for the template to revert. In most of the cases, it is the\n     * same node used by {@link module:ui/template~Template#apply}.\n     */\n    revert(node) {\n        if (!this._revertData) {\n            /**\n             * Attempting to revert a template which has not been applied yet.\n             *\n             * @error ui-template-revert-not-applied\n             */\n            throw new CKEditorError('ui-template-revert-not-applied', [this, node]);\n        }\n        this._revertTemplateFromNode(node, this._revertData);\n    }\n    /**\n     * Returns an iterator which traverses the template in search of {@link module:ui/view~View}\n     * instances and returns them one by one.\n     *\n     * ```ts\n     * const viewFoo = new View();\n     * const viewBar = new View();\n     * const viewBaz = new View();\n     * const template = new Template( {\n     * \ttag: 'div',\n     * \tchildren: [\n     * \t\tviewFoo,\n     * \t\t{\n     * \t\t\ttag: 'div',\n     * \t\t\tchildren: [\n     * \t\t\t\tviewBar\n     * \t\t\t]\n     * \t\t},\n     * \t\tviewBaz\n     * \t]\n     * } );\n     *\n     * // Logs: viewFoo, viewBar, viewBaz\n     * for ( const view of template.getViews() ) {\n     * \tconsole.log( view );\n     * }\n     * ```\n     */\n    *getViews() {\n        function* search(def) {\n            if (def.children) {\n                for (const child of def.children) {\n                    if (isView(child)) {\n                        yield child;\n                    }\n                    else if (isTemplate(child)) {\n                        yield* search(child);\n                    }\n                }\n            }\n        }\n        yield* search(this);\n    }\n    /**\n     * An entry point to the interface which binds DOM nodes to\n     * {@link module:utils/observablemixin~Observable observables}.\n     * There are two types of bindings:\n     *\n     * * HTML element attributes or text `textContent` synchronized with attributes of an\n     * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}\n     * and {@link module:ui/template~BindChain#if}.\n     *\n     * ```ts\n     * const bind = Template.bind( observable, emitter );\n     *\n     * new Template( {\n     * \tattributes: {\n     * \t\t// Binds the element \"class\" attribute to observable#classAttribute.\n     * \t\tclass: bind.to( 'classAttribute' )\n     * \t}\n     * } ).render();\n     * ```\n     *\n     * * DOM events fired on HTML element propagated through\n     * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}.\n     *\n     * ```ts\n     * const bind = Template.bind( observable, emitter );\n     *\n     * new Template( {\n     * \ton: {\n     * \t\t// Will be fired by the observable.\n     * \t\tclick: bind( 'elementClicked' )\n     * \t}\n     * } ).render();\n     * ```\n     *\n     * Also see {@link module:ui/view~View#bindTemplate}.\n     *\n     * @param observable An observable which provides boundable attributes.\n     * @param emitter An emitter that listens to observable attribute\n     * changes or DOM Events (depending on the kind of the binding). Usually, a {@link module:ui/view~View} instance.\n     */\n    static bind(observable, emitter) {\n        return {\n            to(eventNameOrFunctionOrAttribute, callback) {\n                return new TemplateToBinding({\n                    eventNameOrFunction: eventNameOrFunctionOrAttribute,\n                    attribute: eventNameOrFunctionOrAttribute,\n                    observable, emitter, callback\n                });\n            },\n            if(attribute, valueIfTrue, callback) {\n                return new TemplateIfBinding({\n                    observable, emitter, attribute, valueIfTrue, callback\n                });\n            }\n        };\n    }\n    /**\n     * Extends an existing {@link module:ui/template~Template} instance with some additional content\n     * from another {@link module:ui/template~TemplateDefinition}.\n     *\n     * ```ts\n     * const bind = Template.bind( observable, emitter );\n     *\n     * const template = new Template( {\n     * \ttag: 'p',\n     * \tattributes: {\n     * \t\tclass: 'a',\n     * \t\tdata-x: bind.to( 'foo' )\n     * \t},\n     * \tchildren: [\n     * \t\t{\n     * \t\t\ttag: 'span',\n     * \t\t\tattributes: {\n     * \t\t\t\tclass: 'b'\n     * \t\t\t},\n     * \t\t\tchildren: [\n     * \t\t\t\t'Span'\n     * \t\t\t]\n     * \t\t}\n     * \t]\n     *  } );\n     *\n     * // Instance-level extension.\n     * Template.extend( template, {\n     * \tattributes: {\n     * \t\tclass: 'b',\n     * \t\tdata-x: bind.to( 'bar' )\n     * \t},\n     * \tchildren: [\n     * \t\t{\n     * \t\t\tattributes: {\n     * \t\t\t\tclass: 'c'\n     * \t\t\t}\n     * \t\t}\n     * \t]\n     * } );\n     *\n     * // Child extension.\n     * Template.extend( template.children[ 0 ], {\n     * \tattributes: {\n     * \t\tclass: 'd'\n     * \t}\n     * } );\n     * ```\n     *\n     * the `outerHTML` of `template.render()` is:\n     *\n     * ```html\n     * <p class=\"a b\" data-x=\"{ observable.foo } { observable.bar }\">\n     * \t<span class=\"b c d\">Span</span>\n     * </p>\n     * ```\n     *\n     * @param template An existing template instance to be extended.\n     * @param def Additional definition to be applied to a template.\n     */\n    static extend(template, def) {\n        if (template._isRendered) {\n            /**\n             * Extending a template after rendering may not work as expected. To make sure\n             * the {@link module:ui/template~Template.extend extending} works for an element,\n             * make sure it happens before {@link module:ui/template~Template#render} is called.\n             *\n             * @error template-extend-render\n             */\n            throw new CKEditorError('template-extend-render', [this, template]);\n        }\n        extendTemplate(template, normalize(clone(def)));\n    }\n    /**\n     * Renders a DOM Node (either an HTML element or text) out of the template.\n     *\n     * @param data Rendering data.\n     */\n    _renderNode(data) {\n        let isInvalid;\n        if (data.node) {\n            // When applying, a definition cannot have \"tag\" and \"text\" at the same time.\n            isInvalid = this.tag && this.text;\n        }\n        else {\n            // When rendering, a definition must have either \"tag\" or \"text\": XOR( this.tag, this.text ).\n            isInvalid = this.tag ? this.text : !this.text;\n        }\n        if (isInvalid) {\n            /**\n             * Node definition cannot have the \"tag\" and \"text\" properties at the same time.\n             * Node definition must have either \"tag\" or \"text\" when rendering a new Node.\n             *\n             * @error ui-template-wrong-syntax\n             */\n            throw new CKEditorError('ui-template-wrong-syntax', this);\n        }\n        if (this.text) {\n            return this._renderText(data);\n        }\n        else {\n            return this._renderElement(data);\n        }\n    }\n    /**\n     * Renders an HTML element out of the template.\n     *\n     * @param data Rendering data.\n     */\n    _renderElement(data) {\n        let node = data.node;\n        if (!node) {\n            node = data.node = document.createElementNS(this.ns || xhtmlNs, this.tag);\n        }\n        this._renderAttributes(data);\n        this._renderElementChildren(data);\n        this._setUpListeners(data);\n        return node;\n    }\n    /**\n     * Renders a text node out of {@link module:ui/template~Template#text}.\n     *\n     * @param data Rendering data.\n     */\n    _renderText(data) {\n        let node = data.node;\n        // Save the original textContent to revert it in #revert().\n        if (node) {\n            data.revertData.text = node.textContent;\n        }\n        else {\n            node = data.node = document.createTextNode('');\n        }\n        // Check if this Text Node is bound to Observable. Cases:\n        //\n        //\t\ttext: [ Template.bind( ... ).to( ... ) ]\n        //\n        //\t\ttext: [\n        //\t\t\t'foo',\n        //\t\t\tTemplate.bind( ... ).to( ... ),\n        //\t\t\t...\n        //\t\t]\n        //\n        if (hasTemplateBinding(this.text)) {\n            this._bindToObservable({\n                schema: this.text,\n                updater: getTextUpdater(node),\n                data\n            });\n        }\n        // Simply set text. Cases:\n        //\n        //\t\ttext: [ 'all', 'are', 'static' ]\n        //\n        //\t\ttext: [ 'foo' ]\n        //\n        else {\n            node.textContent = this.text.join('');\n        }\n        return node;\n    }\n    /**\n     * Renders HTML element attributes out of {@link module:ui/template~Template#attributes}.\n     *\n     * @param data Rendering data.\n     */\n    _renderAttributes(data) {\n        if (!this.attributes) {\n            return;\n        }\n        const node = data.node;\n        const revertData = data.revertData;\n        for (const attrName in this.attributes) {\n            // Current attribute value in DOM.\n            const domAttrValue = node.getAttribute(attrName);\n            // The value to be set.\n            const attrValue = this.attributes[attrName];\n            // Save revert data.\n            if (revertData) {\n                revertData.attributes[attrName] = domAttrValue;\n            }\n            // Detect custom namespace:\n            //\n            //\t\tclass: {\n            //\t\t\tns: 'abc',\n            //\t\t\tvalue: Template.bind( ... ).to( ... )\n            //\t\t}\n            //\n            const attrNs = isNamespaced(attrValue) ? attrValue[0].ns : null;\n            // Activate binding if one is found. Cases:\n            //\n            //\t\tclass: [\n            //\t\t\tTemplate.bind( ... ).to( ... )\n            //\t\t]\n            //\n            //\t\tclass: [\n            //\t\t\t'bar',\n            //\t\t\tTemplate.bind( ... ).to( ... ),\n            //\t\t\t'baz'\n            //\t\t]\n            //\n            //\t\tclass: {\n            //\t\t\tns: 'abc',\n            //\t\t\tvalue: Template.bind( ... ).to( ... )\n            //\t\t}\n            //\n            if (hasTemplateBinding(attrValue)) {\n                // Normalize attributes with additional data like namespace:\n                //\n                //\t\tclass: {\n                //\t\t\tns: 'abc',\n                //\t\t\tvalue: [ ... ]\n                //\t\t}\n                //\n                const valueToBind = isNamespaced(attrValue) ? attrValue[0].value : attrValue;\n                // Extend the original value of attributes like \"style\" and \"class\",\n                // don't override them.\n                if (revertData && shouldExtend(attrName)) {\n                    valueToBind.unshift(domAttrValue);\n                }\n                this._bindToObservable({\n                    schema: valueToBind,\n                    updater: getAttributeUpdater(node, attrName, attrNs),\n                    data\n                });\n            }\n            // Style attribute could be an Object so it needs to be parsed in a specific way.\n            //\n            //\t\tstyle: {\n            //\t\t\twidth: '100px',\n            //\t\t\theight: Template.bind( ... ).to( ... )\n            //\t\t}\n            //\n            else if (attrName == 'style' && typeof attrValue[0] !== 'string') {\n                this._renderStyleAttribute(attrValue[0], data);\n            }\n            // Otherwise simply set the static attribute:\n            //\n            //\t\tclass: [ 'foo' ]\n            //\n            //\t\tclass: [ 'all', 'are', 'static' ]\n            //\n            //\t\tclass: [\n            //\t\t\t{\n            //\t\t\t\tns: 'abc',\n            //\t\t\t\tvalue: [ 'foo' ]\n            //\t\t\t}\n            //\t\t]\n            //\n            else {\n                // Extend the original value of attributes like \"style\" and \"class\",\n                // don't override them.\n                if (revertData && domAttrValue && shouldExtend(attrName)) {\n                    attrValue.unshift(domAttrValue);\n                }\n                const value = attrValue\n                    // Retrieve \"values\" from:\n                    //\n                    //\t\tclass: [\n                    //\t\t\t{\n                    //\t\t\t\tns: 'abc',\n                    //\t\t\t\tvalue: [ ... ]\n                    //\t\t\t}\n                    //\t\t]\n                    //\n                    .map((val) => val ? (val.value || val) : val)\n                    // Flatten the array.\n                    .reduce((prev, next) => prev.concat(next), [])\n                    // Convert into string.\n                    .reduce(arrayValueReducer, '');\n                if (!isFalsy(value)) {\n                    node.setAttributeNS(attrNs, attrName, value);\n                }\n            }\n        }\n    }\n    /**\n     * Renders the `style` attribute of an HTML element based on\n     * {@link module:ui/template~Template#attributes}.\n     *\n     * A style attribute is an object with static values:\n     *\n     * ```ts\n     * attributes: {\n     * \tstyle: {\n     * \t\tcolor: 'red'\n     * \t}\n     * }\n     * ```\n     *\n     * or values bound to {@link module:ui/model~Model} properties:\n     *\n     * ```ts\n     * attributes: {\n     * \tstyle: {\n     * \t\tcolor: bind.to( ... )\n     * \t}\n     * }\n     * ```\n     *\n     * Note: The `style` attribute is rendered without setting the namespace. It does not seem to be\n     * needed.\n     *\n     * @param styles Styles located in `attributes.style` of {@link module:ui/template~TemplateDefinition}.\n     * @param data Rendering data.\n     */\n    _renderStyleAttribute(styles, data) {\n        const node = data.node;\n        for (const styleName in styles) {\n            const styleValue = styles[styleName];\n            // Cases:\n            //\n            //\t\tstyle: {\n            //\t\t\tcolor: bind.to( 'attribute' )\n            //\t\t}\n            //\n            if (hasTemplateBinding(styleValue)) {\n                this._bindToObservable({\n                    schema: [styleValue],\n                    updater: getStyleUpdater(node, styleName),\n                    data\n                });\n            }\n            // Cases:\n            //\n            //\t\tstyle: {\n            //\t\t\tcolor: 'red'\n            //\t\t}\n            //\n            else {\n                node.style[styleName] = styleValue;\n            }\n        }\n    }\n    /**\n     * Recursively renders HTML element's children from {@link module:ui/template~Template#children}.\n     *\n     * @param data Rendering data.\n     */\n    _renderElementChildren(data) {\n        const node = data.node;\n        const container = data.intoFragment ? document.createDocumentFragment() : node;\n        const isApplying = data.isApplying;\n        let childIndex = 0;\n        for (const child of this.children) {\n            if (isViewCollection(child)) {\n                if (!isApplying) {\n                    child.setParent(node);\n                    // Note: ViewCollection renders its children.\n                    for (const view of child) {\n                        container.appendChild(view.element);\n                    }\n                }\n            }\n            else if (isView(child)) {\n                if (!isApplying) {\n                    if (!child.isRendered) {\n                        child.render();\n                    }\n                    container.appendChild(child.element);\n                }\n            }\n            else if (isNode(child)) {\n                container.appendChild(child);\n            }\n            else {\n                if (isApplying) {\n                    const revertData = data.revertData;\n                    const childRevertData = getEmptyRevertData();\n                    revertData.children.push(childRevertData);\n                    child._renderNode({\n                        intoFragment: false,\n                        node: container.childNodes[childIndex++],\n                        isApplying: true,\n                        revertData: childRevertData\n                    });\n                }\n                else {\n                    container.appendChild(child.render());\n                }\n            }\n        }\n        if (data.intoFragment) {\n            node.appendChild(container);\n        }\n    }\n    /**\n     * Activates `on` event listeners from the {@link module:ui/template~TemplateDefinition}\n     * on an HTML element.\n     *\n     * @param data Rendering data.\n     */\n    _setUpListeners(data) {\n        if (!this.eventListeners) {\n            return;\n        }\n        for (const key in this.eventListeners) {\n            const revertBindings = this.eventListeners[key].map(schemaItem => {\n                const [domEvtName, domSelector] = key.split('@');\n                return schemaItem.activateDomEventListener(domEvtName, domSelector, data);\n            });\n            if (data.revertData) {\n                data.revertData.bindings.push(revertBindings);\n            }\n        }\n    }\n    /**\n     * For a given {@link module:ui/template~TemplateValueSchema} containing {@link module:ui/template~TemplateBinding}\n     * activates the binding and sets its initial value.\n     *\n     * Note: {@link module:ui/template~TemplateValueSchema} can be for HTML element attributes or\n     * text node `textContent`.\n     *\n     * @param options Binding options.\n     * @param options.updater A function which updates the DOM (like attribute or text).\n     * @param options.data Rendering data.\n     */\n    _bindToObservable({ schema, updater, data }) {\n        const revertData = data.revertData;\n        // Set initial values.\n        syncValueSchemaValue(schema, updater, data);\n        const revertBindings = schema\n            // Filter \"falsy\" (false, undefined, null, '') value schema components out.\n            .filter(item => !isFalsy(item))\n            // Filter inactive bindings from schema, like static strings ('foo'), numbers (42), etc.\n            .filter((item) => item.observable)\n            // Once only the actual binding are left, let the emitter listen to observable change:attribute event.\n            // TODO: Reduce the number of listeners attached as many bindings may listen\n            // to the same observable attribute.\n            .map(templateBinding => templateBinding.activateAttributeListener(schema, updater, data));\n        if (revertData) {\n            revertData.bindings.push(revertBindings);\n        }\n    }\n    /**\n     * Reverts {@link module:ui/template~RenderData#revertData template data} from a node to\n     * return it to the original state.\n     *\n     * @param node A node to be reverted.\n     * @param revertData An object that stores information about what changes have been made by\n     * {@link #apply} to the node. See {@link module:ui/template~RenderData#revertData} for more information.\n     */\n    _revertTemplateFromNode(node, revertData) {\n        for (const binding of revertData.bindings) {\n            // Each binding may consist of several observable+observable#attribute.\n            // like the following has 2:\n            //\n            //\t\tclass: [\n            //\t\t\t'x',\n            //\t\t\tbind.to( 'foo' ),\n            //\t\t\t'y',\n            //\t\t\tbind.to( 'bar' )\n            //\t\t]\n            //\n            for (const revertBinding of binding) {\n                revertBinding();\n            }\n        }\n        if (revertData.text) {\n            node.textContent = revertData.text;\n            return;\n        }\n        const element = node;\n        for (const attrName in revertData.attributes) {\n            const attrValue = revertData.attributes[attrName];\n            // When the attribute has **not** been set before #apply().\n            if (attrValue === null) {\n                element.removeAttribute(attrName);\n            }\n            else {\n                element.setAttribute(attrName, attrValue);\n            }\n        }\n        for (let i = 0; i < revertData.children.length; ++i) {\n            this._revertTemplateFromNode(element.childNodes[i], revertData.children[i]);\n        }\n    }\n}\n/**\n * Describes a binding created by the {@link module:ui/template~Template.bind} interface.\n *\n * @internal\n */\nexport class TemplateBinding {\n    /**\n     * Creates an instance of the {@link module:ui/template~TemplateBinding} class.\n     *\n     * @param def The definition of the binding.\n     */\n    constructor(def) {\n        this.attribute = def.attribute;\n        this.observable = def.observable;\n        this.emitter = def.emitter;\n        this.callback = def.callback;\n    }\n    /**\n     * Returns the value of the binding. It is the value of the {@link module:ui/template~TemplateBinding#attribute} in\n     * {@link module:ui/template~TemplateBinding#observable}. The value may be processed by the\n     * {@link module:ui/template~TemplateBinding#callback}, if such has been passed to the binding.\n     *\n     * @param node A native DOM node, passed to the custom {@link module:ui/template~TemplateBinding#callback}.\n     * @returns The value of {@link module:ui/template~TemplateBinding#attribute} in\n     * {@link module:ui/template~TemplateBinding#observable}.\n     */\n    getValue(node) {\n        const value = this.observable[this.attribute];\n        return this.callback ? this.callback(value, node) : value;\n    }\n    /**\n     * Activates the listener which waits for changes of the {@link module:ui/template~TemplateBinding#attribute} in\n     * {@link module:ui/template~TemplateBinding#observable}, then updates the DOM with the aggregated\n     * value of {@link module:ui/template~TemplateValueSchema}.\n     *\n     * @param schema A full schema to generate an attribute or text in the DOM.\n     * @param updater A DOM updater function used to update the native DOM attribute or text.\n     * @param data Rendering data.\n     * @returns A function to sever the listener binding.\n     */\n    activateAttributeListener(schema, updater, data) {\n        const callback = () => syncValueSchemaValue(schema, updater, data);\n        this.emitter.listenTo(this.observable, `change:${this.attribute}`, callback);\n        // Allows revert of the listener.\n        return () => {\n            this.emitter.stopListening(this.observable, `change:${this.attribute}`, callback);\n        };\n    }\n}\n/**\n * Describes either:\n *\n * * a binding to an {@link module:utils/observablemixin~Observable},\n * * or a native DOM event binding.\n *\n * It is created by the {@link module:ui/template~BindChain#to} method.\n *\n * @internal\n */\nexport class TemplateToBinding extends TemplateBinding {\n    constructor(def) {\n        super(def);\n        this.eventNameOrFunction = def.eventNameOrFunction;\n    }\n    /**\n     * Activates the listener for the native DOM event, which when fired, is propagated by\n     * the {@link module:ui/template~TemplateBinding#emitter}.\n     *\n     * @param domEvtName The name of the native DOM event.\n     * @param domSelector The selector in the DOM to filter delegated events.\n     * @param data Rendering data.\n     * @returns A function to sever the listener binding.\n     */\n    activateDomEventListener(domEvtName, domSelector, data) {\n        const callback = (evt, domEvt) => {\n            if (!domSelector || domEvt.target.matches(domSelector)) {\n                if (typeof this.eventNameOrFunction == 'function') {\n                    this.eventNameOrFunction(domEvt);\n                }\n                else {\n                    this.observable.fire(this.eventNameOrFunction, domEvt);\n                }\n            }\n        };\n        this.emitter.listenTo(data.node, domEvtName, callback);\n        // Allows revert of the listener.\n        return () => {\n            this.emitter.stopListening(data.node, domEvtName, callback);\n        };\n    }\n}\n/**\n * Describes a binding to {@link module:utils/observablemixin~Observable} created by the {@link module:ui/template~BindChain#if}\n * method.\n *\n * @internal\n */\nexport class TemplateIfBinding extends TemplateBinding {\n    constructor(def) {\n        super(def);\n        this.valueIfTrue = def.valueIfTrue;\n    }\n    /**\n     * @inheritDoc\n     */\n    getValue(node) {\n        const value = super.getValue(node);\n        return isFalsy(value) ? false : (this.valueIfTrue || true);\n    }\n}\n/**\n * Checks whether given {@link module:ui/template~TemplateValueSchema} contains a\n * {@link module:ui/template~TemplateBinding}.\n */\nfunction hasTemplateBinding(schema) {\n    if (!schema) {\n        return false;\n    }\n    // Normalize attributes with additional data like namespace:\n    //\n    //\t\tclass: {\n    //\t\t\tns: 'abc',\n    //\t\t\tvalue: [ ... ]\n    //\t\t}\n    //\n    if (schema.value) {\n        schema = schema.value;\n    }\n    if (Array.isArray(schema)) {\n        return schema.some(hasTemplateBinding);\n    }\n    else if (schema instanceof TemplateBinding) {\n        return true;\n    }\n    return false;\n}\n/**\n * Assembles the value using {@link module:ui/template~TemplateValueSchema} and stores it in a form of\n * an Array. Each entry of the Array corresponds to one of {@link module:ui/template~TemplateValueSchema}\n * items.\n *\n * @param node DOM Node updated when {@link module:utils/observablemixin~Observable} changes.\n */\nfunction getValueSchemaValue(schema, node) {\n    return schema.map(schemaItem => {\n        // Process {@link module:ui/template~TemplateBinding} bindings.\n        if (schemaItem instanceof TemplateBinding) {\n            return schemaItem.getValue(node);\n        }\n        // All static values like strings, numbers, and \"falsy\" values (false, null, undefined, '', etc.) just pass.\n        return schemaItem;\n    });\n}\n/**\n * A function executed each time the bound Observable attribute changes, which updates the DOM with a value\n * constructed from {@link module:ui/template~TemplateValueSchema}.\n *\n * @param updater A function which updates the DOM (like attribute or text).\n * @param node DOM Node updated when {@link module:utils/observablemixin~Observable} changes.\n */\nfunction syncValueSchemaValue(schema, updater, { node }) {\n    const values = getValueSchemaValue(schema, node);\n    let value;\n    // Check if schema is a single Template.bind.if, like:\n    //\n    //\t\tclass: Template.bind.if( 'foo' )\n    //\n    if (schema.length == 1 && schema[0] instanceof TemplateIfBinding) {\n        value = values[0];\n    }\n    else {\n        value = values.reduce(arrayValueReducer, '');\n    }\n    if (isFalsy(value)) {\n        updater.remove();\n    }\n    else {\n        updater.set(value);\n    }\n}\n/**\n * Returns an object consisting of `set` and `remove` functions, which\n * can be used in the context of DOM Node to set or reset `textContent`.\n * @see module:ui/view~View#_bindToObservable\n *\n * @param node DOM Node to be modified.\n */\nfunction getTextUpdater(node) {\n    return {\n        set(value) {\n            node.textContent = value;\n        },\n        remove() {\n            node.textContent = '';\n        }\n    };\n}\n/**\n * Returns an object consisting of `set` and `remove` functions, which\n * can be used in the context of DOM Node to set or reset an attribute.\n * @see module:ui/view~View#_bindToObservable\n *\n * @param el DOM Node to be modified.\n * @param attrName Name of the attribute to be modified.\n * @param ns Namespace to use.\n */\nfunction getAttributeUpdater(el, attrName, ns) {\n    return {\n        set(value) {\n            el.setAttributeNS(ns, attrName, value);\n        },\n        remove() {\n            el.removeAttributeNS(ns, attrName);\n        }\n    };\n}\n/**\n * Returns an object consisting of `set` and `remove` functions, which\n * can be used in the context of CSSStyleDeclaration to set or remove a style.\n * @see module:ui/view~View#_bindToObservable\n *\n * @param el DOM Node to be modified.\n * @param styleName Name of the style to be modified.\n */\nfunction getStyleUpdater(el, styleName) {\n    return {\n        set(value) {\n            el.style[styleName] = value;\n        },\n        remove() {\n            el.style[styleName] = null;\n        }\n    };\n}\n/**\n * Clones definition of the template.\n */\nfunction clone(def) {\n    const clone = cloneDeepWith(def, value => {\n        // Don't clone the `Template.bind`* bindings because of the references to Observable\n        // and DomEmitterMixin instances inside, which would also be traversed and cloned by greedy\n        // cloneDeepWith algorithm. There's no point in cloning Observable/DomEmitterMixins\n        // along with the definition.\n        //\n        // Don't clone Template instances if provided as a child. They're simply #render()ed\n        // and nothing should interfere.\n        //\n        // Also don't clone View instances if provided as a child of the Template. The template\n        // instance will be extracted from the View during the normalization and there's no need\n        // to clone it.\n        if (value && (value instanceof TemplateBinding || isTemplate(value) || isView(value) || isViewCollection(value))) {\n            return value;\n        }\n    });\n    return clone;\n}\n/**\n * Normalizes given {@link module:ui/template~TemplateDefinition}.\n *\n * See:\n *  * {@link normalizeAttributes}\n *  * {@link normalizeListeners}\n *  * {@link normalizePlainTextDefinition}\n *  * {@link normalizeTextDefinition}\n *\n * @param def A template definition.\n * @returns Normalized definition.\n */\nfunction normalize(def) {\n    if (typeof def == 'string') {\n        def = normalizePlainTextDefinition(def);\n    }\n    else if (def.text) {\n        normalizeTextDefinition(def);\n    }\n    if (def.on) {\n        def.eventListeners = normalizeListeners(def.on);\n        // Template mixes EmitterMixin, so delete #on to avoid collision.\n        delete def.on;\n    }\n    if (!def.text) {\n        if (def.attributes) {\n            normalizeAttributes(def.attributes);\n        }\n        const children = [];\n        if (def.children) {\n            if (isViewCollection(def.children)) {\n                children.push(def.children);\n            }\n            else {\n                for (const child of def.children) {\n                    if (isTemplate(child) || isView(child) || isNode(child)) {\n                        children.push(child);\n                    }\n                    else {\n                        children.push(new Template(child));\n                    }\n                }\n            }\n        }\n        def.children = children;\n    }\n    return def;\n}\n/**\n * Normalizes \"attributes\" section of {@link module:ui/template~TemplateDefinition}.\n *\n * ```\n * attributes: {\n * \ta: 'bar',\n * \tb: {@link module:ui/template~TemplateBinding},\n * \tc: {\n * \t\tvalue: 'bar'\n * \t}\n * }\n * ```\n *\n * becomes\n *\n * ```\n * attributes: {\n * \ta: [ 'bar' ],\n * \tb: [ {@link module:ui/template~TemplateBinding} ],\n * \tc: {\n * \t\tvalue: [ 'bar' ]\n * \t}\n * }\n * ```\n */\nfunction normalizeAttributes(attributes) {\n    for (const a in attributes) {\n        if (attributes[a].value) {\n            attributes[a].value = toArray(attributes[a].value);\n        }\n        arrayify(attributes, a);\n    }\n}\n/**\n * Normalizes \"on\" section of {@link module:ui/template~TemplateDefinition}.\n *\n * ```\n * on: {\n * \ta: 'bar',\n * \tb: {@link module:ui/template~TemplateBinding},\n * \tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n * }\n * ```\n *\n * becomes\n *\n * ```\n * on: {\n * \ta: [ 'bar' ],\n * \tb: [ {@link module:ui/template~TemplateBinding} ],\n * \tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n * }\n * ```\n *\n * @returns Object containing normalized listeners.\n */\nfunction normalizeListeners(listeners) {\n    for (const l in listeners) {\n        arrayify(listeners, l);\n    }\n    return listeners;\n}\n/**\n * Normalizes \"string\" {@link module:ui/template~TemplateDefinition}.\n *\n * ```\n * \"foo\"\n * ```\n *\n * becomes\n *\n * ```\n * { text: [ 'foo' ] },\n * ```\n *\n * @returns Normalized template definition.\n */\nfunction normalizePlainTextDefinition(def) {\n    return {\n        text: [def]\n    };\n}\n/**\n * Normalizes text {@link module:ui/template~TemplateDefinition}.\n *\n * ```\n * children: [\n * \t{ text: 'def' },\n * \t{ text: {@link module:ui/template~TemplateBinding} }\n * ]\n * ```\n *\n * becomes\n *\n * ```\n * children: [\n * \t{ text: [ 'def' ] },\n * \t{ text: [ {@link module:ui/template~TemplateBinding} ] }\n * ]\n * ```\n */\nfunction normalizeTextDefinition(def) {\n    def.text = toArray(def.text);\n}\n/**\n * Wraps an entry in Object in an Array, if not already one.\n *\n * ```\n * {\n * \tx: 'y',\n * \ta: [ 'b' ]\n * }\n * ```\n *\n * becomes\n *\n * ```\n * {\n * \tx: [ 'y' ],\n * \ta: [ 'b' ]\n * }\n * ```\n */\nfunction arrayify(obj, key) {\n    obj[key] = toArray(obj[key]);\n}\n/**\n * A helper which concatenates the value avoiding unwanted\n * leading white spaces.\n */\nfunction arrayValueReducer(prev, cur) {\n    if (isFalsy(cur)) {\n        return prev;\n    }\n    else if (isFalsy(prev)) {\n        return cur;\n    }\n    else {\n        return `${prev} ${cur}`;\n    }\n}\n/**\n * Extends one object defined in the following format:\n *\n * ```\n * {\n * \tkey1: [Array1],\n * \tkey2: [Array2],\n * \t...\n * \tkeyN: [ArrayN]\n * }\n * ```\n *\n * with another object of the same data format.\n *\n * @param obj Base object.\n * @param ext Object extending base.\n */\nfunction extendObjectValueArray(obj, ext) {\n    for (const a in ext) {\n        if (obj[a]) {\n            obj[a].push(...ext[a]);\n        }\n        else {\n            obj[a] = ext[a];\n        }\n    }\n}\n/**\n * A helper for {@link module:ui/template~Template#extend}. Recursively extends {@link module:ui/template~Template} instance\n * with content from {@link module:ui/template~TemplateDefinition}. See {@link module:ui/template~Template#extend} to learn more.\n *\n * @param def A template instance to be extended.\n * @param def A definition which is to extend the template instance.\n * @param Error context.\n */\nfunction extendTemplate(template, def) {\n    if (def.attributes) {\n        if (!template.attributes) {\n            template.attributes = {};\n        }\n        extendObjectValueArray(template.attributes, def.attributes);\n    }\n    if (def.eventListeners) {\n        if (!template.eventListeners) {\n            template.eventListeners = {};\n        }\n        extendObjectValueArray(template.eventListeners, def.eventListeners);\n    }\n    if (def.text) {\n        template.text.push(...def.text);\n    }\n    if (def.children && def.children.length) {\n        if (template.children.length != def.children.length) {\n            /**\n             * The number of children in extended definition does not match.\n             *\n             * @error ui-template-extend-children-mismatch\n             */\n            throw new CKEditorError('ui-template-extend-children-mismatch', template);\n        }\n        let childIndex = 0;\n        for (const childDef of def.children) {\n            extendTemplate(template.children[childIndex++], childDef);\n        }\n    }\n}\n/**\n * Checks if value is \"falsy\".\n * Note: 0 (Number) is not \"falsy\" in this context.\n *\n * @param value Value to be checked.\n */\nfunction isFalsy(value) {\n    return !value && value !== 0;\n}\n/**\n * Checks if the item is an instance of {@link module:ui/view~View}\n *\n * @param value Value to be checked.\n */\nfunction isView(item) {\n    return item instanceof View;\n}\n/**\n * Checks if the item is an instance of {@link module:ui/template~Template}\n *\n * @param value Value to be checked.\n */\nfunction isTemplate(item) {\n    return item instanceof Template;\n}\n/**\n * Checks if the item is an instance of {@link module:ui/viewcollection~ViewCollection}\n *\n * @param value Value to be checked.\n */\nfunction isViewCollection(item) {\n    return item instanceof ViewCollection;\n}\n/**\n * Checks if value array contains the one with namespace.\n */\nfunction isNamespaced(attrValue) {\n    return isObject(attrValue[0]) && attrValue[0].ns;\n}\n/**\n * Creates an empty skeleton for {@link module:ui/template~Template#revert}\n * data.\n */\nfunction getEmptyRevertData() {\n    return {\n        children: [],\n        bindings: [],\n        attributes: {}\n    };\n}\n/**\n * Checks whether an attribute should be extended when\n * {@link module:ui/template~Template#apply} is called.\n *\n * @param attrName Attribute name to check.\n */\nfunction shouldExtend(attrName) {\n    return attrName == 'class' || attrName == 'style';\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable @typescript-eslint/no-invalid-void-type */\n/**\n * @module ui/view\n */\nimport ViewCollection from './viewcollection';\nimport Template from './template';\nimport { CKEditorError, Collection, DomEmitterMixin, ObservableMixin, isIterable } from '@ckeditor/ckeditor5-utils';\nimport '../theme/globals/globals.css';\n/**\n * The basic view class, which represents an HTML element created out of a\n * {@link module:ui/view~View#template}. Views are building blocks of the user interface and handle\n * interaction\n *\n * Views {@link module:ui/view~View#registerChild aggregate} children in\n * {@link module:ui/view~View#createCollection collections} and manage the life cycle of DOM\n * listeners e.g. by handling rendering and destruction.\n *\n * See the {@link module:ui/template~TemplateDefinition} syntax to learn more about shaping view\n * elements, attributes and listeners.\n *\n * ```ts\n * class SampleView extends View {\n * \tconstructor( locale ) {\n * \t\tsuper( locale );\n *\n * \t\tconst bind = this.bindTemplate;\n *\n * \t\t// Views define their interface (state) using observable attributes.\n * \t\tthis.set( 'elementClass', 'bar' );\n *\n * \t\tthis.setTemplate( {\n * \t\t\ttag: 'p',\n *\n * \t\t\t// The element of the view can be defined with its children.\n * \t\t\tchildren: [\n * \t\t\t\t'Hello',\n * \t\t\t\t{\n * \t\t\t\t\ttag: 'b',\n * \t\t\t\t\tchildren: [ 'world!' ]\n * \t\t\t\t}\n * \t\t\t],\n * \t\t\tattributes: {\n * \t\t\t\tclass: [\n * \t\t\t\t\t'foo',\n *\n * \t\t\t\t\t// Observable attributes control the state of the view in DOM.\n * \t\t\t\t\tbind.to( 'elementClass' )\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\ton: {\n * \t\t\t\t// Views listen to DOM events and propagate them.\n * \t\t\t\tclick: bind.to( 'clicked' )\n * \t\t\t}\n * \t\t} );\n * \t}\n * }\n *\n * const view = new SampleView( locale );\n *\n * view.render();\n *\n * // Append <p class=\"foo bar\">Hello<b>world</b></p> to the <body>\n * document.body.appendChild( view.element );\n *\n * // Change the class attribute to <p class=\"foo baz\">Hello<b>world</b></p>\n * view.elementClass = 'baz';\n *\n * // Respond to the \"click\" event in DOM by executing a custom action.\n * view.on( 'clicked', () => {\n * \tconsole.log( 'The view has been clicked!' );\n * } );\n * ```\n */\nexport default class View extends DomEmitterMixin(ObservableMixin()) {\n    /**\n     * Creates an instance of the {@link module:ui/view~View} class.\n     *\n     * Also see {@link #render}.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale) {\n        super();\n        this.element = null;\n        this.isRendered = false;\n        this.locale = locale;\n        this.t = locale && locale.t;\n        this._viewCollections = new Collection();\n        this._unboundChildren = this.createCollection();\n        // Pass parent locale to its children.\n        this._viewCollections.on('add', (evt, collection) => {\n            collection.locale = locale;\n            collection.t = locale && locale.t;\n        });\n        this.decorate('render');\n    }\n    /**\n     * Shorthand for {@link module:ui/template~Template.bind}, a binding\n     * {@link module:ui/template~BindChain interface} pre–configured for the view instance.\n     *\n     * It provides {@link module:ui/template~BindChain#to `to()`} and\n     * {@link module:ui/template~BindChain#if `if()`} methods that initialize bindings with\n     * observable attributes and attach DOM listeners.\n     *\n     * ```ts\n     * class SampleView extends View {\n     * \tconstructor( locale ) {\n     * \t\tsuper( locale );\n     *\n     * \t\tconst bind = this.bindTemplate;\n     *\n     * \t\t// These {@link module:utils/observablemixin~Observable observable} attributes will control\n     * \t\t// the state of the view in DOM.\n     * \t\tthis.set( {\n     * \t\t\telementClass: 'foo',\n     * \t\t \tisEnabled: true\n     * \t\t } );\n     *\n     * \t\tthis.setTemplate( {\n     * \t\t\ttag: 'p',\n     *\n     * \t\t\tattributes: {\n     * \t\t\t\t// The class HTML attribute will follow elementClass\n     * \t\t\t\t// and isEnabled view attributes.\n     * \t\t\t\tclass: [\n     * \t\t\t\t\tbind.to( 'elementClass' )\n     * \t\t\t\t\tbind.if( 'isEnabled', 'present-when-enabled' )\n     * \t\t\t\t]\n     * \t\t\t},\n     *\n     * \t\t\ton: {\n     * \t\t\t\t// The view will fire the \"clicked\" event upon clicking <p> in DOM.\n     * \t\t\t\tclick: bind.to( 'clicked' )\n     * \t\t\t}\n     * \t\t} );\n     * \t}\n     * }\n     * ```\n     */\n    get bindTemplate() {\n        if (this._bindTemplate) {\n            return this._bindTemplate;\n        }\n        return (this._bindTemplate = Template.bind(this, this));\n    }\n    /**\n     * Creates a new collection of views, which can be used as\n     * {@link module:ui/template~Template#children} of this view.\n     *\n     * ```ts\n     * class SampleView extends View {\n     * \tconstructor( locale ) {\n     * \t\tsuper( locale );\n     *\n     * \t\tconst child = new ChildView( locale );\n     * \t\tthis.items = this.createCollection( [ child ] );\n     *\n     * \t\tthis.setTemplate( {\n     * \t\t\ttag: 'p',\n     *\n     * \t\t\t// `items` collection will render here.\n     * \t\t\tchildren: this.items\n     * \t\t} );\n     * \t}\n     * }\n     *\n     * const view = new SampleView( locale );\n     * view.render();\n     *\n     * // It will append <p><child#element></p> to the <body>.\n     * document.body.appendChild( view.element );\n     * ```\n     *\n     * @param views Initial views of the collection.\n     * @returns A new collection of view instances.\n     */\n    createCollection(views) {\n        const collection = new ViewCollection(views);\n        this._viewCollections.add(collection);\n        return collection;\n    }\n    /**\n     * Registers a new child view under the view instance. Once registered, a child\n     * view is managed by its parent, including {@link #render rendering}\n     * and {@link #destroy destruction}.\n     *\n     * To revert this, use {@link #deregisterChild}.\n     *\n     * ```ts\n     * class SampleView extends View {\n     * \tconstructor( locale ) {\n     * \t\tsuper( locale );\n     *\n     * \t\tthis.childA = new SomeChildView( locale );\n     * \t\tthis.childB = new SomeChildView( locale );\n     *\n     * \t\tthis.setTemplate( { tag: 'p' } );\n     *\n     * \t\t// Register the children.\n     * \t\tthis.registerChild( [ this.childA, this.childB ] );\n     * \t}\n     *\n     * \trender() {\n     * \t\tsuper.render();\n     *\n     * \t\tthis.element.appendChild( this.childA.element );\n     * \t\tthis.element.appendChild( this.childB.element );\n     * \t}\n     * }\n     *\n     * const view = new SampleView( locale );\n     *\n     * view.render();\n     *\n     * // Will append <p><childA#element><b></b><childB#element></p>.\n     * document.body.appendChild( view.element );\n     * ```\n     *\n     * **Note**: There's no need to add child views if they're already referenced in the\n     * {@link #template}:\n     *\n     * ```ts\n     * class SampleView extends View {\n     * \tconstructor( locale ) {\n     * \t\tsuper( locale );\n     *\n     * \t\tthis.childA = new SomeChildView( locale );\n     * \t\tthis.childB = new SomeChildView( locale );\n     *\n     * \t\tthis.setTemplate( {\n     * \t\t\ttag: 'p',\n     *\n     * \t\t\t// These children will be added automatically. There's no\n     * \t\t\t// need to call {@link #registerChild} for any of them.\n     * \t\t\tchildren: [ this.childA, this.childB ]\n     * \t\t} );\n     * \t}\n     *\n     * \t// ...\n     * }\n     * ```\n     *\n     * @param children Children views to be registered.\n     */\n    registerChild(children) {\n        if (!isIterable(children)) {\n            children = [children];\n        }\n        for (const child of children) {\n            this._unboundChildren.add(child);\n        }\n    }\n    /**\n     * The opposite of {@link #registerChild}. Removes a child view from this view instance.\n     * Once removed, the child is no longer managed by its parent, e.g. it can safely\n     * become a child of another parent view.\n     *\n     * @see #registerChild\n     * @param children Child views to be removed.\n     */\n    deregisterChild(children) {\n        if (!isIterable(children)) {\n            children = [children];\n        }\n        for (const child of children) {\n            this._unboundChildren.remove(child);\n        }\n    }\n    /**\n     * Sets the {@link #template} of the view with with given definition.\n     *\n     * A shorthand for:\n     *\n     * ```ts\n     * view.setTemplate( definition );\n     * ```\n     *\n     * @param definition Definition of view's template.\n     */\n    setTemplate(definition) {\n        this.template = new Template(definition);\n    }\n    /**\n     * {@link module:ui/template~Template.extend Extends} the {@link #template} of the view with\n     * with given definition.\n     *\n     * A shorthand for:\n     *\n     * ```ts\n     * Template.extend( view.template, definition );\n     * ```\n     *\n     * **Note**: Is requires the {@link #template} to be already set. See {@link #setTemplate}.\n     *\n     * @param definition Definition which extends the {@link #template}.\n     */\n    extendTemplate(definition) {\n        Template.extend(this.template, definition);\n    }\n    /**\n     * Recursively renders the view.\n     *\n     * Once the view is rendered:\n     * * the {@link #element} becomes an HTML element out of {@link #template},\n     * * the {@link #isRendered} flag is set `true`.\n     *\n     * **Note**: The children of the view:\n     * * defined directly in the {@link #template}\n     * * residing in collections created by the {@link #createCollection} method,\n     * * and added by {@link #registerChild}\n     * are also rendered in the process.\n     *\n     * In general, `render()` method is the right place to keep the code which refers to the\n     * {@link #element} and should be executed at the very beginning of the view's life cycle.\n     *\n     * It is possible to {@link module:ui/template~Template.extend} the {@link #template} before\n     * the view is rendered. To allow an early customization of the view (e.g. by its parent),\n     * such references should be done in `render()`.\n     *\n     * ```ts\n     * class SampleView extends View {\n     * \tconstructor() {\n     * \t\tthis.setTemplate( {\n     * \t\t\t// ...\n     * \t\t} );\n     * \t},\n     *\n     * \trender() {\n     * \t\t// View#element becomes available.\n     * \t\tsuper.render();\n     *\n     * \t\t// The \"scroll\" listener depends on #element.\n     * \t\tthis.listenTo( window, 'scroll', () => {\n     * \t\t\t// A reference to #element would render the #template and make it non-extendable.\n     * \t\t\tif ( window.scrollY > 0 ) {\n     * \t\t\t\tthis.element.scrollLeft = 100;\n     * \t\t\t} else {\n     * \t\t\t\tthis.element.scrollLeft = 0;\n     * \t\t\t}\n     * \t\t} );\n     * \t}\n     * }\n     *\n     * const view = new SampleView();\n     *\n     * // Let's customize the view before it gets rendered.\n     * view.extendTemplate( {\n     * \tattributes: {\n     * \t\tclass: [\n     * \t\t\t'additional-class'\n     * \t\t]\n     * \t}\n     * } );\n     *\n     * // Late rendering allows customization of the view.\n     * view.render();\n     * ```\n     */\n    render() {\n        if (this.isRendered) {\n            /**\n             * This View has already been rendered.\n             *\n             * @error ui-view-render-already-rendered\n             */\n            throw new CKEditorError('ui-view-render-already-rendered', this);\n        }\n        // Render #element of the view.\n        if (this.template) {\n            this.element = this.template.render();\n            // Auto–register view children from #template.\n            this.registerChild(this.template.getViews());\n        }\n        this.isRendered = true;\n    }\n    /**\n     * Recursively destroys the view instance and child views added by {@link #registerChild} and\n     * residing in collections created by the {@link #createCollection}.\n     *\n     * Destruction disables all event listeners:\n     * * created on the view, e.g. `view.on( 'event', () => {} )`,\n     * * defined in the {@link #template} for DOM events.\n     */\n    destroy() {\n        this.stopListening();\n        this._viewCollections.map(c => c.destroy());\n        // Template isn't obligatory for views.\n        if (this.template && this.template._revertData) {\n            this.template.revert(this.element);\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* global DOMParser */\n/**\n * @module ui/icon/iconview\n */\nimport View from '../view';\nimport '../../theme/components/icon/icon.css';\n/**\n * The icon view class.\n */\nexport default class IconView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor() {\n        super();\n        const bind = this.bindTemplate;\n        this.set('content', '');\n        this.set('viewBox', '0 0 20 20');\n        this.set('fillColor', '');\n        this.set('isColorInherited', true);\n        this.set('isVisible', true);\n        this.setTemplate({\n            tag: 'svg',\n            ns: 'http://www.w3.org/2000/svg',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-icon',\n                    bind.if('isVisible', 'ck-hidden', value => !value),\n                    // Exclude icon internals from the CSS reset to allow rich (non-monochromatic) icons\n                    // (https://github.com/ckeditor/ckeditor5/issues/12599).\n                    'ck-reset_all-excluded',\n                    // The class to remove the dynamic color inheritance is toggleable\n                    // (https://github.com/ckeditor/ckeditor5/issues/12599).\n                    bind.if('isColorInherited', 'ck-icon_inherit-color')\n                ],\n                viewBox: bind.to('viewBox')\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this._updateXMLContent();\n        this._colorFillPaths();\n        // This is a hack for lack of innerHTML binding.\n        // See: https://github.com/ckeditor/ckeditor5-ui/issues/99.\n        this.on('change:content', () => {\n            this._updateXMLContent();\n            this._colorFillPaths();\n        });\n        this.on('change:fillColor', () => {\n            this._colorFillPaths();\n        });\n    }\n    /**\n     * Updates the {@link #element} with the value of {@link #content}.\n     */\n    _updateXMLContent() {\n        if (this.content) {\n            const parsed = new DOMParser().parseFromString(this.content.trim(), 'image/svg+xml');\n            const svg = parsed.querySelector('svg');\n            const viewBox = svg.getAttribute('viewBox');\n            if (viewBox) {\n                this.viewBox = viewBox;\n            }\n            // Preserve presentational attributes of the <svg> element from the source.\n            // They can affect rendering of the entire icon (https://github.com/ckeditor/ckeditor5/issues/12597).\n            for (const { name, value } of Array.from(svg.attributes)) {\n                if (IconView.presentationalAttributeNames.includes(name)) {\n                    this.element.setAttribute(name, value);\n                }\n            }\n            while (this.element.firstChild) {\n                this.element.removeChild(this.element.firstChild);\n            }\n            while (svg.childNodes.length > 0) {\n                this.element.appendChild(svg.childNodes[0]);\n            }\n        }\n    }\n    /**\n     * Fills all child `path.ck-icon__fill` with the `#fillColor`.\n     */\n    _colorFillPaths() {\n        if (this.fillColor) {\n            this.element.querySelectorAll('.ck-icon__fill').forEach(path => {\n                path.style.fill = this.fillColor;\n            });\n        }\n    }\n}\n/**\n * A list of presentational attributes that can be set on the `<svg>` element and should be preserved\n * when the icon {@link module:ui/icon/iconview~IconView#content content} is loaded.\n *\n * See the [specification](https://www.w3.org/TR/SVG/styling.html#TermPresentationAttribute) to learn more.\n */\nIconView.presentationalAttributeNames = [\n    'alignment-baseline', 'baseline-shift', 'clip-path', 'clip-rule', 'color', 'color-interpolation',\n    'color-interpolation-filters', 'color-rendering', 'cursor', 'direction', 'display', 'dominant-baseline', 'fill', 'fill-opacity',\n    'fill-rule', 'filter', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style',\n    'font-variant', 'font-weight', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start',\n    'mask', 'opacity', 'overflow', 'paint-order', 'pointer-events', 'shape-rendering', 'stop-color', 'stop-opacity', 'stroke',\n    'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width',\n    'text-anchor', 'text-decoration', 'text-overflow', 'text-rendering', 'transform', 'unicode-bidi', 'vector-effect',\n    'visibility', 'white-space', 'word-spacing', 'writing-mode'\n];\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/button/buttonlabelview\n */\nimport View from '../view';\n/**\n * A default implementation of the button view's label. It comes with a dynamic text support\n * via {@link module:ui/button/buttonlabelview~ButtonLabelView#text} property.\n */\nexport default class ButtonLabelView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor() {\n        super();\n        this.set({\n            style: undefined,\n            text: undefined,\n            id: undefined\n        });\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-button__label'\n                ],\n                style: bind.to('style'),\n                id: bind.to('id')\n            },\n            children: [\n                {\n                    text: bind.to('text')\n                }\n            ]\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/button/buttonview\n */\nimport View from '../view';\nimport IconView from '../icon/iconview';\nimport ButtonLabelView from './buttonlabelview';\nimport { env, getEnvKeystrokeText, uid, delay } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/button/button.css';\n/**\n * The button view class.\n *\n * ```ts\n * const view = new ButtonView();\n *\n * view.set( {\n * \tlabel: 'A button',\n * \tkeystroke: 'Ctrl+B',\n * \ttooltip: true,\n * \twithText: true\n * } );\n *\n * view.render();\n *\n * document.body.append( view.element );\n * ```\n */\nexport default class ButtonView extends View {\n    /**\n     * Creates an instance of the button view class.\n     *\n     * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n     * @param labelView The instance of the button's label. If not provided, an instance of\n     * {@link module:ui/button/buttonlabelview~ButtonLabelView} is used.\n     */\n    constructor(locale, labelView = new ButtonLabelView()) {\n        super(locale);\n        /**\n         * Delayed focus function for focus handling in Safari.\n         */\n        this._focusDelayed = null;\n        const bind = this.bindTemplate;\n        const ariaLabelUid = uid();\n        // Implement the Button interface.\n        this.set('ariaLabel', undefined);\n        this.set('ariaLabelledBy', `ck-editor__aria-label_${ariaLabelUid}`);\n        this.set('class', undefined);\n        this.set('labelStyle', undefined);\n        this.set('icon', undefined);\n        this.set('isEnabled', true);\n        this.set('isOn', false);\n        this.set('isVisible', true);\n        this.set('isToggleable', false);\n        this.set('keystroke', undefined);\n        this.set('label', undefined);\n        this.set('role', undefined);\n        this.set('tabindex', -1);\n        this.set('tooltip', false);\n        this.set('tooltipPosition', 's');\n        this.set('type', 'button');\n        this.set('withText', false);\n        this.set('withKeystroke', false);\n        this.children = this.createCollection();\n        this.labelView = this._setupLabelView(labelView);\n        this.iconView = new IconView();\n        this.iconView.extendTemplate({\n            attributes: {\n                class: 'ck-button__icon'\n            }\n        });\n        this.keystrokeView = this._createKeystrokeView();\n        this.bind('_tooltipString').to(this, 'tooltip', this, 'label', this, 'keystroke', this._getTooltipString.bind(this));\n        const template = {\n            tag: 'button',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-button',\n                    bind.to('class'),\n                    bind.if('isEnabled', 'ck-disabled', value => !value),\n                    bind.if('isVisible', 'ck-hidden', value => !value),\n                    bind.to('isOn', value => value ? 'ck-on' : 'ck-off'),\n                    bind.if('withText', 'ck-button_with-text'),\n                    bind.if('withKeystroke', 'ck-button_with-keystroke')\n                ],\n                role: bind.to('role'),\n                type: bind.to('type', value => value ? value : 'button'),\n                tabindex: bind.to('tabindex'),\n                'aria-label': bind.to('ariaLabel'),\n                'aria-labelledby': bind.to('ariaLabelledBy'),\n                'aria-disabled': bind.if('isEnabled', true, value => !value),\n                'aria-pressed': bind.to('isOn', value => this.isToggleable ? String(!!value) : false),\n                'data-cke-tooltip-text': bind.to('_tooltipString'),\n                'data-cke-tooltip-position': bind.to('tooltipPosition')\n            },\n            children: this.children,\n            on: {\n                click: bind.to(evt => {\n                    // We can't make the button disabled using the disabled attribute, because it won't be focusable.\n                    // Though, shouldn't this condition be moved to the button controller?\n                    if (this.isEnabled) {\n                        this.fire('execute');\n                    }\n                    else {\n                        // Prevent the default when button is disabled, to block e.g.\n                        // automatic form submitting. See ckeditor/ckeditor5-link#74.\n                        evt.preventDefault();\n                    }\n                })\n            }\n        };\n        // On Safari we have to force the focus on a button on click as it's the only browser\n        // that doesn't do that automatically. See #12115.\n        if (env.isSafari) {\n            if (!this._focusDelayed) {\n                this._focusDelayed = delay(() => this.focus(), 0);\n            }\n            template.on.mousedown = bind.to(() => {\n                this._focusDelayed();\n            });\n            template.on.mouseup = bind.to(() => {\n                this._focusDelayed.cancel();\n            });\n        }\n        this.setTemplate(template);\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        if (this.icon) {\n            this.iconView.bind('content').to(this, 'icon');\n            this.children.add(this.iconView);\n        }\n        this.children.add(this.labelView);\n        if (this.withKeystroke && this.keystroke) {\n            this.children.add(this.keystrokeView);\n        }\n    }\n    /**\n     * Focuses the {@link #element} of the button.\n     */\n    focus() {\n        this.element.focus();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        if (this._focusDelayed) {\n            this._focusDelayed.cancel();\n        }\n        super.destroy();\n    }\n    /**\n     * Binds the label view instance it with button attributes.\n     */\n    _setupLabelView(labelView) {\n        labelView.bind('text', 'style', 'id').to(this, 'label', 'labelStyle', 'ariaLabelledBy');\n        return labelView;\n    }\n    /**\n     * Creates a view that displays a keystroke next to a {@link #labelView label }\n     * and binds it with button attributes.\n     */\n    _createKeystrokeView() {\n        const keystrokeView = new View();\n        keystrokeView.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-button__keystroke'\n                ]\n            },\n            children: [\n                {\n                    text: this.bindTemplate.to('keystroke', text => getEnvKeystrokeText(text))\n                }\n            ]\n        });\n        return keystrokeView;\n    }\n    /**\n     * Gets the text for the tooltip from the combination of\n     * {@link #tooltip}, {@link #label} and {@link #keystroke} attributes.\n     *\n     * @see #tooltip\n     * @see #_tooltipString\n     * @param tooltip Button tooltip.\n     * @param label Button label.\n     * @param keystroke Button keystroke.\n     */\n    _getTooltipString(tooltip, label, keystroke) {\n        if (tooltip) {\n            if (typeof tooltip == 'string') {\n                return tooltip;\n            }\n            else {\n                if (keystroke) {\n                    keystroke = getEnvKeystrokeText(keystroke);\n                }\n                if (tooltip instanceof Function) {\n                    return tooltip(label, keystroke);\n                }\n                else {\n                    return `${label}${keystroke ? ` (${keystroke})` : ''}`;\n                }\n            }\n        }\n        return '';\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/button/switchbuttonview\n */\nimport View from '../view';\nimport ButtonView from './buttonview';\nimport '../../theme/components/button/switchbutton.css';\n/**\n * The switch button view class.\n *\n * ```ts\n * const view = new SwitchButtonView();\n *\n * view.set( {\n * \twithText: true,\n * \tlabel: 'Switch me!'\n * } );\n *\n * view.render();\n *\n * document.body.append( view.element );\n * ```\n */\nexport default class SwitchButtonView extends ButtonView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.isToggleable = true;\n        this.toggleSwitchView = this._createToggleView();\n        this.extendTemplate({\n            attributes: {\n                class: 'ck-switchbutton'\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.children.add(this.toggleSwitchView);\n    }\n    /**\n     * Creates a toggle child view.\n     */\n    _createToggleView() {\n        const toggleSwitchView = new View();\n        toggleSwitchView.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-button__toggle'\n                ]\n            },\n            children: [\n                {\n                    tag: 'span',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-button__toggle__inner'\n                        ]\n                    }\n                }\n            ]\n        });\n        return toggleSwitchView;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/colorgrid/colortileview\n */\nimport ButtonView from '../button/buttonview';\nimport checkIcon from '../../theme/icons/color-tile-check.svg';\n/**\n * This class represents a single color tile in the {@link module:ui/colorgrid/colorgridview~ColorGridView}.\n */\nexport default class ColorTileView extends ButtonView {\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('color', undefined);\n        this.set('hasBorder', false);\n        this.icon = checkIcon;\n        this.extendTemplate({\n            attributes: {\n                style: {\n                    backgroundColor: bind.to('color')\n                },\n                class: [\n                    'ck',\n                    'ck-color-grid__tile',\n                    bind.if('hasBorder', 'ck-color-selector__color-tile_bordered')\n                ]\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.iconView.fillColor = 'hsl(0, 0%, 100%)';\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/colorgrid/colorgridview\n */\nimport View from '../view';\nimport ColorTileView from './colortileview';\nimport addKeyboardHandlingForGrid from '../bindings/addkeyboardhandlingforgrid';\nimport { FocusTracker, KeystrokeHandler } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/colorgrid/colorgrid.css';\n/**\n * A grid of {@link module:ui/colorgrid/colortileview~ColorTileView color tiles}.\n */\nexport default class ColorGridView extends View {\n    /**\n     * Creates an instance of a color grid containing {@link module:ui/colorgrid/colortileview~ColorTileView tiles}.\n     *\n     * @fires execute\n     * @param locale The localization services instance.\n     * @param options Component configuration\n     * @param options.colorDefinitions Array with definitions\n     * required to create the {@link module:ui/colorgrid/colortileview~ColorTileView tiles}.\n     * @param options.columns A number of columns to display the tiles.\n     */\n    constructor(locale, options) {\n        super(locale);\n        const colorDefinitions = options && options.colorDefinitions ? options.colorDefinitions : [];\n        this.columns = options && options.columns ? options.columns : 5;\n        const viewStyleAttribute = {\n            gridTemplateColumns: `repeat( ${this.columns}, 1fr)`\n        };\n        this.set('selectedColor', undefined);\n        this.items = this.createCollection();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.items.on('add', (evt, colorTile) => {\n            colorTile.isOn = colorTile.color === this.selectedColor;\n        });\n        colorDefinitions.forEach(color => {\n            const colorTile = new ColorTileView();\n            colorTile.set({\n                color: color.color,\n                label: color.label,\n                tooltip: true,\n                hasBorder: color.options.hasBorder\n            });\n            colorTile.on('execute', () => {\n                this.fire('execute', {\n                    value: color.color,\n                    hasBorder: color.options.hasBorder,\n                    label: color.label\n                });\n            });\n            this.items.add(colorTile);\n        });\n        this.setTemplate({\n            tag: 'div',\n            children: this.items,\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-color-grid'\n                ],\n                style: viewStyleAttribute\n            }\n        });\n        this.on('change:selectedColor', (evt, name, selectedColor) => {\n            for (const item of this.items) {\n                item.isOn = item.color === selectedColor;\n            }\n        });\n    }\n    /**\n     * Focuses the first focusable in {@link #items}.\n     */\n    focus() {\n        if (this.items.length) {\n            this.items.first.focus();\n        }\n    }\n    /**\n     * Focuses the last focusable in {@link #items}.\n     */\n    focusLast() {\n        if (this.items.length) {\n            this.items.last.focus();\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Items added before rendering should be known to the #focusTracker.\n        for (const item of this.items) {\n            this.focusTracker.add(item.element);\n        }\n        this.items.on('add', (evt, item) => {\n            this.focusTracker.add(item.element);\n        });\n        this.items.on('remove', (evt, item) => {\n            this.focusTracker.remove(item.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n        addKeyboardHandlingForGrid({\n            keystrokeHandler: this.keystrokes,\n            focusTracker: this.focusTracker,\n            gridItems: this.items,\n            numberOfColumns: this.columns,\n            uiLanguageDirection: this.locale && this.locale.uiLanguageDirection\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n}\n", "/**\n * @module color-parse\n */\nimport names from 'color-name'\n\nexport default parse\n\n/**\n * Base hues\n * http://dev.w3.org/csswg/css-color/#typedef-named-hue\n */\n//FIXME: use external hue detector\nvar baseHues = {\n\tred: 0,\n\torange: 60,\n\tyellow: 120,\n\tgreen: 180,\n\tblue: 240,\n\tpurple: 300\n}\n\n/**\n * Parse color from the string passed\n *\n * @return {Object} A space indicator `space`, an array `values` and `alpha`\n */\nfunction parse (cstr) {\n\tvar m, parts = [], alpha = 1, space\n\n\tif (typeof cstr === 'string') {\n\t\t//keyword\n\t\tif (names[cstr]) {\n\t\t\tparts = names[cstr].slice()\n\t\t\tspace = 'rgb'\n\t\t}\n\n\t\t//reserved words\n\t\telse if (cstr === 'transparent') {\n\t\t\talpha = 0\n\t\t\tspace = 'rgb'\n\t\t\tparts = [0,0,0]\n\t\t}\n\n\t\t//hex\n\t\telse if (/^#[A-Fa-f0-9]+$/.test(cstr)) {\n\t\t\tvar base = cstr.slice(1)\n\t\t\tvar size = base.length\n\t\t\tvar isShort = size <= 4\n\t\t\talpha = 1\n\n\t\t\tif (isShort) {\n\t\t\t\tparts = [\n\t\t\t\t\tparseInt(base[0] + base[0], 16),\n\t\t\t\t\tparseInt(base[1] + base[1], 16),\n\t\t\t\t\tparseInt(base[2] + base[2], 16)\n\t\t\t\t]\n\t\t\t\tif (size === 4) {\n\t\t\t\t\talpha = parseInt(base[3] + base[3], 16) / 255\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tparts = [\n\t\t\t\t\tparseInt(base[0] + base[1], 16),\n\t\t\t\t\tparseInt(base[2] + base[3], 16),\n\t\t\t\t\tparseInt(base[4] + base[5], 16)\n\t\t\t\t]\n\t\t\t\tif (size === 8) {\n\t\t\t\t\talpha = parseInt(base[6] + base[7], 16) / 255\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!parts[0]) parts[0] = 0\n\t\t\tif (!parts[1]) parts[1] = 0\n\t\t\tif (!parts[2]) parts[2] = 0\n\n\t\t\tspace = 'rgb'\n\t\t}\n\n\t\t//color space\n\t\telse if (m = /^((?:rgb|hs[lvb]|hwb|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms)a?)\\s*\\(([^\\)]*)\\)/.exec(cstr)) {\n\t\t\tvar name = m[1]\n\t\t\tvar isRGB = name === 'rgb'\n\t\t\tvar base = name.replace(/a$/, '')\n\t\t\tspace = base\n\t\t\tvar size = base === 'cmyk' ? 4 : base === 'gray' ? 1 : 3\n\t\t\tparts = m[2].trim()\n\t\t\t\t.split(/\\s*[,\\/]\\s*|\\s+/)\n\t\t\t\t.map(function (x, i) {\n\t\t\t\t\t//<percentage>\n\t\t\t\t\tif (/%$/.test(x)) {\n\t\t\t\t\t\t//alpha\n\t\t\t\t\t\tif (i === size)\treturn parseFloat(x) / 100\n\t\t\t\t\t\t//rgb\n\t\t\t\t\t\tif (base === 'rgb') return parseFloat(x) * 255 / 100\n\t\t\t\t\t\treturn parseFloat(x)\n\t\t\t\t\t}\n\t\t\t\t\t//hue\n\t\t\t\t\telse if (base[i] === 'h') {\n\t\t\t\t\t\t//<deg>\n\t\t\t\t\t\tif (/deg$/.test(x)) {\n\t\t\t\t\t\t\treturn parseFloat(x)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//<base-hue>\n\t\t\t\t\t\telse if (baseHues[x] !== undefined) {\n\t\t\t\t\t\t\treturn baseHues[x]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn parseFloat(x)\n\t\t\t\t})\n\n\t\t\tif (name === base) parts.push(1)\n\t\t\talpha = (isRGB) ? 1 : (parts[size] === undefined) ? 1 : parts[size]\n\t\t\tparts = parts.slice(0, size)\n\t\t}\n\n\t\t//named channels case\n\t\telse if (cstr.length > 10 && /[0-9](?:\\s|\\/)/.test(cstr)) {\n\t\t\tparts = cstr.match(/([0-9]+)/g).map(function (value) {\n\t\t\t\treturn parseFloat(value)\n\t\t\t})\n\n\t\t\tspace = cstr.match(/([a-z])/ig).join('').toLowerCase()\n\t\t}\n\t}\n\n\t//numeric case\n\telse if (!isNaN(cstr)) {\n\t\tspace = 'rgb'\n\t\tparts = [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff]\n\t}\n\n\t//array-like\n\telse if (Array.isArray(cstr) || cstr.length) {\n\t\tparts = [cstr[0], cstr[1], cstr[2]]\n\t\tspace = 'rgb'\n\t\talpha = cstr.length === 4 ? cstr[3] : 1\n\t}\n\n\t//object case - detects css cases of rgb and hsl\n\telse if (cstr instanceof Object) {\n\t\tif (cstr.r != null || cstr.red != null || cstr.R != null) {\n\t\t\tspace = 'rgb'\n\t\t\tparts = [\n\t\t\t\tcstr.r || cstr.red || cstr.R || 0,\n\t\t\t\tcstr.g || cstr.green || cstr.G || 0,\n\t\t\t\tcstr.b || cstr.blue || cstr.B || 0\n\t\t\t]\n\t\t}\n\t\telse {\n\t\t\tspace = 'hsl'\n\t\t\tparts = [\n\t\t\t\tcstr.h || cstr.hue || cstr.H || 0,\n\t\t\t\tcstr.s || cstr.saturation || cstr.S || 0,\n\t\t\t\tcstr.l || cstr.lightness || cstr.L || cstr.b || cstr.brightness\n\t\t\t]\n\t\t}\n\n\t\talpha = cstr.a || cstr.alpha || cstr.opacity || 1\n\n\t\tif (cstr.opacity != null) alpha /= 100\n\t}\n\n\treturn {\n\t\tspace: space,\n\t\tvalues: parts,\n\t\talpha: alpha\n\t}\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/colorpicker/utils\n */\n/* eslint-disable @typescript-eslint/ban-ts-comment */\n// There are no available types for 'color-parse' module.\n// @ts-ignore\nimport { default as parse } from 'color-parse';\nimport * as convert from 'color-convert';\n/**\n * Parses and converts the color string to requested format. Handles variety of color spaces\n * like `hsl`, `hex` or `rgb`.\n *\n * @param color\n * @returns A color string.\n */\nexport function convertColor(color, outputFormat) {\n    if (!color) {\n        return '';\n    }\n    const colorObject = parseColorString(color);\n    if (!colorObject) {\n        return '';\n    }\n    if (colorObject.space === outputFormat) {\n        return color;\n    }\n    if (!canConvertParsedColor(colorObject)) {\n        return '';\n    }\n    const fromColorSpace = convert[colorObject.space];\n    const toColorSpace = fromColorSpace[outputFormat];\n    if (!toColorSpace) {\n        return '';\n    }\n    const convertedColorChannels = toColorSpace(colorObject.space === 'hex' ? colorObject.hexValue : colorObject.values);\n    return formatColorOutput(convertedColorChannels, outputFormat);\n}\n/**\n * Converts a color string to hex format.\n *\n * @param color\n * @returns A color string.\n */\nexport function convertToHex(color) {\n    if (!color) {\n        return '';\n    }\n    const colorObject = parseColorString(color);\n    if (!colorObject) {\n        return '#000';\n    }\n    if (colorObject.space === 'hex') {\n        return colorObject.hexValue;\n    }\n    return convertColor(color, 'hex');\n}\n/**\n * Formats the passed color channels according to the requested format.\n *\n * @param values\n * @param format\n * @returns A color string.\n */\nfunction formatColorOutput(values, format) {\n    switch (format) {\n        case 'hex': return `#${values}`;\n        case 'rgb': return `rgb( ${values[0]}, ${values[1]}, ${values[2]} )`;\n        case 'hsl': return `hsl( ${values[0]}, ${values[1]}%, ${values[2]}% )`;\n        case 'hwb': return `hwb( ${values[0]}, ${values[1]}, ${values[2]} )`;\n        case 'lab': return `lab( ${values[0]}% ${values[1]} ${values[2]} )`;\n        case 'lch': return `lch( ${values[0]}% ${values[1]} ${values[2]} )`;\n        default: return '';\n    }\n}\nfunction parseColorString(colorString) {\n    // Parser library treats `hex` format as belonging to `rgb` space | which messes up further conversion.\n    // Let's parse such strings on our own.\n    if (colorString.startsWith('#')) {\n        const parsedHex = parse(colorString);\n        return {\n            space: 'hex',\n            values: parsedHex.values,\n            hexValue: colorString,\n            alpha: parsedHex.alpha\n        };\n    }\n    const parsed = parse(colorString);\n    if (!parsed.space) {\n        return null;\n    }\n    return parsed;\n}\nfunction canConvertParsedColor(parsedColor) {\n    return Object.keys(convert).includes(parsedColor.space);\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/label/labelview\n */\nimport View from '../view';\nimport { uid } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/label/label.css';\n/**\n * The label view class.\n */\nexport default class LabelView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.set('text', undefined);\n        this.set('for', undefined);\n        this.id = `ck-editor__label_${uid()}`;\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'label',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-label'\n                ],\n                id: this.id,\n                for: bind.to('for')\n            },\n            children: [\n                {\n                    text: bind.to('text')\n                }\n            ]\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/labeledfield/labeledfieldview\n */\nimport View from '../view';\nimport LabelView from '../label/labelview';\nimport { uid } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/labeledfield/labeledfieldview.css';\n/**\n * The labeled field view class. It can be used to enhance any view with the following features:\n *\n * * a label,\n * * (optional) an error message,\n * * (optional) an info (status) text,\n *\n * all bound logically by proper DOM attributes for UX and accessibility.  It also provides an interface\n * (e.g. observable properties) that allows controlling those additional features.\n *\n * The constructor of this class requires a callback that returns a view to be labeled. The callback\n * is called with unique ids that allow binding of DOM properties:\n *\n * ```ts\n * const labeledInputView = new LabeledFieldView( locale, ( labeledFieldView, viewUid, statusUid ) => {\n * \tconst inputView = new InputTextView( labeledFieldView.locale );\n *\n * \tinputView.set( {\n * \t\tid: viewUid,\n * \t\tariaDescribedById: statusUid\n * \t} );\n *\n * \tinputView.bind( 'isReadOnly' ).to( labeledFieldView, 'isEnabled', value => !value );\n * \tinputView.bind( 'hasError' ).to( labeledFieldView, 'errorText', value => !!value );\n *\n * \treturn inputView;\n * } );\n *\n * labeledInputView.label = 'User name';\n * labeledInputView.infoText = 'Full name like for instance, John Doe.';\n * labeledInputView.render();\n *\n * document.body.append( labeledInputView.element );\n * ```\n *\n * See {@link module:ui/labeledfield/utils} to discover ready–to–use labeled input helpers for common\n * UI components.\n */\nexport default class LabeledFieldView extends View {\n    /**\n     * Creates an instance of the labeled field view class using a provided creator function\n     * that provides the view to be labeled.\n     *\n     * @param locale The locale instance.\n     * @param viewCreator A function that returns a {@link module:ui/view~View}\n     * that will be labeled. The following arguments are passed to the creator function:\n     *\n     * * an instance of the `LabeledFieldView` to allow binding observable properties,\n     * * an UID string that connects the {@link #labelView label} and the labeled field view in DOM,\n     * * an UID string that connects the {@link #statusView status} and the labeled field view in DOM.\n     */\n    constructor(locale, viewCreator) {\n        super(locale);\n        const viewUid = `ck-labeled-field-view-${uid()}`;\n        const statusUid = `ck-labeled-field-view-status-${uid()}`;\n        this.fieldView = viewCreator(this, viewUid, statusUid);\n        this.set('label', undefined);\n        this.set('isEnabled', true);\n        this.set('isEmpty', true);\n        this.set('isFocused', false);\n        this.set('errorText', null);\n        this.set('infoText', null);\n        this.set('class', undefined);\n        this.set('placeholder', undefined);\n        this.labelView = this._createLabelView(viewUid);\n        this.statusView = this._createStatusView(statusUid);\n        this.fieldWrapperChildren = this.createCollection([this.fieldView, this.labelView]);\n        this.bind('_statusText').to(this, 'errorText', this, 'infoText', (errorText, infoText) => errorText || infoText);\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-labeled-field-view',\n                    bind.to('class'),\n                    bind.if('isEnabled', 'ck-disabled', value => !value),\n                    bind.if('isEmpty', 'ck-labeled-field-view_empty'),\n                    bind.if('isFocused', 'ck-labeled-field-view_focused'),\n                    bind.if('placeholder', 'ck-labeled-field-view_placeholder'),\n                    bind.if('errorText', 'ck-error')\n                ]\n            },\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-labeled-field-view__input-wrapper'\n                        ]\n                    },\n                    children: this.fieldWrapperChildren\n                },\n                this.statusView\n            ]\n        });\n    }\n    /**\n     * Creates label view class instance and bind with view.\n     *\n     * @param id Unique id to set as labelView#for attribute.\n     */\n    _createLabelView(id) {\n        const labelView = new LabelView(this.locale);\n        labelView.for = id;\n        labelView.bind('text').to(this, 'label');\n        return labelView;\n    }\n    /**\n     * Creates the status view instance. It displays {@link #errorText} and {@link #infoText}\n     * next to the {@link #fieldView}. See {@link #_statusText}.\n     *\n     * @param statusUid Unique id of the status, shared with the {@link #fieldView view's}\n     * `aria-describedby` attribute.\n     */\n    _createStatusView(statusUid) {\n        const statusView = new View(this.locale);\n        const bind = this.bindTemplate;\n        statusView.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-labeled-field-view__status',\n                    bind.if('errorText', 'ck-labeled-field-view__status_error'),\n                    bind.if('_statusText', 'ck-hidden', value => !value)\n                ],\n                id: statusUid,\n                role: bind.if('errorText', 'alert')\n            },\n            children: [\n                {\n                    text: bind.to('_statusText')\n                }\n            ]\n        });\n        return statusView;\n    }\n    /**\n     * Focuses the {@link #fieldView}.\n     */\n    focus(direction) {\n        this.fieldView.focus(direction);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/input/inputbase\n */\nimport View from '../view';\nimport { FocusTracker } from '@ckeditor/ckeditor5-utils';\n/**\n * The base input view class.\n */\nexport default class InputBase extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.set('value', undefined);\n        this.set('id', undefined);\n        this.set('placeholder', undefined);\n        this.set('isReadOnly', false);\n        this.set('hasError', false);\n        this.set('ariaDescribedById', undefined);\n        this.focusTracker = new FocusTracker();\n        this.bind('isFocused').to(this.focusTracker);\n        this.set('isEmpty', true);\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'input',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-input',\n                    bind.if('isFocused', 'ck-input_focused'),\n                    bind.if('isEmpty', 'ck-input-text_empty'),\n                    bind.if('hasError', 'ck-error')\n                ],\n                id: bind.to('id'),\n                placeholder: bind.to('placeholder'),\n                readonly: bind.to('isReadOnly'),\n                'aria-invalid': bind.if('hasError', true),\n                'aria-describedby': bind.to('ariaDescribedById')\n            },\n            on: {\n                input: bind.to((...args) => {\n                    this.fire('input', ...args);\n                    this._updateIsEmpty();\n                }),\n                change: bind.to(this._updateIsEmpty.bind(this))\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.focusTracker.add(this.element);\n        this._setDomElementValue(this.value);\n        this._updateIsEmpty();\n        // Bind `this.value` to the DOM element's value.\n        // We cannot use `value` DOM attribute because removing it on Edge does not clear the DOM element's value property.\n        this.on('change:value', (evt, name, value) => {\n            this._setDomElementValue(value);\n            this._updateIsEmpty();\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n    }\n    /**\n     * Moves the focus to the input and selects the value.\n     */\n    select() {\n        this.element.select();\n    }\n    /**\n     * Focuses the input.\n     */\n    focus() {\n        this.element.focus();\n    }\n    /**\n     * Resets the value of the input\n     */\n    reset() {\n        this.value = this.element.value = '';\n        this._updateIsEmpty();\n    }\n    /**\n     * Updates the {@link #isEmpty} property value on demand.\n     */\n    _updateIsEmpty() {\n        this.isEmpty = isInputElementEmpty(this.element);\n    }\n    /**\n     * Sets the `value` property of the {@link #element DOM element} on demand.\n     */\n    _setDomElementValue(value) {\n        this.element.value = (!value && value !== 0) ? '' : value;\n    }\n}\nfunction isInputElementEmpty(domElement) {\n    return !domElement.value;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport InputBase from './inputbase';\nimport '../../theme/components/input/input.css';\n/**\n * The input view class.\n */\nexport default class InputView extends InputBase {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.set('inputMode', 'text');\n        const bind = this.bindTemplate;\n        this.extendTemplate({\n            attributes: {\n                inputmode: bind.to('inputMode')\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/inputtext/inputtextview\n */\nimport InputView from '../input/inputview';\n/**\n * The text input view class.\n */\nexport default class InputTextView extends InputView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.extendTemplate({\n            attributes: {\n                type: 'text',\n                class: [\n                    'ck-input-text'\n                ]\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/textarea/textareaview\n */\nimport { Rect, toUnit, getBorderWidths, global, CKEditorError, isVisible } from '@ckeditor/ckeditor5-utils';\nimport InputBase from '../input/inputbase';\nimport '../../theme/components/input/input.css';\nimport '../../theme/components/textarea/textarea.css';\n/**\n * The textarea view class.\n *\n * ```ts\n * const textareaView = new TextareaView();\n *\n * textareaView.minRows = 2;\n * textareaView.maxRows = 10;\n *\n * textareaView.render();\n *\n * document.body.append( textareaView.element );\n * ```\n */\nexport default class TextareaView extends InputBase {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const toPx = toUnit('px');\n        this.set('minRows', 2);\n        this.set('maxRows', 5);\n        this.set('_height', null);\n        this.set('resize', 'none');\n        this.on('change:minRows', this._validateMinMaxRows.bind(this));\n        this.on('change:maxRows', this._validateMinMaxRows.bind(this));\n        const bind = this.bindTemplate;\n        this.template.tag = 'textarea';\n        this.extendTemplate({\n            attributes: {\n                class: ['ck-textarea'],\n                style: {\n                    height: bind.to('_height', height => height ? toPx(height) : null),\n                    resize: bind.to('resize')\n                },\n                rows: bind.to('minRows')\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.on('input', () => {\n            this._updateAutoGrowHeight(true);\n            this.fire('update');\n        });\n        this.on('change:value', () => {\n            // The content needs to be updated by the browser after the value is changed. It takes a few ms.\n            global.window.requestAnimationFrame(() => {\n                if (isVisible(this.element)) {\n                    this._updateAutoGrowHeight();\n                    this.fire('update');\n                }\n            });\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    reset() {\n        super.reset();\n        this._updateAutoGrowHeight();\n        this.fire('update');\n    }\n    /**\n     * Updates the {@link #_height} of the view depending on {@link #minRows}, {@link #maxRows}, and the current content size.\n     *\n     * **Note**: This method overrides manual resize done by the user using a handle. It's a known bug.\n     */\n    _updateAutoGrowHeight(shouldScroll) {\n        const viewElement = this.element;\n        const singleLineContentClone = getTextareaElementClone(viewElement, '1');\n        const fullTextValueClone = getTextareaElementClone(viewElement, viewElement.value);\n        const singleLineContentStyles = singleLineContentClone.ownerDocument.defaultView.getComputedStyle(singleLineContentClone);\n        const verticalPaddings = parseFloat(singleLineContentStyles.paddingTop) + parseFloat(singleLineContentStyles.paddingBottom);\n        const borders = getBorderWidths(singleLineContentClone);\n        const lineHeight = parseFloat(singleLineContentStyles.lineHeight);\n        const verticalBorder = borders.top + borders.bottom;\n        const singleLineAreaDefaultHeight = new Rect(singleLineContentClone).height;\n        const numberOfLines = Math.round((fullTextValueClone.scrollHeight - verticalPaddings) / lineHeight);\n        const maxHeight = this.maxRows * lineHeight + verticalPaddings + verticalBorder;\n        // There's a --ck-ui-component-min-height CSS custom property that enforces min height of the component.\n        // This min-height is relevant only when there's one line of text. Other than that, we can rely on line-height.\n        const minHeight = numberOfLines === 1 ? singleLineAreaDefaultHeight : this.minRows * lineHeight + verticalPaddings + verticalBorder;\n        // The size of textarea is controlled by height style instead of rows attribute because event though it is\n        // a more complex solution, it is immune to the layout textarea has been rendered in (gird, flex).\n        this._height = Math.min(Math.max(Math.max(numberOfLines, this.minRows) * lineHeight + verticalPaddings + verticalBorder, minHeight), maxHeight);\n        if (shouldScroll) {\n            viewElement.scrollTop = viewElement.scrollHeight;\n        }\n        singleLineContentClone.remove();\n        fullTextValueClone.remove();\n    }\n    /**\n     * Validates the {@link #minRows} and {@link #maxRows} properties and warns in the console if the configuration is incorrect.\n     */\n    _validateMinMaxRows() {\n        if (this.minRows > this.maxRows) {\n            /**\n             * The minimum number of rows is greater than the maximum number of rows.\n             *\n             * @error ui-textarea-view-min-rows-greater-than-max-rows\n             * @param textareaView The misconfigured textarea view instance.\n             * @param minRows The value of `minRows` property.\n             * @param maxRows The value of `maxRows` property.\n             */\n            throw new CKEditorError('ui-textarea-view-min-rows-greater-than-max-rows', {\n                textareaView: this,\n                minRows: this.minRows,\n                maxRows: this.maxRows\n            });\n        }\n    }\n}\nfunction getTextareaElementClone(element, value) {\n    const clone = element.cloneNode();\n    clone.style.position = 'absolute';\n    clone.style.top = '-99999px';\n    clone.style.left = '-99999px';\n    clone.style.height = 'auto';\n    clone.style.overflow = 'hidden';\n    clone.style.width = element.ownerDocument.defaultView.getComputedStyle(element).width;\n    clone.tabIndex = -1;\n    clone.rows = 1;\n    clone.value = value;\n    element.parentNode.insertBefore(clone, element);\n    return clone;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/dropdownview\n */\nimport View from '../view';\nimport { KeystrokeHandler, FocusTracker, getOptimalPosition } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/dropdown/dropdown.css';\n/**\n * The dropdown view class. It manages the dropdown button and dropdown panel.\n *\n * In most cases, the easiest way to create a dropdown is by using the {@link module:ui/dropdown/utils~createDropdown}\n * util:\n *\n * ```ts\n * const dropdown = createDropdown( locale );\n *\n * // Configure dropdown's button properties:\n * dropdown.buttonView.set( {\n * \tlabel: 'A dropdown',\n * \twithText: true\n * } );\n *\n * dropdown.render();\n *\n * dropdown.panelView.element.textContent = 'Content of the panel';\n *\n * // Will render a dropdown with a panel containing a \"Content of the panel\" text.\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * If you want to add a richer content to the dropdown panel, you can use the {@link module:ui/dropdown/utils~addListToDropdown}\n * and {@link module:ui/dropdown/utils~addToolbarToDropdown} helpers. See more examples in\n * {@link module:ui/dropdown/utils~createDropdown} documentation.\n *\n * If you want to create a completely custom dropdown, then you can compose it manually:\n *\n * ```ts\n * const button = new DropdownButtonView( locale );\n * const panel = new DropdownPanelView( locale );\n * const dropdown = new DropdownView( locale, button, panel );\n *\n * button.set( {\n * \tlabel: 'A dropdown',\n * \twithText: true\n * } );\n *\n * dropdown.render();\n *\n * panel.element.textContent = 'Content of the panel';\n *\n * // Will render a dropdown with a panel containing a \"Content of the panel\" text.\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * However, dropdown created this way will contain little behavior. You will need to implement handlers for actions\n * such as {@link module:ui/bindings/clickoutsidehandler~clickOutsideHandler clicking outside an open dropdown}\n * (which should close it) and support for arrow keys inside the panel. Therefore, unless you really know what\n * you do and you really need to do it, it is recommended to use the {@link module:ui/dropdown/utils~createDropdown} helper.\n */\nexport default class DropdownView extends View {\n    /**\n     * Creates an instance of the dropdown.\n     *\n     * Also see {@link #render}.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale, buttonView, panelView) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.buttonView = buttonView;\n        this.panelView = panelView;\n        this.set('isOpen', false);\n        this.set('isEnabled', true);\n        this.set('class', undefined);\n        this.set('id', undefined);\n        this.set('panelPosition', 'auto');\n        // Toggle the visibility of the panel when the dropdown becomes open.\n        this.panelView.bind('isVisible').to(this, 'isOpen');\n        this.keystrokes = new KeystrokeHandler();\n        this.focusTracker = new FocusTracker();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-dropdown',\n                    bind.to('class'),\n                    bind.if('isEnabled', 'ck-disabled', value => !value)\n                ],\n                id: bind.to('id'),\n                'aria-describedby': bind.to('ariaDescribedById')\n            },\n            children: [\n                buttonView,\n                panelView\n            ]\n        });\n        buttonView.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-dropdown__button'\n                ],\n                'data-cke-tooltip-disabled': bind.to('isOpen')\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.focusTracker.add(this.buttonView.element);\n        this.focusTracker.add(this.panelView.element);\n        // Toggle the dropdown when its button has been clicked.\n        this.listenTo(this.buttonView, 'open', () => {\n            this.isOpen = !this.isOpen;\n        });\n        // Let the dropdown control the position of the panel. The position must\n        // be updated every time the dropdown is open.\n        this.on('change:isOpen', (evt, name, isOpen) => {\n            if (!isOpen) {\n                return;\n            }\n            // If \"auto\", find the best position of the panel to fit into the viewport.\n            // Otherwise, simply assign the static position.\n            if (this.panelPosition === 'auto') {\n                const optimalPanelPosition = DropdownView._getOptimalPosition({\n                    element: this.panelView.element,\n                    target: this.buttonView.element,\n                    fitInViewport: true,\n                    positions: this._panelPositions\n                });\n                this.panelView.position = (optimalPanelPosition ? optimalPanelPosition.name : this._panelPositions[0].name);\n            }\n            else {\n                this.panelView.position = this.panelPosition;\n            }\n        });\n        // Listen for keystrokes coming from within #element.\n        this.keystrokes.listenTo(this.element);\n        const closeDropdown = (data, cancel) => {\n            if (this.isOpen) {\n                this.isOpen = false;\n                cancel();\n            }\n        };\n        // Open the dropdown panel using the arrow down key, just like with return or space.\n        this.keystrokes.set('arrowdown', (data, cancel) => {\n            // Don't open if the dropdown is disabled or already open.\n            if (this.buttonView.isEnabled && !this.isOpen) {\n                this.isOpen = true;\n                cancel();\n            }\n        });\n        // Block the right arrow key (until nested dropdowns are implemented).\n        this.keystrokes.set('arrowright', (data, cancel) => {\n            if (this.isOpen) {\n                cancel();\n            }\n        });\n        // Close the dropdown using the arrow left/escape key.\n        this.keystrokes.set('arrowleft', closeDropdown);\n        this.keystrokes.set('esc', closeDropdown);\n    }\n    /**\n     * Focuses the {@link #buttonView}.\n     */\n    focus() {\n        this.buttonView.focus();\n    }\n    /**\n     * Returns {@link #panelView panel} positions to be used by the\n     * {@link module:utils/dom/position~getOptimalPosition `getOptimalPosition()`}\n     * utility considering the direction of the language the UI of the editor is displayed in.\n     */\n    get _panelPositions() {\n        const { south, north, southEast, southWest, northEast, northWest, southMiddleEast, southMiddleWest, northMiddleEast, northMiddleWest } = DropdownView.defaultPanelPositions;\n        if (this.locale.uiLanguageDirection !== 'rtl') {\n            return [\n                southEast, southWest, southMiddleEast, southMiddleWest, south,\n                northEast, northWest, northMiddleEast, northMiddleWest, north\n            ];\n        }\n        else {\n            return [\n                southWest, southEast, southMiddleWest, southMiddleEast, south,\n                northWest, northEast, northMiddleWest, northMiddleEast, north\n            ];\n        }\n    }\n}\n/**\n * A set of positioning functions used by the dropdown view to determine\n * the optimal position (i.e. fitting into the browser viewport) of its\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel} when\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition} is set to 'auto'`.\n *\n * The available positioning functions are as follow:\n *\n * **South**\n *\n * * `south`\n *\n * ```\n *\t\t\t[ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n * ```\n *\n * * `southEast`\n *\n * ```\n *\t\t[ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n * ```\n *\n * * `southWest`\n *\n * ```\n *\t\t         [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n * ```\n *\n * * `southMiddleEast`\n *\n * ```\n *\t\t  [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n * ```\n *\n * * `southMiddleWest`\n *\n * ```\n *\t\t       [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n * ```\n *\n * **North**\n *\n * * `north`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t    [ Button ]\n * ```\n *\n * * `northEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t[ Button ]\n * ```\n *\n * * `northWest`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t         [ Button ]\n * ```\n *\n * * `northMiddleEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t  [ Button ]\n * ```\n *\n * * `northMiddleWest`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t       [ Button ]\n * ```\n *\n * Positioning functions are compatible with {@link module:utils/dom/position~Position}.\n *\n * The name that position function returns will be reflected in dropdown panel's class that\n * controls its placement. See {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition}\n * to learn more.\n */\nDropdownView.defaultPanelPositions = {\n    south: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) / 2,\n            name: 's'\n        };\n    },\n    southEast: buttonRect => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left,\n            name: 'se'\n        };\n    },\n    southWest: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left - panelRect.width + buttonRect.width,\n            name: 'sw'\n        };\n    },\n    southMiddleEast: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) / 4,\n            name: 'sme'\n        };\n    },\n    southMiddleWest: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) * 3 / 4,\n            name: 'smw'\n        };\n    },\n    north: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) / 2,\n            name: 'n'\n        };\n    },\n    northEast: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left,\n            name: 'ne'\n        };\n    },\n    northWest: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left - panelRect.width + buttonRect.width,\n            name: 'nw'\n        };\n    },\n    northMiddleEast: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) / 4,\n            name: 'nme'\n        };\n    },\n    northMiddleWest: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) * 3 / 4,\n            name: 'nmw'\n        };\n    }\n};\n/**\n * A function used to calculate the optimal position for the dropdown panel.\n */\nDropdownView._getOptimalPosition = getOptimalPosition;\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/button/dropdownbuttonview\n */\nimport ButtonView from '../../button/buttonview';\nimport IconView from '../../icon/iconview';\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\n/**\n * The default dropdown button view class.\n *\n * ```ts\n * const view = new DropdownButtonView();\n *\n * view.set( {\n * \tlabel: 'A button',\n * \tkeystroke: 'Ctrl+B',\n * \ttooltip: true\n * } );\n *\n * view.render();\n *\n * document.body.append( view.element );\n * ```\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n */\nexport default class DropdownButtonView extends ButtonView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.arrowView = this._createArrowView();\n        this.extendTemplate({\n            attributes: {\n                'aria-haspopup': true,\n                'aria-expanded': this.bindTemplate.to('isOn', value => String(value))\n            }\n        });\n        // The DropdownButton interface expects the open event upon which will open the dropdown.\n        this.delegate('execute').to(this, 'open');\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.children.add(this.arrowView);\n    }\n    /**\n     * Creates a {@link module:ui/icon/iconview~IconView} instance as {@link #arrowView}.\n     */\n    _createArrowView() {\n        const arrowView = new IconView();\n        arrowView.content = dropdownArrowIcon;\n        arrowView.extendTemplate({\n            attributes: {\n                class: 'ck-dropdown__arrow'\n            }\n        });\n        return arrowView;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/focuscycler\n */\nimport { isVisible, EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * A utility class that helps cycling over focusable {@link module:ui/view~View views} in a\n * {@link module:ui/viewcollection~ViewCollection} when the focus is tracked by the\n * {@link module:utils/focustracker~FocusTracker} instance. It helps implementing keyboard\n * navigation in HTML forms, toolbars, lists and the like.\n *\n * To work properly it requires:\n * * a collection of focusable (HTML `tabindex` attribute) views that implement the `focus()` method,\n * * an associated focus tracker to determine which view is focused.\n *\n * A simple cycler setup can look like this:\n *\n * ```ts\n * const focusables = new ViewCollection();\n * const focusTracker = new FocusTracker();\n *\n * // Add focusable views to the focus tracker.\n * focusTracker.add( ... );\n * ```\n *\n * Then, the cycler can be used manually:\n *\n * ```ts\n * const cycler = new FocusCycler( { focusables, focusTracker } );\n *\n * // Will focus the first focusable view in #focusables.\n * cycler.focusFirst();\n *\n * // Will log the next focusable item in #focusables.\n * console.log( cycler.next );\n * ```\n *\n * Alternatively, it can work side by side with the {@link module:utils/keystrokehandler~KeystrokeHandler}:\n *\n * ```ts\n * const keystrokeHandler = new KeystrokeHandler();\n *\n * // Activate the keystroke handler.\n * keystrokeHandler.listenTo( sourceOfEvents );\n *\n * const cycler = new FocusCycler( {\n * \tfocusables, focusTracker, keystrokeHandler,\n * \tactions: {\n * \t\t// When arrowup of arrowleft is detected by the #keystrokeHandler,\n * \t\t// focusPrevious() will be called on the cycler.\n * \t\tfocusPrevious: [ 'arrowup', 'arrowleft' ],\n * \t}\n * } );\n * ```\n *\n * Check out the {@glink framework/deep-dive/ui/focus-tracking \"Deep dive into focus tracking\"} guide to learn more.\n */\nexport default class FocusCycler extends EmitterMixin() {\n    /**\n     * Creates an instance of the focus cycler utility.\n     *\n     * @param options Configuration options.\n     */\n    constructor(options) {\n        super();\n        this.focusables = options.focusables;\n        this.focusTracker = options.focusTracker;\n        this.keystrokeHandler = options.keystrokeHandler;\n        this.actions = options.actions;\n        if (options.actions && options.keystrokeHandler) {\n            for (const methodName in options.actions) {\n                let actions = options.actions[methodName];\n                if (typeof actions == 'string') {\n                    actions = [actions];\n                }\n                for (const keystroke of actions) {\n                    options.keystrokeHandler.set(keystroke, (data, cancel) => {\n                        this[methodName]();\n                        cancel();\n                    });\n                }\n            }\n        }\n        this.on('forwardCycle', () => this.focusFirst(), { priority: 'low' });\n        this.on('backwardCycle', () => this.focusLast(), { priority: 'low' });\n    }\n    /**\n     * Returns the first focusable view in {@link #focusables}.\n     * Returns `null` if there is none.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    get first() {\n        return (this.focusables.find(isFocusable) || null);\n    }\n    /**\n     * Returns the last focusable view in {@link #focusables}.\n     * Returns `null` if there is none.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    get last() {\n        return (this.focusables.filter(isFocusable).slice(-1)[0] || null);\n    }\n    /**\n     * Returns the next focusable view in {@link #focusables} based on {@link #current}.\n     * Returns `null` if there is none.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    get next() {\n        return this._getFocusableItem(1);\n    }\n    /**\n     * Returns the previous focusable view in {@link #focusables} based on {@link #current}.\n     * Returns `null` if there is none.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    get previous() {\n        return this._getFocusableItem(-1);\n    }\n    /**\n     * An index of the view in the {@link #focusables} which is focused according\n     * to {@link #focusTracker}. Returns `null` when there is no such view.\n     */\n    get current() {\n        let index = null;\n        // There's no focused view in the focusables.\n        if (this.focusTracker.focusedElement === null) {\n            return null;\n        }\n        this.focusables.find((view, viewIndex) => {\n            const focused = view.element === this.focusTracker.focusedElement;\n            if (focused) {\n                index = viewIndex;\n            }\n            return focused;\n        });\n        return index;\n    }\n    /**\n     * Focuses the {@link #first} item in {@link #focusables}.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    focusFirst() {\n        this._focus(this.first, 1);\n    }\n    /**\n     * Focuses the {@link #last} item in {@link #focusables}.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    focusLast() {\n        this._focus(this.last, -1);\n    }\n    /**\n     * Focuses the {@link #next} item in {@link #focusables}.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    focusNext() {\n        const next = this.next;\n        if (next && this.focusables.getIndex(next) === this.current) {\n            return;\n        }\n        if (next === this.first) {\n            this.fire('forwardCycle');\n        }\n        else {\n            this._focus(next, 1);\n        }\n    }\n    /**\n     * Focuses the {@link #previous} item in {@link #focusables}.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    focusPrevious() {\n        const previous = this.previous;\n        if (previous && this.focusables.getIndex(previous) === this.current) {\n            return;\n        }\n        if (previous === this.last) {\n            this.fire('backwardCycle');\n        }\n        else {\n            this._focus(previous, -1);\n        }\n    }\n    /**\n     * Focuses the given view if it exists.\n     *\n     * @param view The view to be focused\n     * @param direction The direction of the focus if the view has focusable children.\n     * @returns\n     */\n    _focus(view, direction) {\n        if (view) {\n            view.focus(direction);\n        }\n    }\n    /**\n     * Returns the next or previous focusable view in {@link #focusables} with respect\n     * to {@link #current}.\n     *\n     * @param step Either `1` for checking forward from {@link #current} or `-1` for checking backwards.\n     */\n    _getFocusableItem(step) {\n        // Cache for speed.\n        const current = this.current;\n        const collectionLength = this.focusables.length;\n        if (!collectionLength) {\n            return null;\n        }\n        // Start from the beginning if no view is focused.\n        // https://github.com/ckeditor/ckeditor5-ui/issues/206\n        if (current === null) {\n            return this[step === 1 ? 'first' : 'last'];\n        }\n        // Cycle in both directions.\n        let index = (current + collectionLength + step) % collectionLength;\n        do {\n            const view = this.focusables.get(index);\n            if (isFocusable(view)) {\n                return view;\n            }\n            // Cycle in both directions.\n            index = (index + collectionLength + step) % collectionLength;\n        } while (index !== current);\n        return null;\n    }\n}\n/**\n * Checks whether a view is focusable.\n *\n * @param view A view to be checked.\n */\nfunction isFocusable(view) {\n    return !!('focus' in view && isVisible(view.element));\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/toolbarview\n */\nimport View from '../view';\nimport FocusCycler from '../focuscycler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport ToolbarLineBreakView from './toolbarlinebreakview';\nimport preventDefault from '../bindings/preventdefault';\nimport { createDropdown, addToolbarToDropdown } from '../dropdown/utils';\nimport normalizeToolbarConfig from './normalizetoolbarconfig';\nimport { FocusTracker, KeystrokeHandler, Rect, ResizeObserver, global, isVisible, logWarning } from '@ckeditor/ckeditor5-utils';\nimport { icons } from '@ckeditor/ckeditor5-core';\nimport { isObject } from 'lodash-es';\nimport '../../theme/components/toolbar/toolbar.css';\nconst { threeVerticalDots } = icons;\nexport const NESTED_TOOLBAR_ICONS = {\n    alignLeft: icons.alignLeft,\n    bold: icons.bold,\n    importExport: icons.importExport,\n    paragraph: icons.paragraph,\n    plus: icons.plus,\n    text: icons.text,\n    threeVerticalDots: icons.threeVerticalDots,\n    pilcrow: icons.pilcrow,\n    dragIndicator: icons.dragIndicator\n};\n/**\n * The toolbar view class.\n */\nexport default class ToolbarView extends View {\n    /**\n     * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n     *\n     * Also see {@link #render}.\n     *\n     * @param locale The localization services instance.\n     * @param options Configuration options of the toolbar.\n     */\n    constructor(locale, options) {\n        super(locale);\n        const bind = this.bindTemplate;\n        const t = this.t;\n        this.options = options || {};\n        this.set('ariaLabel', t('Editor toolbar'));\n        this.set('maxWidth', 'auto');\n        this.items = this.createCollection();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.set('class', undefined);\n        this.set('isCompact', false);\n        this.itemsView = new ItemsView(locale);\n        this.children = this.createCollection();\n        this.children.add(this.itemsView);\n        this.focusables = this.createCollection();\n        const isRtl = locale.uiLanguageDirection === 'rtl';\n        this._focusCycler = new FocusCycler({\n            focusables: this.focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate toolbar items backwards using the arrow[left,up] keys.\n                focusPrevious: [isRtl ? 'arrowright' : 'arrowleft', 'arrowup'],\n                // Navigate toolbar items forwards using the arrow[right,down] keys.\n                focusNext: [isRtl ? 'arrowleft' : 'arrowright', 'arrowdown']\n            }\n        });\n        const classes = [\n            'ck',\n            'ck-toolbar',\n            bind.to('class'),\n            bind.if('isCompact', 'ck-toolbar_compact')\n        ];\n        if (this.options.shouldGroupWhenFull && this.options.isFloating) {\n            classes.push('ck-toolbar_floating');\n        }\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: classes,\n                role: 'toolbar',\n                'aria-label': bind.to('ariaLabel'),\n                style: {\n                    maxWidth: bind.to('maxWidth')\n                },\n                tabindex: -1\n            },\n            children: this.children,\n            on: {\n                // https://github.com/ckeditor/ckeditor5-ui/issues/206\n                mousedown: preventDefault(this)\n            }\n        });\n        this._behavior = this.options.shouldGroupWhenFull ? new DynamicGrouping(this) : new StaticLayout(this);\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.focusTracker.add(this.element);\n        // Children added before rendering should be known to the #focusTracker.\n        for (const item of this.items) {\n            this.focusTracker.add(item.element);\n        }\n        this.items.on('add', (evt, item) => {\n            this.focusTracker.add(item.element);\n        });\n        this.items.on('remove', (evt, item) => {\n            this.focusTracker.remove(item.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n        this._behavior.render(this);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this._behavior.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n        return super.destroy();\n    }\n    /**\n     * Focuses the first focusable in {@link #focusables}.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Focuses the last focusable in {@link #focusables}.\n     */\n    focusLast() {\n        this._focusCycler.focusLast();\n    }\n    /**\n     * A utility that expands the plain toolbar configuration into\n     * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n     *\n     * @param itemsOrConfig The toolbar items or the entire toolbar configuration object.\n     * @param factory A factory producing toolbar items.\n     * @param removeItems An array of items names to be removed from the configuration. When present, applies\n     * to this toolbar and all nested ones as well.\n     */\n    fillFromConfig(itemsOrConfig, factory, removeItems) {\n        this.items.addMany(this._buildItemsFromConfig(itemsOrConfig, factory, removeItems));\n    }\n    /**\n     * A utility that expands the plain toolbar configuration into a list of view items using a given component factory.\n     *\n     * @param itemsOrConfig The toolbar items or the entire toolbar configuration object.\n     * @param factory A factory producing toolbar items.\n     * @param removeItems An array of items names to be removed from the configuration. When present, applies\n     * to this toolbar and all nested ones as well.\n     */\n    _buildItemsFromConfig(itemsOrConfig, factory, removeItems) {\n        const config = normalizeToolbarConfig(itemsOrConfig);\n        const normalizedRemoveItems = removeItems || config.removeItems;\n        const itemsToAdd = this._cleanItemsConfiguration(config.items, factory, normalizedRemoveItems)\n            .map(item => {\n            if (isObject(item)) {\n                return this._createNestedToolbarDropdown(item, factory, normalizedRemoveItems);\n            }\n            else if (item === '|') {\n                return new ToolbarSeparatorView();\n            }\n            else if (item === '-') {\n                return new ToolbarLineBreakView();\n            }\n            return factory.create(item);\n        })\n            .filter((item) => !!item);\n        return itemsToAdd;\n    }\n    /**\n     * Cleans up the {@link module:ui/toolbar/toolbarview~ToolbarView#items} of the toolbar by removing unwanted items and\n     * duplicated (obsolete) separators or line breaks.\n     *\n     * @param items The toolbar items configuration.\n     * @param factory A factory producing toolbar items.\n     * @param removeItems An array of items names to be removed from the configuration.\n     * @returns Items after the clean-up.\n     */\n    _cleanItemsConfiguration(items, factory, removeItems) {\n        const filteredItems = items\n            .filter((item, idx, items) => {\n            if (item === '|') {\n                return true;\n            }\n            // Items listed in `config.removeItems` should not be added to the toolbar.\n            if (removeItems.indexOf(item) !== -1) {\n                return false;\n            }\n            if (item === '-') {\n                // The toolbar line breaks must not be rendered when toolbar grouping is enabled.\n                // (https://github.com/ckeditor/ckeditor5/issues/8582)\n                if (this.options.shouldGroupWhenFull) {\n                    /**\n                     * The toolbar multiline breaks (`-` items) only work when the automatic button grouping\n                     * is disabled in the toolbar configuration.\n                     * To do this, set the `shouldNotGroupWhenFull` option to `true` in the editor configuration:\n                     *\n                     * ```ts\n                     * const config = {\n                     * \ttoolbar: {\n                     * \t\titems: [ ... ],\n                     * \t\tshouldNotGroupWhenFull: true\n                     * \t}\n                     * }\n                     * ```\n                     *\n                     * Learn more about {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}.\n                     *\n                     * @error toolbarview-line-break-ignored-when-grouping-items\n                     */\n                    logWarning('toolbarview-line-break-ignored-when-grouping-items', items);\n                    return false;\n                }\n                return true;\n            }\n            // For the items that cannot be instantiated we are sending warning message. We also filter them out.\n            if (!isObject(item) && !factory.has(item)) {\n                /**\n                 * There was a problem processing the configuration of the toolbar. The item with the given\n                 * name does not exist so it was omitted when rendering the toolbar.\n                 *\n                 * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n                 * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n                 *\n                 * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n                 * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n                 *\n                 * You can use the following snippet to retrieve all available toolbar items:\n                 *\n                 * ```ts\n                 * Array.from( editor.ui.componentFactory.names() );\n                 * ```\n                 *\n                 * @error toolbarview-item-unavailable\n                 * @param item The name of the component or nested toolbar definition.\n                 */\n                logWarning('toolbarview-item-unavailable', { item });\n                return false;\n            }\n            return true;\n        });\n        return this._cleanSeparatorsAndLineBreaks(filteredItems);\n    }\n    /**\n     * Remove leading, trailing, and duplicated separators (`-` and `|`).\n     *\n     * @returns Toolbar items after the separator and line break clean-up.\n     */\n    _cleanSeparatorsAndLineBreaks(items) {\n        const nonSeparatorPredicate = (item) => (item !== '-' && item !== '|');\n        const count = items.length;\n        // Find an index of the first item that is not a separator.\n        const firstCommandItemIndex = items.findIndex(nonSeparatorPredicate);\n        // Items include separators only. There is no point in displaying them.\n        if (firstCommandItemIndex === -1) {\n            return [];\n        }\n        // Search from the end of the list, then convert found index back to the original direction.\n        const lastCommandItemIndex = count - items\n            .slice()\n            .reverse()\n            .findIndex(nonSeparatorPredicate);\n        return items\n            // Return items without the leading and trailing separators.\n            .slice(firstCommandItemIndex, lastCommandItemIndex)\n            // Remove duplicated separators.\n            .filter((name, idx, items) => {\n            // Filter only separators.\n            if (nonSeparatorPredicate(name)) {\n                return true;\n            }\n            const isDuplicated = idx > 0 && items[idx - 1] === name;\n            return !isDuplicated;\n        });\n    }\n    /**\n     * Creates a user-defined dropdown containing a toolbar with items.\n     *\n     * @param definition A definition of the nested toolbar dropdown.\n     * @param definition.label A label of the dropdown.\n     * @param definition.icon An icon of the drop-down. One of 'bold', 'plus', 'text', 'importExport', 'alignLeft',\n     * 'paragraph' or an SVG string. When `false` is passed, no icon will be used.\n     * @param definition.withText When set `true`, the label of the dropdown will be visible. See\n     * {@link module:ui/button/buttonview~ButtonView#withText} to learn more.\n     * @param definition.tooltip A tooltip of the dropdown button. See\n     * {@link module:ui/button/buttonview~ButtonView#tooltip} to learn more. Defaults to `true`.\n     * @param componentFactory Component factory used to create items\n     * of the nested toolbar.\n     */\n    _createNestedToolbarDropdown(definition, componentFactory, removeItems) {\n        let { label, icon, items, tooltip = true, withText = false } = definition;\n        items = this._cleanItemsConfiguration(items, componentFactory, removeItems);\n        // There is no point in rendering a dropdown without items.\n        if (!items.length) {\n            return null;\n        }\n        const locale = this.locale;\n        const dropdownView = createDropdown(locale);\n        if (!label) {\n            /**\n             * A dropdown definition in the toolbar configuration is missing a text label.\n             *\n             * Without a label, the dropdown becomes inaccessible to users relying on assistive technologies.\n             * Make sure the `label` property is set in your drop-down configuration:\n             *\n             * ```json\n             * {\n             * \tlabel: 'A human-readable label',\n             * \ticon: '...',\n             * \titems: [ ... ]\n             * },\n             * ```\n             *\n             * Learn more about {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}.\n             *\n             * @error toolbarview-nested-toolbar-dropdown-missing-label\n             */\n            logWarning('toolbarview-nested-toolbar-dropdown-missing-label', definition);\n        }\n        dropdownView.class = 'ck-toolbar__nested-toolbar-dropdown';\n        dropdownView.buttonView.set({\n            label,\n            tooltip,\n            withText: !!withText\n        });\n        // Allow disabling icon by passing false.\n        if (icon !== false) {\n            // A pre-defined icon picked by name, SVG string, a fallback (default) icon.\n            dropdownView.buttonView.icon = NESTED_TOOLBAR_ICONS[icon] || icon || threeVerticalDots;\n        }\n        // If the icon is disabled, display the label automatically.\n        else {\n            dropdownView.buttonView.withText = true;\n        }\n        addToolbarToDropdown(dropdownView, () => (dropdownView.toolbarView._buildItemsFromConfig(items, componentFactory, removeItems)));\n        return dropdownView;\n    }\n}\n/**\n * An inner block of the {@link module:ui/toolbar/toolbarview~ToolbarView} hosting its\n * {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n */\nclass ItemsView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.children = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-toolbar__items'\n                ]\n            },\n            children: this.children\n        });\n    }\n}\n/**\n * A toolbar behavior that makes it static and unresponsive to the changes of the environment.\n * At the same time, it also makes it possible to display a toolbar with a vertical layout\n * using the {@link module:ui/toolbar/toolbarview~ToolbarView#isVertical} property.\n */\nclass StaticLayout {\n    /**\n     * Creates an instance of the {@link module:ui/toolbar/toolbarview~StaticLayout} toolbar\n     * behavior.\n     *\n     * @param view An instance of the toolbar that this behavior is added to.\n     */\n    constructor(view) {\n        const bind = view.bindTemplate;\n        // Static toolbar can be vertical when needed.\n        view.set('isVertical', false);\n        // 1:1 pass–through binding, all ToolbarView#items are visible.\n        view.itemsView.children.bindTo(view.items).using(item => item);\n        // 1:1 pass–through binding, all ToolbarView#items are focusable.\n        view.focusables.bindTo(view.items).using(item => item);\n        view.extendTemplate({\n            attributes: {\n                class: [\n                    // When vertical, the toolbar has an additional CSS class.\n                    bind.if('isVertical', 'ck-toolbar_vertical')\n                ]\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() { }\n    /**\n     * @inheritDoc\n     */\n    destroy() { }\n}\n/**\n * A toolbar behavior that makes the items respond to changes in the geometry.\n *\n * In a nutshell, it groups {@link module:ui/toolbar/toolbarview~ToolbarView#items}\n * that do not fit visually into a single row of the toolbar (due to limited space).\n * Items that do not fit are aggregated in a dropdown displayed at the end of the toolbar.\n *\n * ```\n *\t┌──────────────────────────────────────── ToolbarView ──────────────────────────────────────────┐\n *\t| ┌─────────────────────────────────────── #children ─────────────────────────────────────────┐ |\n *\t| |   ┌─────── #itemsView ────────┐ ┌──────────────────────┐ ┌── #groupedItemsDropdown ───┐   | |\n *\t| |   |       #ungroupedItems     | | ToolbarSeparatorView | |        #groupedItems       |   | |\n *\t| |   └──────────────────────────-┘ └──────────────────────┘ └────────────────────────────┘   | |\n *\t| |                                  \\---------- only when toolbar items overflow -------/    | |\n *\t| └───────────────────────────────────────────────────────────────────────────────────────────┘ |\n *\t└───────────────────────────────────────────────────────────────────────────────────────────────┘\n * ```\n */\nclass DynamicGrouping {\n    /**\n     * Creates an instance of the {@link module:ui/toolbar/toolbarview~DynamicGrouping} toolbar\n     * behavior.\n     *\n     * @param view An instance of the toolbar that this behavior is added to.\n     */\n    constructor(view) {\n        /**\n         * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n         * and manage items that do not fit into a single row.\n         *\n         * **Note:** Created in {@link #_enableGroupingOnResize}.\n         *\n         * @readonly\n         */\n        this.resizeObserver = null;\n        /**\n         * A cached value of the horizontal padding style used by {@link #_updateGrouping}\n         * to manage the {@link module:ui/toolbar/toolbarview~ToolbarView#items} that do not fit into\n         * a single toolbar line. This value can be reused between updates because it is unlikely that\n         * the padding will change and re–using `Window.getComputedStyle()` is expensive.\n         *\n         * @readonly\n         */\n        this.cachedPadding = null;\n        /**\n         * A flag indicating that an items grouping update has been queued (e.g. due to the toolbar being visible)\n         * and should be executed immediately the next time the toolbar shows up.\n         *\n         * @readonly\n         */\n        this.shouldUpdateGroupingOnNextResize = false;\n        this.view = view;\n        this.viewChildren = view.children;\n        this.viewFocusables = view.focusables;\n        this.viewItemsView = view.itemsView;\n        this.viewFocusTracker = view.focusTracker;\n        this.viewLocale = view.locale;\n        this.ungroupedItems = view.createCollection();\n        this.groupedItems = view.createCollection();\n        this.groupedItemsDropdown = this._createGroupedItemsDropdown();\n        // Only those items that were not grouped are visible to the user.\n        view.itemsView.children.bindTo(this.ungroupedItems).using(item => item);\n        // Make sure all #items visible in the main space of the toolbar are \"focuscycleable\".\n        this.ungroupedItems.on('change', this._updateFocusCycleableItems.bind(this));\n        // Make sure the #groupedItemsDropdown is also included in cycling when it appears.\n        view.children.on('change', this._updateFocusCycleableItems.bind(this));\n        // ToolbarView#items is dynamic. When an item is added or removed, it should be automatically\n        // represented in either grouped or ungrouped items at the right index.\n        // In other words #items == concat( #ungroupedItems, #groupedItems )\n        // (in length and order).\n        view.items.on('change', (evt, changeData) => {\n            const index = changeData.index;\n            const added = Array.from(changeData.added);\n            // Removing.\n            for (const removedItem of changeData.removed) {\n                if (index >= this.ungroupedItems.length) {\n                    this.groupedItems.remove(removedItem);\n                }\n                else {\n                    this.ungroupedItems.remove(removedItem);\n                }\n            }\n            // Adding.\n            for (let currentIndex = index; currentIndex < index + added.length; currentIndex++) {\n                const addedItem = added[currentIndex - index];\n                if (currentIndex > this.ungroupedItems.length) {\n                    this.groupedItems.add(addedItem, currentIndex - this.ungroupedItems.length);\n                }\n                else {\n                    this.ungroupedItems.add(addedItem, currentIndex);\n                }\n            }\n            // When new ungrouped items join in and land in #ungroupedItems, there's a chance it causes\n            // the toolbar to overflow.\n            // Consequently if removed from grouped or ungrouped items, there is a chance\n            // some new space is available and we could do some ungrouping.\n            this._updateGrouping();\n        });\n        view.extendTemplate({\n            attributes: {\n                class: [\n                    // To group items dynamically, the toolbar needs a dedicated CSS class.\n                    'ck-toolbar_grouping'\n                ]\n            }\n        });\n    }\n    /**\n     * Enables dynamic items grouping based on the dimensions of the toolbar.\n     *\n     * @param view An instance of the toolbar that this behavior is added to.\n     */\n    render(view) {\n        this.viewElement = view.element;\n        this._enableGroupingOnResize();\n        this._enableGroupingOnMaxWidthChange(view);\n    }\n    /**\n     * Cleans up the internals used by this behavior.\n     */\n    destroy() {\n        // The dropdown may not be in ToolbarView#children at the moment of toolbar destruction\n        // so let's make sure it's actually destroyed along with the toolbar.\n        this.groupedItemsDropdown.destroy();\n        this.resizeObserver.destroy();\n    }\n    /**\n     * When called, it will check if any of the {@link #ungroupedItems} do not fit into a single row of the toolbar,\n     * and it will move them to the {@link #groupedItems} when it happens.\n     *\n     * At the same time, it will also check if there is enough space in the toolbar for the first of the\n     * {@link #groupedItems} to be returned back to {@link #ungroupedItems} and still fit into a single row\n     * without the toolbar wrapping.\n     */\n    _updateGrouping() {\n        // Do no grouping–related geometry analysis when the toolbar is detached from visible DOM,\n        // for instance before #render(), or after render but without a parent or a parent detached\n        // from DOM. DOMRects won't work anyway and there will be tons of warning in the console and\n        // nothing else. This happens, for instance, when the toolbar is detached from DOM and\n        // some logic adds or removes its #items.\n        if (!this.viewElement.ownerDocument.body.contains(this.viewElement)) {\n            return;\n        }\n        // Do not update grouping when the element is invisible. Such toolbar has DOMRect filled with zeros\n        // and that would cause all items to be grouped. Instead, queue the grouping so it runs next time\n        // the toolbar is visible (the next ResizeObserver callback execution). This is handy because\n        // the grouping could be caused by increasing the #maxWidth when the toolbar was invisible and the next\n        // time it shows up, some items could actually be ungrouped (https://github.com/ckeditor/ckeditor5/issues/6575).\n        if (!isVisible(this.viewElement)) {\n            this.shouldUpdateGroupingOnNextResize = true;\n            return;\n        }\n        // Remember how many items were initially grouped so at the it is possible to figure out if the number\n        // of grouped items has changed. If the number has changed, geometry of the toolbar has also changed.\n        const initialGroupedItemsCount = this.groupedItems.length;\n        let wereItemsGrouped;\n        // Group #items as long as some wrap to the next row. This will happen, for instance,\n        // when the toolbar is getting narrow and there is not enough space to display all items in\n        // a single row.\n        while (this._areItemsOverflowing) {\n            this._groupLastItem();\n            wereItemsGrouped = true;\n        }\n        // If none were grouped now but there were some items already grouped before,\n        // then, what the hell, maybe let's see if some of them can be ungrouped. This happens when,\n        // for instance, the toolbar is stretching and there's more space in it than before.\n        if (!wereItemsGrouped && this.groupedItems.length) {\n            // Ungroup items as long as none are overflowing or there are none to ungroup left.\n            while (this.groupedItems.length && !this._areItemsOverflowing) {\n                this._ungroupFirstItem();\n            }\n            // If the ungrouping ended up with some item wrapping to the next row,\n            // put it back to the group toolbar (\"undo the last ungroup\"). We don't know whether\n            // an item will wrap or not until we ungroup it (that's a DOM/CSS thing) so this\n            // clean–up is vital for the algorithm.\n            if (this._areItemsOverflowing) {\n                this._groupLastItem();\n            }\n        }\n        if (this.groupedItems.length !== initialGroupedItemsCount) {\n            this.view.fire('groupedItemsUpdate');\n        }\n    }\n    /**\n     * Returns `true` when {@link module:ui/toolbar/toolbarview~ToolbarView#element} children visually overflow,\n     * for instance if the toolbar is narrower than its members. Returns `false` otherwise.\n     */\n    get _areItemsOverflowing() {\n        // An empty toolbar cannot overflow.\n        if (!this.ungroupedItems.length) {\n            return false;\n        }\n        const element = this.viewElement;\n        const uiLanguageDirection = this.viewLocale.uiLanguageDirection;\n        const lastChildRect = new Rect(element.lastChild);\n        const toolbarRect = new Rect(element);\n        if (!this.cachedPadding) {\n            const computedStyle = global.window.getComputedStyle(element);\n            const paddingProperty = uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft';\n            // parseInt() is essential because of quirky floating point numbers logic and DOM.\n            // If the padding turned out too big because of that, the grouped items dropdown would\n            // always look (from the Rect perspective) like it overflows (while it's not).\n            this.cachedPadding = Number.parseInt(computedStyle[paddingProperty]);\n        }\n        if (uiLanguageDirection === 'ltr') {\n            return lastChildRect.right > toolbarRect.right - this.cachedPadding;\n        }\n        else {\n            return lastChildRect.left < toolbarRect.left + this.cachedPadding;\n        }\n    }\n    /**\n     * Enables the functionality that prevents {@link #ungroupedItems} from overflowing (wrapping to the next row)\n     * upon resize when there is little space available. Instead, the toolbar items are moved to the\n     * {@link #groupedItems} collection and displayed in a dropdown at the end of the row (which has its own nested toolbar).\n     *\n     * When called, the toolbar will automatically analyze the location of its {@link #ungroupedItems} and \"group\"\n     * them in the dropdown if necessary. It will also observe the browser window for size changes in\n     * the future and respond to them by grouping more items or reverting already grouped back, depending\n     * on the visual space available.\n     */\n    _enableGroupingOnResize() {\n        let previousWidth;\n        // TODO: Consider debounce.\n        this.resizeObserver = new ResizeObserver(this.viewElement, entry => {\n            if (!previousWidth || previousWidth !== entry.contentRect.width || this.shouldUpdateGroupingOnNextResize) {\n                this.shouldUpdateGroupingOnNextResize = false;\n                this._updateGrouping();\n                previousWidth = entry.contentRect.width;\n            }\n        });\n        this._updateGrouping();\n    }\n    /**\n     * Enables the grouping functionality, just like {@link #_enableGroupingOnResize} but the difference is that\n     * it listens to the changes of {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth} instead.\n     */\n    _enableGroupingOnMaxWidthChange(view) {\n        view.on('change:maxWidth', () => {\n            this._updateGrouping();\n        });\n    }\n    /**\n     * When called, it will remove the last item from {@link #ungroupedItems} and move it back\n     * to the {@link #groupedItems} collection.\n     *\n     * The opposite of {@link #_ungroupFirstItem}.\n     */\n    _groupLastItem() {\n        if (!this.groupedItems.length) {\n            this.viewChildren.add(new ToolbarSeparatorView());\n            this.viewChildren.add(this.groupedItemsDropdown);\n            this.viewFocusTracker.add(this.groupedItemsDropdown.element);\n        }\n        this.groupedItems.add(this.ungroupedItems.remove(this.ungroupedItems.last), 0);\n    }\n    /**\n     * Moves the very first item belonging to {@link #groupedItems} back\n     * to the {@link #ungroupedItems} collection.\n     *\n     * The opposite of {@link #_groupLastItem}.\n     */\n    _ungroupFirstItem() {\n        this.ungroupedItems.add(this.groupedItems.remove(this.groupedItems.first));\n        if (!this.groupedItems.length) {\n            this.viewChildren.remove(this.groupedItemsDropdown);\n            this.viewChildren.remove(this.viewChildren.last);\n            this.viewFocusTracker.remove(this.groupedItemsDropdown.element);\n        }\n    }\n    /**\n     * Creates the {@link #groupedItemsDropdown} that hosts the members of the {@link #groupedItems}\n     * collection when there is not enough space in the toolbar to display all items in a single row.\n     */\n    _createGroupedItemsDropdown() {\n        const locale = this.viewLocale;\n        const t = locale.t;\n        const dropdown = createDropdown(locale);\n        dropdown.class = 'ck-toolbar__grouped-dropdown';\n        // Make sure the dropdown never sticks out to the left/right. It should be under the main toolbar.\n        // (https://github.com/ckeditor/ckeditor5/issues/5608)\n        dropdown.panelPosition = locale.uiLanguageDirection === 'ltr' ? 'sw' : 'se';\n        addToolbarToDropdown(dropdown, this.groupedItems);\n        dropdown.buttonView.set({\n            label: t('Show more items'),\n            tooltip: true,\n            tooltipPosition: locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw',\n            icon: threeVerticalDots\n        });\n        return dropdown;\n    }\n    /**\n     * Updates the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables focus–cycleable items}\n     * collection so it represents the up–to–date state of the UI from the perspective of the user.\n     *\n     * For instance, the {@link #groupedItemsDropdown} can show up and hide but when it is visible,\n     * it must be subject to focus cycling in the toolbar.\n     *\n     * See the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables collection} documentation\n     * to learn more about the purpose of this method.\n     */\n    _updateFocusCycleableItems() {\n        this.viewFocusables.clear();\n        this.ungroupedItems.map(item => {\n            this.viewFocusables.add(item);\n        });\n        if (this.groupedItems.length) {\n            this.viewFocusables.add(this.groupedItemsDropdown);\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/list/listview\n */\nimport View from '../view';\nimport FocusCycler from '../focuscycler';\nimport ListItemView from './listitemview';\nimport ListItemGroupView from './listitemgroupview';\nimport ViewCollection from '../viewcollection';\nimport { FocusTracker, KeystrokeHandler } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/list/list.css';\n/**\n * The list view class.\n */\nexport default class ListView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        /**\n         * A cached map of {@link module:ui/list/listitemgroupview~ListItemGroupView} to `change` event listeners for their `items`.\n         * Used for accessibility and keyboard navigation purposes.\n         */\n        this._listItemGroupToChangeListeners = new WeakMap();\n        const bind = this.bindTemplate;\n        this.focusables = new ViewCollection();\n        this.items = this.createCollection();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this._focusCycler = new FocusCycler({\n            focusables: this.focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate list items backwards using the arrowup key.\n                focusPrevious: 'arrowup',\n                // Navigate toolbar items forwards using the arrowdown key.\n                focusNext: 'arrowdown'\n            }\n        });\n        this.set('ariaLabel', undefined);\n        this.set('ariaLabelledBy', undefined);\n        this.set('role', undefined);\n        this.setTemplate({\n            tag: 'ul',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-reset',\n                    'ck-list'\n                ],\n                role: bind.to('role'),\n                'aria-label': bind.to('ariaLabel'),\n                'aria-labelledby': bind.to('ariaLabelledBy')\n            },\n            children: this.items\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Items added before rendering should be known to the #focusTracker.\n        for (const item of this.items) {\n            if (item instanceof ListItemGroupView) {\n                this._registerFocusableItemsGroup(item);\n            }\n            else if (item instanceof ListItemView) {\n                this._registerFocusableListItem(item);\n            }\n        }\n        this.items.on('change', (evt, data) => {\n            for (const removed of data.removed) {\n                if (removed instanceof ListItemGroupView) {\n                    this._deregisterFocusableItemsGroup(removed);\n                }\n                else {\n                    this._deregisterFocusableListItem(removed);\n                }\n            }\n            for (const added of Array.from(data.added).reverse()) {\n                if (added instanceof ListItemGroupView) {\n                    this._registerFocusableItemsGroup(added, data.index);\n                }\n                else {\n                    this._registerFocusableListItem(added, data.index);\n                }\n            }\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Focuses the first focusable in {@link #items}.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Focuses the first focusable in {@link #items}.\n     */\n    focusFirst() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Focuses the last focusable in {@link #items}.\n     */\n    focusLast() {\n        this._focusCycler.focusLast();\n    }\n    /**\n     * Registers a list item view in the focus tracker.\n     *\n     * @param item The list item view to be registered.\n     * @param index Index of the list item view in the {@link #items} collection. If not specified, the item will be added at the end.\n     */\n    _registerFocusableListItem(item, index) {\n        this.focusTracker.add(item.element);\n        this.focusables.add(item, index);\n    }\n    /**\n     * Removes a list item view from the focus tracker.\n     *\n     * @param item The list item view to be removed.\n     */\n    _deregisterFocusableListItem(item) {\n        this.focusTracker.remove(item.element);\n        this.focusables.remove(item);\n    }\n    /**\n     * Gets a callback that will be called when the `items` collection of a {@link module:ui/list/listitemgroupview~ListItemGroupView}\n     * change.\n     *\n     * @param groupView The group view for which the callback will be created.\n     * @returns The callback function to be used for the items `change` event listener in a group.\n     */\n    _getOnGroupItemsChangeCallback(groupView) {\n        return (evt, data) => {\n            for (const removed of data.removed) {\n                this._deregisterFocusableListItem(removed);\n            }\n            for (const added of Array.from(data.added).reverse()) {\n                this._registerFocusableListItem(added, this.items.getIndex(groupView) + data.index);\n            }\n        };\n    }\n    /**\n     * Registers a list item group view (and its children) in the focus tracker.\n     *\n     * @param groupView A group view to be registered.\n     * @param groupIndex Index of the group view in the {@link #items} collection. If not specified, the group will be added at the end.\n     */\n    _registerFocusableItemsGroup(groupView, groupIndex) {\n        Array.from(groupView.items).forEach((child, childIndex) => {\n            const registeredChildIndex = typeof groupIndex !== 'undefined' ? groupIndex + childIndex : undefined;\n            this._registerFocusableListItem(child, registeredChildIndex);\n        });\n        const groupItemsChangeCallback = this._getOnGroupItemsChangeCallback(groupView);\n        // Cache the reference to the callback in case the group is removed (see _deregisterFocusableItemsGroup()).\n        this._listItemGroupToChangeListeners.set(groupView, groupItemsChangeCallback);\n        groupView.items.on('change', groupItemsChangeCallback);\n    }\n    /**\n     * Removes a list item group view (and its children) from the focus tracker.\n     *\n     * @param groupView The group view to be removed.\n     */\n    _deregisterFocusableItemsGroup(groupView) {\n        for (const child of groupView.items) {\n            this._deregisterFocusableListItem(child);\n        }\n        groupView.items.off('change', this._listItemGroupToChangeListeners.get(groupView));\n        this._listItemGroupToChangeListeners.delete(groupView);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/button/splitbuttonview\n */\nimport View from '../../view';\nimport ButtonView from '../../button/buttonview';\nimport { KeystrokeHandler, FocusTracker } from '@ckeditor/ckeditor5-utils';\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\nimport '../../../theme/components/dropdown/splitbutton.css';\n/**\n * The split button view class.\n *\n * ```ts\n * const view = new SplitButtonView();\n *\n * view.set( {\n * \tlabel: 'A button',\n * \tkeystroke: 'Ctrl+B',\n * \ttooltip: true\n * } );\n *\n * view.render();\n *\n * document.body.append( view.element );\n * ```\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n */\nexport default class SplitButtonView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale, actionButton) {\n        super(locale);\n        const bind = this.bindTemplate;\n        // Implement the Button interface.\n        this.set('class', undefined);\n        this.set('labelStyle', undefined);\n        this.set('icon', undefined);\n        this.set('isEnabled', true);\n        this.set('isOn', false);\n        this.set('isToggleable', false);\n        this.set('isVisible', true);\n        this.set('keystroke', undefined);\n        this.set('withKeystroke', false);\n        this.set('label', undefined);\n        this.set('tabindex', -1);\n        this.set('tooltip', false);\n        this.set('tooltipPosition', 's');\n        this.set('type', 'button');\n        this.set('withText', false);\n        this.children = this.createCollection();\n        this.actionView = this._createActionView(actionButton);\n        this.arrowView = this._createArrowView();\n        this.keystrokes = new KeystrokeHandler();\n        this.focusTracker = new FocusTracker();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-splitbutton',\n                    bind.to('class'),\n                    bind.if('isVisible', 'ck-hidden', value => !value),\n                    this.arrowView.bindTemplate.if('isOn', 'ck-splitbutton_open')\n                ]\n            },\n            children: this.children\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.children.add(this.actionView);\n        this.children.add(this.arrowView);\n        this.focusTracker.add(this.actionView.element);\n        this.focusTracker.add(this.arrowView.element);\n        this.keystrokes.listenTo(this.element);\n        // Overrides toolbar focus cycling behavior.\n        this.keystrokes.set('arrowright', (evt, cancel) => {\n            if (this.focusTracker.focusedElement === this.actionView.element) {\n                this.arrowView.focus();\n                cancel();\n            }\n        });\n        // Overrides toolbar focus cycling behavior.\n        this.keystrokes.set('arrowleft', (evt, cancel) => {\n            if (this.focusTracker.focusedElement === this.arrowView.element) {\n                this.actionView.focus();\n                cancel();\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Focuses the {@link module:ui/button/buttonview~ButtonView#element} of the action part of split button.\n     */\n    focus() {\n        this.actionView.focus();\n    }\n    /**\n     * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #actionView} and binds it with main split button\n     * attributes.\n     */\n    _createActionView(actionButton) {\n        const actionView = actionButton || new ButtonView();\n        if (!actionButton) {\n            actionView.bind('icon', 'isEnabled', 'isOn', 'isToggleable', 'keystroke', 'label', 'tabindex', 'tooltip', 'tooltipPosition', 'type', 'withText').to(this);\n        }\n        actionView.extendTemplate({\n            attributes: {\n                class: 'ck-splitbutton__action'\n            }\n        });\n        actionView.delegate('execute').to(this);\n        return actionView;\n    }\n    /**\n     * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #arrowView} and binds it with main split button\n     * attributes.\n     */\n    _createArrowView() {\n        const arrowView = new ButtonView();\n        const bind = arrowView.bindTemplate;\n        arrowView.icon = dropdownArrowIcon;\n        arrowView.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-splitbutton__arrow'\n                ],\n                'data-cke-tooltip-disabled': bind.to('isOn'),\n                'aria-haspopup': true,\n                'aria-expanded': bind.to('isOn', value => String(value))\n            }\n        });\n        arrowView.bind('isEnabled').to(this);\n        arrowView.bind('label').to(this);\n        arrowView.bind('tooltip').to(this);\n        arrowView.delegate('execute').to(this, 'open');\n        return arrowView;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/utils\n */\nimport DropdownPanelView from './dropdownpanelview';\nimport DropdownView from './dropdownview';\nimport DropdownButtonView from './button/dropdownbuttonview';\nimport ToolbarView from '../toolbar/toolbarview';\nimport ListView from '../list/listview';\nimport ListItemView from '../list/listitemview';\nimport ListSeparatorView from '../list/listseparatorview';\nimport ButtonView from '../button/buttonview';\nimport SplitButtonView from './button/splitbuttonview';\nimport SwitchButtonView from '../button/switchbuttonview';\nimport ViewCollection from '../viewcollection';\nimport clickOutsideHandler from '../bindings/clickoutsidehandler';\nimport { global, priorities, logWarning } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/dropdown/toolbardropdown.css';\nimport '../../theme/components/dropdown/listdropdown.css';\nimport ListItemGroupView from '../list/listitemgroupview';\n/**\n * A helper for creating dropdowns. It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown},\n * with a {@link module:ui/dropdown/button/dropdownbutton~DropdownButton button},\n * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView panel} and all standard dropdown's behaviors.\n *\n * # Creating dropdowns\n *\n * By default, the default {@link module:ui/dropdown/button/dropdownbuttonview~DropdownButtonView} class is used as\n * definition of the button:\n *\n * ```ts\n * const dropdown = createDropdown( model );\n *\n * // Configure dropdown's button properties:\n * dropdown.buttonView.set( {\n * \tlabel: 'A dropdown',\n * \twithText: true\n * } );\n *\n * dropdown.render();\n *\n * // Will render a dropdown labeled \"A dropdown\" with an empty panel.\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * You can also provide other button views (they need to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface). For instance, you can use\n * {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} to create a dropdown with a split button.\n *\n * ```ts\n * const dropdown = createDropdown( locale, SplitButtonView );\n *\n * // Configure dropdown's button properties:\n * dropdown.buttonView.set( {\n * \tlabel: 'A dropdown',\n * \twithText: true\n * } );\n *\n * dropdown.buttonView.on( 'execute', () => {\n * \t// Add the behavior of the \"action part\" of the split button.\n * \t// Split button consists of the \"action part\" and \"arrow part\".\n * \t// The arrow opens the dropdown while the action part can have some other behavior.\n * } );\n *\n * dropdown.render();\n *\n * // Will render a dropdown labeled \"A dropdown\" with an empty panel.\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * # Adding content to the dropdown's panel\n *\n * The content of the panel can be inserted directly into the `dropdown.panelView.element`:\n *\n * ```ts\n * dropdown.panelView.element.textContent = 'Content of the panel';\n * ```\n *\n * However, most of the time you will want to add there either a {@link module:ui/list/listview~ListView list of options}\n * or a list of buttons (i.e. a {@link module:ui/toolbar/toolbarview~ToolbarView toolbar}).\n * To simplify the task, you can use, respectively, {@link module:ui/dropdown/utils~addListToDropdown} or\n * {@link module:ui/dropdown/utils~addToolbarToDropdown} utils.\n *\n * @param locale The locale instance.\n * @param ButtonClassOrInstance The dropdown button view class. Needs to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface.\n * @returns The dropdown view instance.\n */\nexport function createDropdown(locale, ButtonClassOrInstance = DropdownButtonView) {\n    const buttonView = typeof ButtonClassOrInstance == 'function' ? new ButtonClassOrInstance(locale) : ButtonClassOrInstance;\n    const panelView = new DropdownPanelView(locale);\n    const dropdownView = new DropdownView(locale, buttonView, panelView);\n    buttonView.bind('isEnabled').to(dropdownView);\n    if (buttonView instanceof SplitButtonView) {\n        buttonView.arrowView.bind('isOn').to(dropdownView, 'isOpen');\n    }\n    else {\n        buttonView.bind('isOn').to(dropdownView, 'isOpen');\n    }\n    addDefaultBehavior(dropdownView);\n    return dropdownView;\n}\n/**\n * Adds an instance of {@link module:ui/toolbar/toolbarview~ToolbarView} to a dropdown.\n *\n * ```ts\n * const buttonsCreator = () => {\n * \tconst buttons = [];\n *\n * \t// Either create a new ButtonView instance or create existing.\n * \tbuttons.push( new ButtonView() );\n * \tbuttons.push( editor.ui.componentFactory.create( 'someButton' ) );\n * };\n *\n * const dropdown = createDropdown( locale );\n *\n * addToolbarToDropdown( dropdown, buttonsCreator, { isVertical: true } );\n *\n * // Will render a vertical button dropdown labeled \"A button dropdown\"\n * // with a button group in the panel containing two buttons.\n * // Buttons inside the dropdown will be created on first dropdown panel open.\n * dropdown.render()\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * **Note:** To improve the accessibility, you can tell the dropdown to focus the first active button of the toolbar when the dropdown\n * {@link module:ui/dropdown/dropdownview~DropdownView#isOpen gets open}. See the documentation of `options` to learn more.\n *\n * **Note:** Toolbar view will be created on first open of the dropdown.\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * @param dropdownView A dropdown instance to which `ToolbarView` will be added.\n * @param options.enableActiveItemFocusOnDropdownOpen When set `true`, the focus will automatically move to the first\n * active {@link module:ui/toolbar/toolbarview~ToolbarView#items item} of the toolbar upon\n * {@link module:ui/dropdown/dropdownview~DropdownView#isOpen opening} the dropdown. Active items are those with the `isOn` property set\n * `true` (for instance {@link module:ui/button/buttonview~ButtonView buttons}). If no active items is found, the toolbar will be focused\n * as a whole resulting in the focus moving to its first focusable item (default behavior of\n * {@link module:ui/dropdown/dropdownview~DropdownView}).\n * @param options.ariaLabel Label used by assistive technologies to describe toolbar element.\n * @param options.maxWidth The maximum width of the toolbar element.\n * Details: {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth}.\n * @param options.class An additional CSS class added to the toolbar element.\n * @param options.isCompact When set true, makes the toolbar look compact with toolbar element.\n * @param options.isVertical Controls the orientation of toolbar items.\n */\nexport function addToolbarToDropdown(dropdownView, buttonsOrCallback, options = {}) {\n    dropdownView.extendTemplate({\n        attributes: {\n            class: ['ck-toolbar-dropdown']\n        }\n    });\n    if (dropdownView.isOpen) {\n        addToolbarToOpenDropdown(dropdownView, buttonsOrCallback, options);\n    }\n    else {\n        dropdownView.once('change:isOpen', () => addToolbarToOpenDropdown(dropdownView, buttonsOrCallback, options), { priority: 'highest' });\n    }\n    if (options.enableActiveItemFocusOnDropdownOpen) {\n        // Accessibility: Focus the first active button in the toolbar when the dropdown gets open.\n        focusChildOnDropdownOpen(dropdownView, () => dropdownView.toolbarView.items.find((item) => item.isOn));\n    }\n}\n/**\n * Adds an instance of {@link module:ui/toolbar/toolbarview~ToolbarView} to a dropdown.\n */\nfunction addToolbarToOpenDropdown(dropdownView, buttonsOrCallback, options) {\n    const locale = dropdownView.locale;\n    const t = locale.t;\n    const toolbarView = dropdownView.toolbarView = new ToolbarView(locale);\n    const buttons = typeof buttonsOrCallback == 'function' ? buttonsOrCallback() : buttonsOrCallback;\n    toolbarView.ariaLabel = options.ariaLabel || t('Dropdown toolbar');\n    if (options.maxWidth) {\n        toolbarView.maxWidth = options.maxWidth;\n    }\n    if (options.class) {\n        toolbarView.class = options.class;\n    }\n    if (options.isCompact) {\n        toolbarView.isCompact = options.isCompact;\n    }\n    if (options.isVertical) {\n        toolbarView.isVertical = true;\n    }\n    if (buttons instanceof ViewCollection) {\n        toolbarView.items.bindTo(buttons).using(item => item);\n    }\n    else {\n        toolbarView.items.addMany(buttons);\n    }\n    dropdownView.panelView.children.add(toolbarView);\n    toolbarView.items.delegate('execute').to(dropdownView);\n}\n/**\n * Adds an instance of {@link module:ui/list/listview~ListView} to a dropdown.\n *\n * ```ts\n * const items = new Collection();\n *\n * items.add( {\n * \ttype: 'button',\n * \tmodel: new Model( {\n * \t\twithText: true,\n * \t\tlabel: 'First item',\n * \t\tlabelStyle: 'color: red'\n * \t} )\n * } );\n *\n * items.add( {\n * \t type: 'button',\n * \t model: new Model( {\n * \t\twithText: true,\n * \t\tlabel: 'Second item',\n * \t\tlabelStyle: 'color: green',\n * \t\tclass: 'foo'\n * \t} )\n * } );\n *\n * const dropdown = createDropdown( locale );\n *\n * addListToDropdown( dropdown, items );\n *\n * // Will render a dropdown with a list in the panel containing two items.\n * dropdown.render()\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * The `items` collection passed to this methods controls the presence and attributes of respective\n * {@link module:ui/list/listitemview~ListItemView list items}.\n *\n * **Note:** To improve the accessibility, when a list is added to the dropdown using this helper the dropdown will automatically attempt\n * to focus the first active item (a host to a {@link module:ui/button/buttonview~ButtonView} with\n * {@link module:ui/button/buttonview~ButtonView#isOn} set `true`) or the very first item when none are active.\n *\n * **Note:** List view will be created on first open of the dropdown.\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:list/list~List}.\n *\n * @param dropdownView A dropdown instance to which `ListVIew` will be added.\n * @param itemsOrCallback A collection of the list item definitions or a callback returning a list item definitions to populate the list.\n * @param options.ariaLabel Label used by assistive technologies to describe list element.\n * @param options.role Will be reflected by the `role` DOM attribute in `ListVIew` and used by assistive technologies.\n */\nexport function addListToDropdown(dropdownView, itemsOrCallback, options = {}) {\n    if (dropdownView.isOpen) {\n        addListToOpenDropdown(dropdownView, itemsOrCallback, options);\n    }\n    else {\n        dropdownView.once('change:isOpen', () => addListToOpenDropdown(dropdownView, itemsOrCallback, options), { priority: 'highest' });\n    }\n    // Accessibility: Focus the first active button in the list when the dropdown gets open.\n    focusChildOnDropdownOpen(dropdownView, () => dropdownView.listView.items.find(item => {\n        if (item instanceof ListItemView) {\n            return item.children.first.isOn;\n        }\n        return false;\n    }));\n}\n/**\n * Adds an instance of {@link module:ui/list/listview~ListView} to a dropdown.\n */\nfunction addListToOpenDropdown(dropdownView, itemsOrCallback, options) {\n    const locale = dropdownView.locale;\n    const listView = dropdownView.listView = new ListView(locale);\n    const items = typeof itemsOrCallback == 'function' ? itemsOrCallback() : itemsOrCallback;\n    listView.ariaLabel = options.ariaLabel;\n    listView.role = options.role;\n    bindViewCollectionItemsToDefinitions(dropdownView, listView.items, items, locale);\n    dropdownView.panelView.children.add(listView);\n    listView.items.delegate('execute').to(dropdownView);\n}\n/**\n * A helper to be used on an existing {@link module:ui/dropdown/dropdownview~DropdownView} that focuses\n * a specific child in DOM when the dropdown {@link module:ui/dropdown/dropdownview~DropdownView#isOpen gets open}.\n *\n * @param dropdownView A dropdown instance to which the focus behavior will be added.\n * @param childSelectorCallback A callback executed when the dropdown gets open. It should return a {@link module:ui/view~View}\n * instance (child of {@link module:ui/dropdown/dropdownview~DropdownView#panelView}) that will get focused or a falsy value.\n * If falsy value is returned, a default behavior of the dropdown will engage focusing the first focusable child in\n * the {@link module:ui/dropdown/dropdownview~DropdownView#panelView}.\n */\nexport function focusChildOnDropdownOpen(dropdownView, childSelectorCallback) {\n    dropdownView.on('change:isOpen', () => {\n        if (!dropdownView.isOpen) {\n            return;\n        }\n        const childToFocus = childSelectorCallback();\n        if (!childToFocus) {\n            return;\n        }\n        if (typeof childToFocus.focus === 'function') {\n            childToFocus.focus();\n        }\n        else {\n            /**\n             * The child view of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown} is missing the `focus()` method\n             * and could not be focused when the dropdown got {@link module:ui/dropdown/dropdownview~DropdownView#isOpen open}.\n             *\n             * Making the content of a dropdown focusable in this case greatly improves the accessibility. Please make the view instance\n             * implements the {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable focusable interface} for the best user\n             * experience.\n             *\n             * @error ui-dropdown-focus-child-on-open-child-missing-focus\n             * @param {module:ui/view~View} view\n             */\n            logWarning('ui-dropdown-focus-child-on-open-child-missing-focus', { view: childToFocus });\n        }\n        // * Let the panel show up first (do not focus an invisible element).\n        // * Execute after focusDropdownPanelOnOpen(). See focusDropdownPanelOnOpen() to learn more.\n    }, { priority: priorities.low - 10 });\n}\n/**\n * Add a set of default behaviors to dropdown view.\n */\nfunction addDefaultBehavior(dropdownView) {\n    closeDropdownOnClickOutside(dropdownView);\n    closeDropdownOnExecute(dropdownView);\n    closeDropdownOnBlur(dropdownView);\n    focusDropdownContentsOnArrows(dropdownView);\n    focusDropdownButtonOnClose(dropdownView);\n    focusDropdownPanelOnOpen(dropdownView);\n}\n/**\n * Adds a behavior to a dropdownView that closes opened dropdown when user clicks outside the dropdown.\n */\nfunction closeDropdownOnClickOutside(dropdownView) {\n    dropdownView.on('render', () => {\n        clickOutsideHandler({\n            emitter: dropdownView,\n            activator: () => dropdownView.isOpen,\n            callback: () => {\n                dropdownView.isOpen = false;\n            },\n            contextElements: () => [\n                dropdownView.element,\n                ...dropdownView.focusTracker._elements\n            ]\n        });\n    });\n}\n/**\n * Adds a behavior to a dropdownView that closes the dropdown view on \"execute\" event.\n */\nfunction closeDropdownOnExecute(dropdownView) {\n    // Close the dropdown when one of the list items has been executed.\n    dropdownView.on('execute', evt => {\n        // Toggling a switch button view should not close the dropdown.\n        if (evt.source instanceof SwitchButtonView) {\n            return;\n        }\n        dropdownView.isOpen = false;\n    });\n}\n/**\n * Adds a behavior to a dropdown view that closes opened dropdown when it loses focus.\n */\nfunction closeDropdownOnBlur(dropdownView) {\n    dropdownView.focusTracker.on('change:isFocused', (evt, name, isFocused) => {\n        if (dropdownView.isOpen && !isFocused) {\n            dropdownView.isOpen = false;\n        }\n    });\n}\n/**\n * Adds a behavior to a dropdownView that focuses the dropdown's panel view contents on keystrokes.\n */\nfunction focusDropdownContentsOnArrows(dropdownView) {\n    // If the dropdown panel is already open, the arrow down key should focus the first child of the #panelView.\n    dropdownView.keystrokes.set('arrowdown', (data, cancel) => {\n        if (dropdownView.isOpen) {\n            dropdownView.panelView.focus();\n            cancel();\n        }\n    });\n    // If the dropdown panel is already open, the arrow up key should focus the last child of the #panelView.\n    dropdownView.keystrokes.set('arrowup', (data, cancel) => {\n        if (dropdownView.isOpen) {\n            dropdownView.panelView.focusLast();\n            cancel();\n        }\n    });\n}\n/**\n * Adds a behavior that focuses the #buttonView when the dropdown was closed but focus was within the #panelView element.\n * This makes sure the focus is never lost.\n */\nfunction focusDropdownButtonOnClose(dropdownView) {\n    dropdownView.on('change:isOpen', (evt, name, isOpen) => {\n        if (isOpen) {\n            return;\n        }\n        const element = dropdownView.panelView.element;\n        // If the dropdown was closed, move the focus back to the button (#12125).\n        // Don't touch the focus, if it moved somewhere else (e.g. moved to the editing root on #execute) (#12178).\n        // Note: Don't use the state of the DropdownView#focusTracker here. It fires #blur with the timeout.\n        if (element && element.contains(global.document.activeElement)) {\n            dropdownView.buttonView.focus();\n        }\n    });\n}\n/**\n * Adds a behavior that focuses the #panelView when dropdown gets open (accessibility).\n */\nfunction focusDropdownPanelOnOpen(dropdownView) {\n    dropdownView.on('change:isOpen', (evt, name, isOpen) => {\n        if (!isOpen) {\n            return;\n        }\n        // Focus the first item in the dropdown when the dropdown opened.\n        dropdownView.panelView.focus();\n        // * Let the panel show up first (do not focus an invisible element).\n        // * Also, execute before focusChildOnDropdownOpen() to make sure this helper does not break the\n        //   focus of a specific child by kicking in too late and resetting the focus in the panel.\n    }, { priority: 'low' });\n}\n/**\n * This helper populates a dropdown list with items and groups according to the\n * collection of item definitions. A permanent binding is created in this process allowing\n * dynamic management of the dropdown list content.\n *\n * @param dropdownView\n * @param listItems\n * @param definitions\n * @param locale\n */\nfunction bindViewCollectionItemsToDefinitions(dropdownView, listItems, definitions, locale) {\n    listItems.bindTo(definitions).using(def => {\n        if (def.type === 'separator') {\n            return new ListSeparatorView(locale);\n        }\n        else if (def.type === 'group') {\n            const groupView = new ListItemGroupView(locale);\n            groupView.set({ label: def.label });\n            bindViewCollectionItemsToDefinitions(dropdownView, groupView.items, def.items, locale);\n            groupView.items.delegate('execute').to(dropdownView);\n            return groupView;\n        }\n        else if (def.type === 'button' || def.type === 'switchbutton') {\n            const listItemView = new ListItemView(locale);\n            let buttonView;\n            if (def.type === 'button') {\n                buttonView = new ButtonView(locale);\n                buttonView.extendTemplate({\n                    attributes: {\n                        'aria-checked': buttonView.bindTemplate.to('isOn')\n                    }\n                });\n            }\n            else {\n                buttonView = new SwitchButtonView(locale);\n            }\n            // Bind all model properties to the button view.\n            buttonView.bind(...Object.keys(def.model)).to(def.model);\n            buttonView.delegate('execute').to(listItemView);\n            listItemView.children.add(buttonView);\n            return listItemView;\n        }\n        return null;\n    });\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/labeledfield/utils\n */\nimport InputTextView from '../inputtext/inputtextview';\nimport InputNumberView from '../inputnumber/inputnumberview';\nimport TextareaView from '../textarea/textareaview';\nimport { createDropdown } from '../dropdown/utils';\n/**\n * A helper for creating labeled inputs.\n *\n * It creates an instance of a {@link module:ui/inputtext/inputtextview~InputTextView input text} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in DOM.\n *\n * The helper does the following:\n *\n * * It sets input's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isReadOnly` to the labeled view.\n * * It binds input's `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when user starts typing in the input.\n *\n * Usage:\n *\n * ```ts\n * const labeledInputView = new LabeledFieldView( locale, createLabeledInputText );\n * console.log( labeledInputView.fieldView ); // A text input instance.\n * ```\n *\n * @param labeledFieldView The instance of the labeled field view.\n * @param viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view's label} and the input.\n * @param statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view's status} and the input.\n * @returns The input text view instance.\n */\nconst createLabeledInputText = (labeledFieldView, viewUid, statusUid) => {\n    const inputView = new InputTextView(labeledFieldView.locale);\n    inputView.set({\n        id: viewUid,\n        ariaDescribedById: statusUid\n    });\n    inputView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', value => !value);\n    inputView.bind('hasError').to(labeledFieldView, 'errorText', value => !!value);\n    inputView.on('input', () => {\n        // UX: Make the error text disappear and disable the error indicator as the user\n        // starts fixing the errors.\n        labeledFieldView.errorText = null;\n    });\n    labeledFieldView.bind('isEmpty', 'isFocused', 'placeholder').to(inputView);\n    return inputView;\n};\n/**\n * A helper for creating labeled number inputs.\n *\n * It creates an instance of a {@link module:ui/inputnumber/inputnumberview~InputNumberView input number} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in DOM.\n *\n * The helper does the following:\n *\n * * It sets input's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isReadOnly` to the labeled view.\n * * It binds input's `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when user starts typing in the input.\n *\n * Usage:\n *\n * ```ts\n * const labeledInputView = new LabeledFieldView( locale, createLabeledInputNumber );\n * console.log( labeledInputView.fieldView ); // A number input instance.\n * ```\n *\n * @param labeledFieldView The instance of the labeled field view.\n * @param viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view's label} and the input.\n * @param statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view's status} and the input.\n * @returns The input number view instance.\n */\nconst createLabeledInputNumber = (labeledFieldView, viewUid, statusUid) => {\n    const inputView = new InputNumberView(labeledFieldView.locale);\n    inputView.set({\n        id: viewUid,\n        ariaDescribedById: statusUid,\n        inputMode: 'numeric'\n    });\n    inputView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', value => !value);\n    inputView.bind('hasError').to(labeledFieldView, 'errorText', value => !!value);\n    inputView.on('input', () => {\n        // UX: Make the error text disappear and disable the error indicator as the user\n        // starts fixing the errors.\n        labeledFieldView.errorText = null;\n    });\n    labeledFieldView.bind('isEmpty', 'isFocused', 'placeholder').to(inputView);\n    return inputView;\n};\n/**\n * A helper for creating labeled textarea.\n *\n * It creates an instance of a {@link module:ui/textarea/textareaview~TextareaView textarea} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in DOM.\n *\n * The helper does the following:\n *\n * * It sets textarea's `id` and `ariaDescribedById` attributes.\n * * It binds textarea's `isReadOnly` to the labeled view.\n * * It binds textarea's `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when user starts typing in the textarea.\n *\n * Usage:\n *\n * ```ts\n * const labeledTextarea = new LabeledFieldView( locale, createLabeledTextarea );\n * console.log( labeledTextarea.fieldView ); // A textarea instance.\n * ```\n *\n * @param labeledFieldView The instance of the labeled field view.\n * @param viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view's label} and the textarea.\n * @param statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view's status} and the textarea.\n * @returns The textarea view instance.\n */\nconst createLabeledTextarea = (labeledFieldView, viewUid, statusUid) => {\n    const textareaView = new TextareaView(labeledFieldView.locale);\n    textareaView.set({\n        id: viewUid,\n        ariaDescribedById: statusUid\n    });\n    textareaView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', value => !value);\n    textareaView.bind('hasError').to(labeledFieldView, 'errorText', value => !!value);\n    textareaView.on('input', () => {\n        // UX: Make the error text disappear and disable the error indicator as the user\n        // starts fixing the errors.\n        labeledFieldView.errorText = null;\n    });\n    labeledFieldView.bind('isEmpty', 'isFocused', 'placeholder').to(textareaView);\n    return textareaView;\n};\n/**\n * A helper for creating labeled dropdowns.\n *\n * It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled field view}.\n *\n * The helper does the following:\n *\n * * It sets dropdown's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isEnabled` to the labeled view.\n *\n * Usage:\n *\n * ```ts\n * const labeledInputView = new LabeledFieldView( locale, createLabeledDropdown );\n * console.log( labeledInputView.fieldView ); // A dropdown instance.\n * ```\n *\n * @param labeledFieldView The instance of the labeled field view.\n * @param viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view label} and the dropdown.\n * @param statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view status} and the dropdown.\n * @returns The dropdown view instance.\n */\nconst createLabeledDropdown = (labeledFieldView, viewUid, statusUid) => {\n    const dropdownView = createDropdown(labeledFieldView.locale);\n    dropdownView.set({\n        id: viewUid,\n        ariaDescribedById: statusUid\n    });\n    dropdownView.bind('isEnabled').to(labeledFieldView);\n    return dropdownView;\n};\nexport { createLabeledInputNumber, createLabeledInputText, createLabeledTextarea, createLabeledDropdown };\n", "// Clamps a value between an upper and lower bound.\n// We use ternary operators because it makes the minified code\n// 2 times shorter then `Math.min(Math.max(a,b),c)`\nexport const clamp = (number: number, min = 0, max = 1): number => {\n  return number > max ? max : number < min ? min : number;\n};\n\nexport const round = (number: number, digits = 0, base = Math.pow(10, digits)): number => {\n  return Math.round(base * number) / base;\n};\n", "import { RgbaColor, RgbColor, HslaColor, HslColor, HsvaColor, HsvColor } from '../types';\nimport { round } from './math.js';\n\n/**\n * Valid CSS <angle> units.\n * https://developer.mozilla.org/en-US/docs/Web/CSS/angle\n */\nconst angleUnits: Record<string, number> = {\n  grad: 360 / 400,\n  turn: 360,\n  rad: 360 / (Math.PI * 2)\n};\n\nexport const hexToHsva = (hex: string): HsvaColor => rgbaToHsva(hexToRgba(hex));\n\nexport const hexToRgba = (hex: string): RgbaColor => {\n  if (hex[0] === '#') hex = hex.substring(1);\n\n  if (hex.length < 6) {\n    return {\n      r: parseInt(hex[0] + hex[0], 16),\n      g: parseInt(hex[1] + hex[1], 16),\n      b: parseInt(hex[2] + hex[2], 16),\n      a: hex.length === 4 ? round(parseInt(hex[3] + hex[3], 16) / 255, 2) : 1\n    };\n  }\n\n  return {\n    r: parseInt(hex.substring(0, 2), 16),\n    g: parseInt(hex.substring(2, 4), 16),\n    b: parseInt(hex.substring(4, 6), 16),\n    a: hex.length === 8 ? round(parseInt(hex.substring(6, 8), 16) / 255, 2) : 1\n  };\n};\n\nexport const parseHue = (value: string, unit = 'deg'): number => {\n  return Number(value) * (angleUnits[unit] || 1);\n};\n\nexport const hslaStringToHsva = (hslString: string): HsvaColor => {\n  const matcher =\n    /hsla?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  const match = matcher.exec(hslString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return hslaToHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    l: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1)\n  });\n};\n\nexport const hslStringToHsva = hslaStringToHsva;\n\nexport const hslaToHsva = ({ h, s, l, a }: HslaColor): HsvaColor => {\n  s *= (l < 50 ? l : 100 - l) / 100;\n\n  return {\n    h: h,\n    s: s > 0 ? ((2 * s) / (l + s)) * 100 : 0,\n    v: l + s,\n    a\n  };\n};\n\nexport const hsvaToHex = (hsva: HsvaColor): string => rgbaToHex(hsvaToRgba(hsva));\n\nexport const hsvaToHsla = ({ h, s, v, a }: HsvaColor): HslaColor => {\n  const hh = ((200 - s) * v) / 100;\n\n  return {\n    h: round(h),\n    s: round(hh > 0 && hh < 200 ? ((s * v) / 100 / (hh <= 100 ? hh : 200 - hh)) * 100 : 0),\n    l: round(hh / 2),\n    a: round(a, 2)\n  };\n};\n\nexport const hsvaToHsvString = (hsva: HsvaColor): string => {\n  const { h, s, v } = roundHsva(hsva);\n  return `hsv(${h}, ${s}%, ${v}%)`;\n};\n\nexport const hsvaToHsvaString = (hsva: HsvaColor): string => {\n  const { h, s, v, a } = roundHsva(hsva);\n  return `hsva(${h}, ${s}%, ${v}%, ${a})`;\n};\n\nexport const hsvaToHslString = (hsva: HsvaColor): string => {\n  const { h, s, l } = hsvaToHsla(hsva);\n  return `hsl(${h}, ${s}%, ${l}%)`;\n};\n\nexport const hsvaToHslaString = (hsva: HsvaColor): string => {\n  const { h, s, l, a } = hsvaToHsla(hsva);\n  return `hsla(${h}, ${s}%, ${l}%, ${a})`;\n};\n\nexport const hsvaToRgba = ({ h, s, v, a }: HsvaColor): RgbaColor => {\n  h = (h / 360) * 6;\n  s = s / 100;\n  v = v / 100;\n\n  const hh = Math.floor(h),\n    b = v * (1 - s),\n    c = v * (1 - (h - hh) * s),\n    d = v * (1 - (1 - h + hh) * s),\n    module = hh % 6;\n\n  return {\n    r: round([v, c, b, b, d, v][module] * 255),\n    g: round([d, v, v, c, b, b][module] * 255),\n    b: round([b, b, d, v, v, c][module] * 255),\n    a: round(a, 2)\n  };\n};\n\nexport const hsvaToRgbString = (hsva: HsvaColor): string => {\n  const { r, g, b } = hsvaToRgba(hsva);\n  return `rgb(${r}, ${g}, ${b})`;\n};\n\nexport const hsvaToRgbaString = (hsva: HsvaColor): string => {\n  const { r, g, b, a } = hsvaToRgba(hsva);\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n};\n\nexport const hsvaStringToHsva = (hsvString: string): HsvaColor => {\n  const matcher =\n    /hsva?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  const match = matcher.exec(hsvString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return roundHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    v: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1)\n  });\n};\n\nexport const hsvStringToHsva = hsvaStringToHsva;\n\nexport const rgbaStringToHsva = (rgbaString: string): HsvaColor => {\n  const matcher =\n    /rgba?\\(?\\s*(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  const match = matcher.exec(rgbaString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return rgbaToHsva({\n    r: Number(match[1]) / (match[2] ? 100 / 255 : 1),\n    g: Number(match[3]) / (match[4] ? 100 / 255 : 1),\n    b: Number(match[5]) / (match[6] ? 100 / 255 : 1),\n    a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? 100 : 1)\n  });\n};\n\nexport const rgbStringToHsva = rgbaStringToHsva;\n\nconst format = (number: number) => {\n  const hex = number.toString(16);\n  return hex.length < 2 ? '0' + hex : hex;\n};\n\nexport const rgbaToHex = ({ r, g, b, a }: RgbaColor): string => {\n  const alphaHex = a < 1 ? format(round(a * 255)) : '';\n  return '#' + format(r) + format(g) + format(b) + alphaHex;\n};\n\nexport const rgbaToHsva = ({ r, g, b, a }: RgbaColor): HsvaColor => {\n  const max = Math.max(r, g, b);\n  const delta = max - Math.min(r, g, b);\n\n  // prettier-ignore\n  const hh = delta\n    ? max === r\n      ? (g - b) / delta\n      : max === g\n        ? 2 + (b - r) / delta\n        : 4 + (r - g) / delta\n    : 0;\n\n  return {\n    h: round(60 * (hh < 0 ? hh + 6 : hh)),\n    s: round(max ? (delta / max) * 100 : 0),\n    v: round((max / 255) * 100),\n    a\n  };\n};\n\nexport const roundHsva = (hsva: HsvaColor): HsvaColor => ({\n  h: round(hsva.h),\n  s: round(hsva.s),\n  v: round(hsva.v),\n  a: round(hsva.a, 2)\n});\n\nexport const rgbaToRgb = ({ r, g, b }: RgbaColor): RgbColor => ({ r, g, b });\n\nexport const hslaToHsl = ({ h, s, l }: HslaColor): HslColor => ({ h, s, l });\n\nexport const hsvaToHsv = (hsva: HsvaColor): HsvColor => {\n  const { h, s, v } = roundHsva(hsva);\n  return { h, s, v };\n};\n", "import { hexToRgba } from './convert.js';\nimport type { ObjectColor } from '../types';\n\nexport const equalColorObjects = (first: ObjectColor, second: ObjectColor): boolean => {\n  if (first === second) return true;\n\n  for (const prop in first) {\n    // The following allows for a type-safe calling of this function (first & second have to be HSL, HSV, or RGB)\n    // with type-unsafe iterating over object keys. TS does not allow this without an index (`[key: string]: number`)\n    // on an object to define how iteration is normally done. To ensure extra keys are not allowed on our types,\n    // we must cast our object to unknown (as RGB demands `r` be a key, while `Record<string, x>` does not care if\n    // there is or not), and then as a type TS can iterate over.\n    if (\n      (first as unknown as Record<string, number>)[prop] !==\n      (second as unknown as Record<string, number>)[prop]\n    )\n      return false;\n  }\n\n  return true;\n};\n\nexport const equalColorString = (first: string, second: string): boolean => {\n  return first.replace(/\\s/g, '') === second.replace(/\\s/g, '');\n};\n\nexport const equalHex = (first: string, second: string): boolean => {\n  if (first.toLowerCase() === second.toLowerCase()) return true;\n\n  // To compare colors like `#FFF` and `ffffff` we convert them into RGB objects\n  return equalColorObjects(hexToRgba(first), hexToRgba(second));\n};\n", "const cache: Record<string, HTMLTemplateElement> = {};\n\nexport const tpl = (html: string): HTMLTemplateElement => {\n  let template = cache[html];\n  if (!template) {\n    template = document.createElement('template');\n    template.innerHTML = html;\n    cache[html] = template;\n  }\n  return template;\n};\n\nexport const fire = (target: HTMLElement, type: string, detail: Record<string, unknown>): void => {\n  target.dispatchEvent(\n    new CustomEvent(type, {\n      bubbles: true,\n      detail\n    })\n  );\n};\n", "import type { HsvaColor } from '../types.js';\nimport { fire, tpl } from '../utils/dom.js';\nimport { clamp } from '../utils/math.js';\n\nexport interface Offset {\n  x: number;\n  y: number;\n}\n\nlet hasTouched = false;\n\n// Check if an event was triggered by touch\nconst isTouch = (e: Event): e is TouchEvent => 'touches' in e;\n\n// Prevent mobile browsers from handling mouse events (conflicting with touch ones).\n// If we detected a touch interaction before, we prefer reacting to touch events only.\nconst isValid = (event: Event): boolean => {\n  if (hasTouched && !isTouch(event)) return false;\n  if (!hasTouched) hasTouched = isTouch(event);\n  return true;\n};\n\nconst pointerMove = (target: Slider, event: Event): void => {\n  const pointer = isTouch(event) ? event.touches[0] : (event as MouseEvent);\n  const rect = target.el.getBoundingClientRect();\n\n  fire(\n    target.el,\n    'move',\n    target.getMove({\n      x: clamp((pointer.pageX - (rect.left + window.pageXOffset)) / rect.width),\n      y: clamp((pointer.pageY - (rect.top + window.pageYOffset)) / rect.height)\n    })\n  );\n};\n\nconst keyMove = (target: Slider, event: KeyboardEvent): void => {\n  // We use `keyCode` instead of `key` to reduce the size of the library.\n  const keyCode = event.keyCode;\n  // Ignore all keys except arrow ones, Page Up, Page Down, Home and End.\n  if (keyCode > 40 || (target.xy && keyCode < 37) || keyCode < 33) return;\n  // Do not scroll page by keys when color picker element has focus.\n  event.preventDefault();\n  // Send relative offset to the parent component.\n  fire(\n    target.el,\n    'move',\n    target.getMove(\n      {\n        x:\n          keyCode === 39 // Arrow Right\n            ? 0.01\n            : keyCode === 37 // Arrow Left\n            ? -0.01\n            : keyCode === 34 // Page Down\n            ? 0.05\n            : keyCode === 33 // Page Up\n            ? -0.05\n            : keyCode === 35 // End\n            ? 1\n            : keyCode === 36 // Home\n            ? -1\n            : 0,\n        y:\n          keyCode === 40 // Arrow down\n            ? 0.01\n            : keyCode === 38 // Arrow Up\n            ? -0.01\n            : 0\n      },\n      true\n    )\n  );\n};\n\nexport abstract class Slider {\n  declare nodes: HTMLElement[];\n\n  declare el: HTMLElement;\n\n  declare xy: boolean;\n\n  constructor(root: ShadowRoot, part: string, aria: string, xy: boolean) {\n    const template = tpl(\n      `<div role=\"slider\" tabindex=\"0\" part=\"${part}\" ${aria}><div part=\"${part}-pointer\"></div></div>`\n    );\n    root.appendChild(template.content.cloneNode(true));\n\n    const el = root.querySelector(`[part=${part}]`) as HTMLElement;\n    el.addEventListener('mousedown', this);\n    el.addEventListener('touchstart', this);\n    el.addEventListener('keydown', this);\n    this.el = el;\n\n    this.xy = xy;\n    this.nodes = [el.firstChild as HTMLElement, el];\n  }\n\n  set dragging(state: boolean) {\n    const toggleEvent = state ? document.addEventListener : document.removeEventListener;\n    toggleEvent(hasTouched ? 'touchmove' : 'mousemove', this);\n    toggleEvent(hasTouched ? 'touchend' : 'mouseup', this);\n  }\n\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'mousedown':\n      case 'touchstart':\n        event.preventDefault();\n        // event.button is 0 in mousedown for left button activation\n        if (!isValid(event) || (!hasTouched && (event as MouseEvent).button != 0)) return;\n        this.el.focus();\n        pointerMove(this, event);\n        this.dragging = true;\n        break;\n      case 'mousemove':\n      case 'touchmove':\n        event.preventDefault();\n        pointerMove(this, event);\n        break;\n      case 'mouseup':\n      case 'touchend':\n        this.dragging = false;\n        break;\n      case 'keydown':\n        keyMove(this, event as KeyboardEvent);\n        break;\n    }\n  }\n\n  abstract getMove(offset: Offset, key?: boolean): Record<string, number>;\n\n  abstract update(hsva: HsvaColor): void;\n\n  style(styles: Array<Record<string, string>>): void {\n    styles.forEach((style, i) => {\n      for (const p in style) {\n        this.nodes[i].style.setProperty(p, style[p]);\n      }\n    });\n  }\n}\n", "import { Slider, Offset } from './slider.js';\nimport { hsvaToHslString } from '../utils/convert.js';\nimport { clamp, round } from '../utils/math.js';\nimport type { HsvaColor } from '../types';\n\nexport class Hue extends Slider {\n  declare h: number;\n\n  constructor(root: ShadowRoot) {\n    super(root, 'hue', 'aria-label=\"Hue\" aria-valuemin=\"0\" aria-valuemax=\"360\"', false);\n  }\n\n  update({ h }: HsvaColor): void {\n    this.h = h;\n    this.style([\n      {\n        left: `${(h / 360) * 100}%`,\n        color: hsvaToHslString({ h, s: 100, v: 100, a: 1 })\n      }\n    ]);\n    this.el.setAttribute('aria-valuenow', `${round(h)}`);\n  }\n\n  getMove(offset: Offset, key?: boolean): Record<string, number> {\n    // Hue measured in degrees of the color circle ranging from 0 to 360\n    return { h: key ? clamp(this.h + offset.x * 360, 0, 360) : 360 * offset.x };\n  }\n}\n", "import { Slider, Offset } from './slider.js';\nimport { hsvaToHslString } from '../utils/convert.js';\nimport { clamp, round } from '../utils/math.js';\nimport type { HsvaColor } from '../types';\n\nexport class Saturation extends Slider {\n  declare hsva: HsvaColor;\n\n  constructor(root: ShadowRoot) {\n    super(root, 'saturation', 'aria-label=\"Color\"', true);\n  }\n\n  update(hsva: HsvaColor): void {\n    this.hsva = hsva;\n    this.style([\n      {\n        top: `${100 - hsva.v}%`,\n        left: `${hsva.s}%`,\n        color: hsvaToHslString(hsva)\n      },\n      {\n        'background-color': hsvaToHslString({ h: hsva.h, s: 100, v: 100, a: 1 })\n      }\n    ]);\n    this.el.setAttribute(\n      'aria-valuetext',\n      `Saturation ${round(hsva.s)}%, Brightness ${round(hsva.v)}%`\n    );\n  }\n\n  getMove(offset: Offset, key?: boolean): Record<string, number> {\n    // Saturation and brightness always fit into [0, 100] range\n    return {\n      s: key ? clamp(this.hsva.s + offset.x * 100, 0, 100) : offset.x * 100,\n      v: key ? clamp(this.hsva.v - offset.y * 100, 0, 100) : Math.round(100 - offset.y * 100)\n    };\n  }\n}\n", "export default `:host{display:flex;flex-direction:column;position:relative;width:200px;height:200px;user-select:none;-webkit-user-select:none;cursor:default}:host([hidden]){display:none!important}[role=slider]{position:relative;touch-action:none;user-select:none;-webkit-user-select:none;outline:0}[role=slider]:last-child{border-radius:0 0 8px 8px}[part$=pointer]{position:absolute;z-index:1;box-sizing:border-box;width:28px;height:28px;display:flex;place-content:center center;transform:translate(-50%,-50%);background-color:#fff;border:2px solid #fff;border-radius:50%;box-shadow:0 2px 4px rgba(0,0,0,.2)}[part$=pointer]::after{content:\"\";width:100%;height:100%;border-radius:inherit;background-color:currentColor}[role=slider]:focus [part$=pointer]{transform:translate(-50%,-50%) scale(1.1)}`;\n", "export default `[part=hue]{flex:0 0 24px;background:linear-gradient(to right,red 0,#ff0 17%,#0f0 33%,#0ff 50%,#00f 67%,#f0f 83%,red 100%)}[part=hue-pointer]{top:50%;z-index:2}`;\n", "export default `[part=saturation]{flex-grow:1;border-color:transparent;border-bottom:12px solid #000;border-radius:8px 8px 0 0;background-image:linear-gradient(to top,#000,transparent),linear-gradient(to right,#fff,rgba(255,255,255,0));box-shadow:inset 0 0 0 1px rgba(0,0,0,.05)}[part=saturation-pointer]{z-index:3}`;\n", "import { equalColorObjects } from '../utils/compare.js';\nimport { fire, tpl } from '../utils/dom.js';\nimport type { AnyColor, ColorModel, HsvaColor } from '../types';\nimport { Hue } from './hue.js';\nimport { Saturation } from './saturation.js';\nimport type { Slider } from './slider.js';\nimport css from '../styles/color-picker.js';\nimport hueCss from '../styles/hue.js';\nimport saturationCss from '../styles/saturation.js';\n\nconst $isSame = Symbol('same');\nconst $color = Symbol('color');\nconst $hsva = Symbol('hsva');\nconst $update = Symbol('update');\nconst $parts = Symbol('parts');\n\nexport const $css = Symbol('css');\nexport const $sliders = Symbol('sliders');\n\nexport type Sliders = Array<new (root: ShadowRoot) => Slider>;\n\nexport abstract class ColorPicker<C extends AnyColor> extends HTMLElement {\n  static get observedAttributes(): string[] {\n    return ['color'];\n  }\n\n  protected get [$css](): string[] {\n    return [css, hueCss, saturationCss];\n  }\n\n  protected get [$sliders](): Sliders {\n    return [Saturation, Hue];\n  }\n\n  protected abstract get colorModel(): ColorModel<C>;\n\n  private declare [$hsva]: HsvaColor;\n\n  private declare [$color]: C;\n\n  private declare [$parts]: Slider[];\n\n  get color(): C {\n    return this[$color];\n  }\n\n  set color(newColor: C) {\n    if (!this[$isSame](newColor)) {\n      const newHsva = this.colorModel.toHsva(newColor);\n      this[$update](newHsva);\n      this[$color] = newColor;\n    }\n  }\n\n  constructor() {\n    super();\n    const template = tpl(`<style>${this[$css].join('')}</style>`);\n    const root = this.attachShadow({ mode: 'open' });\n    root.appendChild(template.content.cloneNode(true));\n    root.addEventListener('move', this);\n    this[$parts] = this[$sliders].map((slider) => new slider(root));\n  }\n\n  connectedCallback(): void {\n    // A user may set a property on an _instance_ of an element,\n    // before its prototype has been connected to this class.\n    // If so, we need to run it through the proper class setter.\n    if (this.hasOwnProperty('color')) {\n      const value = this.color;\n      delete this['color' as keyof this];\n      this.color = value;\n    } else if (!this.color) {\n      this.color = this.colorModel.defaultColor;\n    }\n  }\n\n  attributeChangedCallback(_attr: string, _oldVal: string, newVal: string): void {\n    const color = this.colorModel.fromAttr(newVal);\n    if (!this[$isSame](color)) {\n      this.color = color;\n    }\n  }\n\n  handleEvent(event: CustomEvent): void {\n    // Merge the current HSV color object with updated params.\n    const oldHsva = this[$hsva];\n    const newHsva = { ...oldHsva, ...event.detail };\n    this[$update](newHsva);\n    let newColor;\n    if (\n      !equalColorObjects(newHsva, oldHsva) &&\n      !this[$isSame]((newColor = this.colorModel.fromHsva(newHsva)))\n    ) {\n      this[$color] = newColor;\n      fire(this, 'color-changed', { value: newColor });\n    }\n  }\n\n  private [$isSame](color: C): boolean {\n    return this.color && this.colorModel.equal(color, this.color);\n  }\n\n  private [$update](hsva: HsvaColor): void {\n    this[$hsva] = hsva;\n    this[$parts].forEach((part) => part.update(hsva));\n  }\n}\n", "import type { ColorModel, ColorPickerEventListener, ColorPickerEventMap } from '../types';\nimport { ColorPicker } from '../components/color-picker.js';\nimport { hexToHsva, hsvaToHex } from '../utils/convert.js';\nimport { equalHex } from '../utils/compare.js';\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: '#000',\n  toHsva: hexToHsva,\n  fromHsva: ({ h, s, v }) => hsvaToHex({ h, s, v, a: 1 }),\n  equal: equalHex,\n  fromAttr: (color) => color\n};\n\nexport interface HexBase {\n  addEventListener<T extends keyof ColorPickerEventMap<string>>(\n    type: T,\n    listener: ColorPickerEventListener<ColorPickerEventMap<string>[T]>,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n\n  removeEventListener<T extends keyof ColorPickerEventMap<string>>(\n    type: T,\n    listener: ColorPickerEventListener<ColorPickerEventMap<string>[T]>,\n    options?: boolean | EventListenerOptions\n  ): void;\n}\n\nexport class HexBase extends ColorPicker<string> {\n  protected get colorModel(): ColorModel<string> {\n    return colorModel;\n  }\n}\n", "import { HexBase } from './lib/entrypoints/hex.js';\n\n/**\n * A color picker custom element that uses HEX format.\n *\n * @element hex-color-picker\n *\n * @prop {string} color - Selected color in HEX format.\n * @attr {string} color - Selected color in HEX format.\n *\n * @fires color-changed - Event fired when color property changes.\n *\n * @csspart hue - A hue selector container.\n * @csspart saturation - A saturation selector container\n * @csspart hue-pointer - A hue pointer element.\n * @csspart saturation-pointer - A saturation pointer element.\n */\nexport class HexColorPicker extends HexBase {}\n\ncustomElements.define('hex-color-picker', HexColorPicker);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hex-color-picker': HexColorPicker;\n  }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/colorpicker/colorpickerview\n */\nimport { convertColor, convertToHex } from './utils';\nimport { global, env } from '@ckeditor/ckeditor5-utils';\nimport { debounce } from 'lodash-es';\nimport View from '../view';\nimport LabeledFieldView from '../labeledfield/labeledfieldview';\nimport { createLabeledInputText } from '../labeledfield/utils';\nimport 'vanilla-colorful/hex-color-picker.js';\nimport '../../theme/components/colorpicker/colorpicker.css';\nconst waitingTime = 150;\n/**\n * A class which represents a color picker with an input field for defining custom colors.\n */\nexport default class ColorPickerView extends View {\n    /**\n     * Creates a view of color picker.\n     *\n     * @param locale\n     * @param config\n     */\n    constructor(locale, config = {}) {\n        super(locale);\n        this.set({\n            color: '',\n            _hexColor: ''\n        });\n        this.hexInputRow = this._createInputRow();\n        const children = this.createCollection();\n        if (!config.hideInput) {\n            children.add(this.hexInputRow);\n        }\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: ['ck', 'ck-color-picker'],\n                tabindex: -1\n            },\n            children\n        });\n        this._config = config;\n        this._debounceColorPickerEvent = debounce((color) => {\n            // At first, set the color internally in the component. It's converted to the configured output format.\n            this.set('color', color);\n            // Then let the outside world know that the user changed the color.\n            this.fire('colorSelected', { color: this.color });\n        }, waitingTime, {\n            leading: true\n        });\n        // The `color` property holds the color in the configured output format.\n        // Ensure it before actually setting the value.\n        this.on('set:color', (evt, propertyName, newValue) => {\n            evt.return = convertColor(newValue, this._config.format || 'hsl');\n        });\n        // The `_hexColor` property is bound to the `color` one, but requires conversion.\n        this.on('change:color', () => {\n            this._hexColor = convertColorToCommonHexFormat(this.color);\n        });\n        this.on('change:_hexColor', () => {\n            // Update the selected color in the color picker palette when it's not focused.\n            // It means the user typed the color in the input.\n            if (document.activeElement !== this.picker) {\n                this.picker.setAttribute('color', this._hexColor);\n            }\n            // There has to be two way binding between properties.\n            // Extra precaution has to be taken to trigger change back only when the color really changes.\n            if (convertColorToCommonHexFormat(this.color) != convertColorToCommonHexFormat(this._hexColor)) {\n                this.color = this._hexColor;\n            }\n        });\n    }\n    /**\n     * Renders color picker in the view.\n     */\n    render() {\n        super.render();\n        this.picker = global.document.createElement('hex-color-picker');\n        this.picker.setAttribute('class', 'hex-color-picker');\n        this.picker.setAttribute('tabindex', '-1');\n        this._createSlidersView();\n        if (this.element) {\n            if (this.hexInputRow.element) {\n                this.element.insertBefore(this.picker, this.hexInputRow.element);\n            }\n            else {\n                this.element.appendChild(this.picker);\n            }\n            // Create custom stylesheet with a look of focused pointer in color picker and append it into the color picker shadowDom\n            const styleSheetForFocusedColorPicker = document.createElement('style');\n            styleSheetForFocusedColorPicker.textContent = '[role=\"slider\"]:focus [part$=\"pointer\"] {' +\n                'border: 1px solid #fff;' +\n                'outline: 1px solid var(--ck-color-focus-border);' +\n                'box-shadow: 0 0 0 2px #fff;' +\n                '}';\n            this.picker.shadowRoot.appendChild(styleSheetForFocusedColorPicker);\n        }\n        this.picker.addEventListener('color-changed', event => {\n            const customEvent = event;\n            const color = customEvent.detail.value;\n            this._debounceColorPickerEvent(color);\n        });\n    }\n    /**\n     * Focuses the first pointer in color picker.\n     *\n     */\n    focus() {\n        // In some browsers we need to move the focus to the input first.\n        // Otherwise, the color picker doesn't behave as expected.\n        // In FF, after selecting the color via slider, it instantly moves back to the previous color.\n        // In all iOS browsers and desktop Safari, once the saturation slider is moved for the first time,\n        // editor collapses the selection and doesn't apply the color change.\n        // See: https://github.com/cksource/ckeditor5-internal/issues/3245, https://github.com/ckeditor/ckeditor5/issues/14119,\n        // https://github.com/cksource/ckeditor5-internal/issues/3268.\n        /* istanbul ignore next -- @preserve */\n        if (!this._config.hideInput && (env.isGecko || env.isiOS || env.isSafari)) {\n            const input = this.hexInputRow.children.get(1);\n            input.focus();\n        }\n        const firstSlider = this.slidersView.first;\n        firstSlider.focus();\n    }\n    /**\n     * Creates collection of sliders in color picker.\n     *\n     * @private\n     */\n    _createSlidersView() {\n        const colorPickersChildren = [...this.picker.shadowRoot.children];\n        const sliders = colorPickersChildren.filter(item => item.getAttribute('role') === 'slider');\n        const slidersView = sliders.map(slider => {\n            const view = new SliderView(slider);\n            return view;\n        });\n        this.slidersView = this.createCollection();\n        slidersView.forEach(item => {\n            this.slidersView.add(item);\n        });\n    }\n    /**\n     * Creates input row for defining custom colors in color picker.\n     *\n     * @private\n     */\n    _createInputRow() {\n        const hashView = new HashView();\n        const colorInput = this._createColorInput();\n        return new ColorPickerInputRowView(this.locale, [hashView, colorInput]);\n    }\n    /**\n     * Creates the input where user can type or paste the color in hex format.\n     *\n     * @private\n     */\n    _createColorInput() {\n        const labeledInput = new LabeledFieldView(this.locale, createLabeledInputText);\n        const { t } = this.locale;\n        labeledInput.set({\n            label: t('HEX'),\n            class: 'color-picker-hex-input'\n        });\n        labeledInput.fieldView.bind('value').to(this, '_hexColor', pickerColor => {\n            if (labeledInput.isFocused) {\n                // Text field shouldn't be updated with color change if the text field is focused.\n                // Imagine user typing hex code and getting the value of field changed.\n                return labeledInput.fieldView.value;\n            }\n            else {\n                return pickerColor.startsWith('#') ? pickerColor.substring(1) : pickerColor;\n            }\n        });\n        // Only accept valid hex colors as input.\n        labeledInput.fieldView.on('input', () => {\n            const inputValue = labeledInput.fieldView.element.value;\n            if (inputValue) {\n                // Trim the whitespace.\n                const trimmedValue = inputValue.trim();\n                // Drop the `#` from the beginning if present.\n                const hashlessInput = trimmedValue.startsWith('#') ? trimmedValue.substring(1) : trimmedValue;\n                // Check if it's a hex color (3,4,6 or 8 chars long and with proper characters).\n                const isValidHexColor = [3, 4, 6, 8].includes(hashlessInput.length) &&\n                    /(([0-9a-fA-F]{2}){3,4}|([0-9a-fA-F]){3,4})/.test(hashlessInput);\n                if (isValidHexColor) {\n                    // If so, set the color.\n                    // Otherwise, do nothing.\n                    this._debounceColorPickerEvent('#' + hashlessInput);\n                }\n            }\n        });\n        return labeledInput;\n    }\n}\n// Converts any color format to a unified hex format.\n//\n// @param inputColor\n// @returns An unified hex string.\nfunction convertColorToCommonHexFormat(inputColor) {\n    let ret = convertToHex(inputColor);\n    if (!ret) {\n        ret = '#000';\n    }\n    if (ret.length === 4) {\n        // Unfold shortcut format.\n        ret = '#' + [ret[1], ret[1], ret[2], ret[2], ret[3], ret[3]].join('');\n    }\n    return ret.toLowerCase();\n}\n// View abstraction over pointer in color picker.\nclass SliderView extends View {\n    /**\n     * @param element HTML elemnt of slider in color picker.\n     */\n    constructor(element) {\n        super();\n        this.element = element;\n    }\n    /**\n     * Focuses element.\n     */\n    focus() {\n        this.element.focus();\n    }\n}\n// View abstraction over the `#` character before color input.\nclass HashView extends View {\n    constructor(locale) {\n        super(locale);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-color-picker__hash-view'\n                ]\n            },\n            children: '#'\n        });\n    }\n}\n// The class representing a row containing hex color input field.\n// **Note**: For now this class is private. When more use cases appear (beyond `ckeditor5-table` and `ckeditor5-image`),\n// it will become a component in `ckeditor5-ui`.\n//\n// @private\nclass ColorPickerInputRowView extends View {\n    /**\n     * Creates an instance of the form row class.\n     *\n     * @param locale The locale instance.\n     */\n    constructor(locale, children) {\n        super(locale);\n        this.children = this.createCollection(children);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-color-picker__row'\n                ]\n            },\n            children: this.children\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Collection, ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * A collection to store document colors. It enforces colors to be unique.\n */\nexport default class DocumentColorCollection extends ObservableMixin((Collection)) {\n    constructor(options) {\n        super(options);\n        this.set('isEmpty', true);\n        this.on('change', () => {\n            this.set('isEmpty', this.length === 0);\n        });\n    }\n    /**\n     * Adds a color to the document color collection.\n     *\n     * This method ensures that no color duplicates are inserted (compared using\n     * the color value of the {@link module:ui/colorgrid/colorgridview~ColorDefinition}).\n     *\n     * If the item does not have an ID, it will be automatically generated and set on the item.\n     *\n     * @param index The position of the item in the collection. The item is pushed to the collection when `index` is not specified.\n     * @fires add\n     * @fires change\n     */\n    add(item, index) {\n        if (this.find(element => element.color === item.color)) {\n            // No duplicates are allowed.\n            return this;\n        }\n        return super.add(item, index);\n    }\n    /**\n     * Checks if an object with given colors is present in the document color collection.\n     */\n    hasColor(color) {\n        return !!this.find(item => item.color === color);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/colorselector/colorgridsfragmentview\n */\nimport View from '../view';\nimport ButtonView from '../button/buttonview';\nimport ColorGridView from '../colorgrid/colorgridview';\nimport ColorTileView from '../colorgrid/colortileview';\nimport LabelView from '../label/labelview';\nimport Template from '../template';\nimport DocumentColorCollection from './documentcolorcollection';\nimport removeButtonIcon from '@ckeditor/ckeditor5-core/theme/icons/eraser.svg';\nimport colorPaletteIcon from '../../theme/icons/color-palette.svg';\n/**\n * One of the fragments of {@link module:ui/colorselector/colorselectorview~ColorSelectorView}.\n *\n * It provides a UI that allows users to select colors from the a predefined set and from existing document colors.\n *\n * It consists of the following sub–components:\n *\n * * A \"Remove color\" button,\n * * A static {@link module:ui/colorgrid/colorgridview~ColorGridView} of colors defined in the configuration,\n * * A dynamic {@link module:ui/colorgrid/colorgridview~ColorGridView} of colors used in the document.\n * * If color picker is configured, the \"Color Picker\" button is visible too.\n */\nexport default class ColorGridsFragmentView extends View {\n    /**\n     * Creates an instance of the view.\n     *\n     * @param locale The localization services instance.\n     * @param colors An array with definitions of colors to be displayed in the table.\n     * @param columns The number of columns in the color grid.\n     * @param removeButtonLabel The label of the button responsible for removing the color.\n     * @param colorPickerLabel The label of the button responsible for color picker appearing.\n     * @param documentColorsLabel The label for the section with the document colors.\n     * @param documentColorsCount The number of colors in the document colors section inside the color dropdown.\n     * @param focusTracker Tracks information about the DOM focus in the list.\n     * @param focusables A collection of views that can be focused in the view.\n     */\n    constructor(locale, { colors, columns, removeButtonLabel, documentColorsLabel, documentColorsCount, colorPickerLabel, focusTracker, focusables }) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('isVisible', true);\n        this.focusTracker = focusTracker;\n        this.items = this.createCollection();\n        this.colorDefinitions = colors;\n        this.columns = columns;\n        this.documentColors = new DocumentColorCollection();\n        this.documentColorsCount = documentColorsCount;\n        this._focusables = focusables;\n        this._removeButtonLabel = removeButtonLabel;\n        this._colorPickerLabel = colorPickerLabel;\n        this._documentColorsLabel = documentColorsLabel;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck-color-grids-fragment',\n                    bind.if('isVisible', 'ck-hidden', value => !value)\n                ]\n            },\n            children: this.items\n        });\n        this.removeColorButtonView = this._createRemoveColorButton();\n        this.items.add(this.removeColorButtonView);\n    }\n    /**\n     * Scans through the editor model and searches for text node attributes with the given attribute name.\n     * Found entries are set as document colors.\n     *\n     * All the previously stored document colors will be lost in the process.\n     *\n     * @param model The model used as a source to obtain the document colors.\n     * @param attributeName Determines the name of the related model's attribute for a given dropdown.\n     */\n    updateDocumentColors(model, attributeName) {\n        const document = model.document;\n        const maxCount = this.documentColorsCount;\n        this.documentColors.clear();\n        for (const root of document.getRoots()) {\n            const range = model.createRangeIn(root);\n            for (const node of range.getItems()) {\n                if (node.is('$textProxy') && node.hasAttribute(attributeName)) {\n                    this._addColorToDocumentColors(node.getAttribute(attributeName));\n                    if (this.documentColors.length >= maxCount) {\n                        return;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Refreshes the state of the selected color in one or both {@link module:ui/colorgrid/colorgridview~ColorGridView}s\n     * available in the {@link module:ui/colorselector/colorselectorview~ColorSelectorView}. It guarantees that the selection will\n     * occur only in one of them.\n     */\n    updateSelectedColors() {\n        const documentColorsGrid = this.documentColorsGrid;\n        const staticColorsGrid = this.staticColorsGrid;\n        const selectedColor = this.selectedColor;\n        staticColorsGrid.selectedColor = selectedColor;\n        if (documentColorsGrid) {\n            documentColorsGrid.selectedColor = selectedColor;\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.staticColorsGrid = this._createStaticColorsGrid();\n        this.items.add(this.staticColorsGrid);\n        if (this.documentColorsCount) {\n            // Create a label for document colors.\n            const bind = Template.bind(this.documentColors, this.documentColors);\n            const label = new LabelView(this.locale);\n            label.text = this._documentColorsLabel;\n            label.extendTemplate({\n                attributes: {\n                    class: [\n                        'ck',\n                        'ck-color-grid__label',\n                        bind.if('isEmpty', 'ck-hidden')\n                    ]\n                }\n            });\n            this.items.add(label);\n            this.documentColorsGrid = this._createDocumentColorsGrid();\n            this.items.add(this.documentColorsGrid);\n        }\n        this._createColorPickerButton();\n        this._addColorSelectorElementsToFocusTracker();\n        this.focus();\n    }\n    /**\n     * Focuses the component.\n     */\n    focus() {\n        this.removeColorButtonView.focus();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n    }\n    /**\n     * Handles displaying the color picker button (if it was previously created) and making it focusable.\n     */\n    addColorPickerButton() {\n        if (this.colorPickerButtonView) {\n            this.items.add(this.colorPickerButtonView);\n            this.focusTracker.add(this.colorPickerButtonView.element);\n            this._focusables.add(this.colorPickerButtonView);\n        }\n    }\n    /**\n     * Adds color selector elements to focus tracker.\n     */\n    _addColorSelectorElementsToFocusTracker() {\n        this.focusTracker.add(this.removeColorButtonView.element);\n        this._focusables.add(this.removeColorButtonView);\n        if (this.staticColorsGrid) {\n            this.focusTracker.add(this.staticColorsGrid.element);\n            this._focusables.add(this.staticColorsGrid);\n        }\n        if (this.documentColorsGrid) {\n            this.focusTracker.add(this.documentColorsGrid.element);\n            this._focusables.add(this.documentColorsGrid);\n        }\n    }\n    /**\n     * Creates the button responsible for displaying the color picker component.\n     */\n    _createColorPickerButton() {\n        this.colorPickerButtonView = new ButtonView();\n        this.colorPickerButtonView.set({\n            label: this._colorPickerLabel,\n            withText: true,\n            icon: colorPaletteIcon,\n            class: 'ck-color-selector__color-picker'\n        });\n        this.colorPickerButtonView.on('execute', () => {\n            this.fire('colorPicker:show');\n        });\n    }\n    /**\n     * Adds the remove color button as a child of the current view.\n     */\n    _createRemoveColorButton() {\n        const buttonView = new ButtonView();\n        buttonView.set({\n            withText: true,\n            icon: removeButtonIcon,\n            label: this._removeButtonLabel\n        });\n        buttonView.class = 'ck-color-selector__remove-color';\n        buttonView.on('execute', () => {\n            this.fire('execute', {\n                value: null,\n                source: 'removeColorButton'\n            });\n        });\n        buttonView.render();\n        return buttonView;\n    }\n    /**\n     * Creates a static color grid based on the editor configuration.\n     */\n    _createStaticColorsGrid() {\n        const colorGrid = new ColorGridView(this.locale, {\n            colorDefinitions: this.colorDefinitions,\n            columns: this.columns\n        });\n        colorGrid.on('execute', (evt, data) => {\n            this.fire('execute', {\n                value: data.value,\n                source: 'staticColorsGrid'\n            });\n        });\n        return colorGrid;\n    }\n    /**\n     * Creates the document colors section view and binds it to {@link #documentColors}.\n     */\n    _createDocumentColorsGrid() {\n        const bind = Template.bind(this.documentColors, this.documentColors);\n        const documentColorsGrid = new ColorGridView(this.locale, {\n            columns: this.columns\n        });\n        documentColorsGrid.extendTemplate({\n            attributes: {\n                class: bind.if('isEmpty', 'ck-hidden')\n            }\n        });\n        documentColorsGrid.items.bindTo(this.documentColors).using(colorObj => {\n            const colorTile = new ColorTileView();\n            colorTile.set({\n                color: colorObj.color,\n                hasBorder: colorObj.options && colorObj.options.hasBorder\n            });\n            if (colorObj.label) {\n                colorTile.set({\n                    label: colorObj.label,\n                    tooltip: true\n                });\n            }\n            colorTile.on('execute', () => {\n                this.fire('execute', {\n                    value: colorObj.color,\n                    source: 'documentColorsGrid'\n                });\n            });\n            return colorTile;\n        });\n        // Selected color should be cleared when document colors became empty.\n        this.documentColors.on('change:isEmpty', (evt, name, val) => {\n            if (val) {\n                documentColorsGrid.selectedColor = null;\n            }\n        });\n        return documentColorsGrid;\n    }\n    /**\n     * Adds a given color to the document colors list. If possible, the method will attempt to use\n     * data from the {@link #colorDefinitions} (label, color options).\n     *\n     * @param color A string that stores the value of the recently applied color.\n     */\n    _addColorToDocumentColors(color) {\n        const predefinedColor = this.colorDefinitions\n            .find(definition => definition.color === color);\n        if (!predefinedColor) {\n            this.documentColors.add({\n                color,\n                label: color,\n                options: {\n                    hasBorder: false\n                }\n            });\n        }\n        else {\n            this.documentColors.add(Object.assign({}, predefinedColor));\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/colorselector/colorpickerfragmentview\n */\nimport View from '../view';\nimport ButtonView from '../button/buttonview';\nimport { default as ColorPickerView } from '../colorpicker/colorpickerview';\nimport checkButtonIcon from '@ckeditor/ckeditor5-core/theme/icons/check.svg';\nimport cancelButtonIcon from '@ckeditor/ckeditor5-core/theme/icons/cancel.svg';\n/**\n * One of the fragments of {@link module:ui/colorselector/colorselectorview~ColorSelectorView}.\n *\n * It allows users to select a color from a color picker.\n *\n * It consists of the following sub–components:\n *\n * * A color picker saturation and hue sliders,\n * * A text input accepting colors in HEX format,\n * * \"Save\" and \"Cancel\" action buttons.\n */\nexport default class ColorPickerFragmentView extends View {\n    /**\n     * Creates an instance of the view.\n     *\n     * @param locale The localization services instance.\n     * @param focusTracker Tracks information about the DOM focus in the list.\n     * @param focusables A collection of views that can be focused in the view..\n     * @param keystrokes An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     * @param colorPickerViewConfig The configuration of color picker feature. If set to `false`, the color picker\n     * will not be rendered.\n     */\n    constructor(locale, { focusTracker, focusables, keystrokes, colorPickerViewConfig }) {\n        super(locale);\n        this.items = this.createCollection();\n        this.focusTracker = focusTracker;\n        this.keystrokes = keystrokes;\n        this.set('isVisible', false);\n        this.set('selectedColor', undefined);\n        this._focusables = focusables;\n        this._colorPickerViewConfig = colorPickerViewConfig;\n        const bind = this.bindTemplate;\n        const { saveButtonView, cancelButtonView } = this._createActionButtons();\n        this.saveButtonView = saveButtonView;\n        this.cancelButtonView = cancelButtonView;\n        this.actionBarView = this._createActionBarView({ saveButtonView, cancelButtonView });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck-color-picker-fragment',\n                    bind.if('isVisible', 'ck-hidden', value => !value)\n                ]\n            },\n            children: this.items\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        const colorPickerView = new ColorPickerView(this.locale, {\n            ...this._colorPickerViewConfig\n        });\n        this.colorPickerView = colorPickerView;\n        this.colorPickerView.render();\n        if (this.selectedColor) {\n            colorPickerView.color = this.selectedColor;\n        }\n        this.listenTo(this, 'change:selectedColor', (evt, name, value) => {\n            colorPickerView.color = value;\n        });\n        this.items.add(this.colorPickerView);\n        this.items.add(this.actionBarView);\n        this._addColorPickersElementsToFocusTracker();\n        this._stopPropagationOnArrowsKeys();\n        this._executeOnEnterPress();\n        this._executeUponColorChange();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n    }\n    /**\n     * Focuses the color picker.\n     */\n    focus() {\n        this.colorPickerView.focus();\n    }\n    /**\n     * When color picker is focused and \"enter\" is pressed it executes command.\n     */\n    _executeOnEnterPress() {\n        this.keystrokes.set('enter', evt => {\n            if (this.isVisible && this.focusTracker.focusedElement !== this.cancelButtonView.element) {\n                this.fire('execute', {\n                    value: this.selectedColor\n                });\n                evt.stopPropagation();\n                evt.preventDefault();\n            }\n        });\n    }\n    /**\n     * Removes default behavior of arrow keys in dropdown.\n     */\n    _stopPropagationOnArrowsKeys() {\n        const stopPropagation = (data) => data.stopPropagation();\n        this.keystrokes.set('arrowright', stopPropagation);\n        this.keystrokes.set('arrowleft', stopPropagation);\n        this.keystrokes.set('arrowup', stopPropagation);\n        this.keystrokes.set('arrowdown', stopPropagation);\n    }\n    /**\n     * Adds color picker elements to focus tracker.\n     */\n    _addColorPickersElementsToFocusTracker() {\n        for (const slider of this.colorPickerView.slidersView) {\n            this.focusTracker.add(slider.element);\n            this._focusables.add(slider);\n        }\n        const input = this.colorPickerView.hexInputRow.children.get(1);\n        if (input.element) {\n            this.focusTracker.add(input.element);\n            this._focusables.add(input);\n        }\n        this.focusTracker.add(this.saveButtonView.element);\n        this._focusables.add(this.saveButtonView);\n        this.focusTracker.add(this.cancelButtonView.element);\n        this._focusables.add(this.cancelButtonView);\n    }\n    /**\n     * Creates bar containing \"Save\" and \"Cancel\" buttons.\n     */\n    _createActionBarView({ saveButtonView, cancelButtonView }) {\n        const actionBarRow = new View();\n        const children = this.createCollection();\n        children.add(saveButtonView);\n        children.add(cancelButtonView);\n        actionBarRow.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-color-selector_action-bar'\n                ]\n            },\n            children\n        });\n        return actionBarRow;\n    }\n    /**\n     * Creates \"Save\" and \"Cancel\" buttons.\n     */\n    _createActionButtons() {\n        const locale = this.locale;\n        const t = locale.t;\n        const saveButtonView = new ButtonView(locale);\n        const cancelButtonView = new ButtonView(locale);\n        saveButtonView.set({\n            icon: checkButtonIcon,\n            class: 'ck-button-save',\n            type: 'button',\n            withText: false,\n            label: t('Accept')\n        });\n        cancelButtonView.set({\n            icon: cancelButtonIcon,\n            class: 'ck-button-cancel',\n            type: 'button',\n            withText: false,\n            label: t('Cancel')\n        });\n        saveButtonView.on('execute', () => {\n            this.fire('execute', {\n                source: 'colorPickerSaveButton',\n                value: this.selectedColor\n            });\n        });\n        cancelButtonView.on('execute', () => {\n            this.fire('colorPicker:cancel');\n        });\n        return {\n            saveButtonView, cancelButtonView\n        };\n    }\n    /**\n     * Fires the `execute` event if color in color picker has been changed\n     * by the user.\n     */\n    _executeUponColorChange() {\n        this.colorPickerView.on('colorSelected', (evt, data) => {\n            this.fire('execute', {\n                value: data.color,\n                source: 'colorPicker'\n            });\n            this.set('selectedColor', data.color);\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/colorselector/colorselectorview\n */\nimport FocusCycler from '../focuscycler';\nimport View from '../view';\nimport ViewCollection from '../viewcollection';\nimport { FocusTracker, KeystrokeHandler } from '@ckeditor/ckeditor5-utils';\nimport ColorGridsFragmentView from './colorgridsfragmentview';\nimport ColorPickerFragmentView from './colorpickerfragmentview';\nimport '../../theme/components/colorselector/colorselector.css';\n/**\n * The configurable color selector view class. It allows users to select colors from a predefined set of colors as well as from\n * a color picker.\n *\n * This meta-view is is made of two components (fragments):\n *\n * * {@link module:ui/colorselector/colorselectorview~ColorSelectorView#colorGridsFragmentView},\n * * {@link module:ui/colorselector/colorselectorview~ColorSelectorView#colorPickerFragmentView}.\n *\n * ```ts\n * const colorDefinitions = [\n * \t{ color: '#000', label: 'Black', options: { hasBorder: false } },\n * \t{ color: 'rgb(255, 255, 255)', label: 'White', options: { hasBorder: true } },\n * \t{ color: 'red', label: 'Red', options: { hasBorder: false } }\n * ];\n *\n * const selectorView = new ColorSelectorView( locale, {\n * \tcolors: colorDefinitions,\n * \tcolumns: 5,\n * \tremoveButtonLabel: 'Remove color',\n * \tdocumentColorsLabel: 'Document colors',\n * \tdocumentColorsCount: 4,\n * \tcolorPickerViewConfig: {\n * \t\tformat: 'hsl'\n * \t}\n * } );\n *\n * selectorView.appendUI();\n * selectorView.selectedColor = 'red';\n * selectorView.updateSelectedColors();\n *\n * selectorView.on<ColorSelectorExecuteEvent>( 'execute', ( evt, data ) => {\n * \tconsole.log( 'Color changed', data.value, data.source );\n * } );\n *\n * selectorView.on<ColorSelectorColorPickerShowEvent>( 'colorPicker:show', ( evt ) => {\n * \tconsole.log( 'Color picker showed up', evt );\n * } );\n *\n * selectorView.on<ColorSelectorColorPickerCancelEvent>( 'colorPicker:cancel', ( evt ) => {\n * \tconsole.log( 'Color picker cancel', evt );\n * } );\n *\n * selectorView.render();\n *\n * document.body.appendChild( selectorView.element );\n * ```\n */\nexport default class ColorSelectorView extends View {\n    /**\n     * Creates a view to be inserted as a child of {@link module:ui/dropdown/dropdownview~DropdownView}.\n     *\n     * @param locale The localization services instance.\n     * @param colors An array with definitions of colors to be displayed in the table.\n     * @param columns The number of columns in the color grid.\n     * @param removeButtonLabel The label of the button responsible for removing the color.\n     * @param colorPickerLabel The label of the button responsible for color picker appearing.\n     * @param documentColorsLabel The label for the section with the document colors.\n     * @param documentColorsCount The number of colors in the document colors section inside the color dropdown.\n     * @param colorPickerViewConfig The configuration of color picker feature. If set to `false`, the color picker will be hidden.\n     */\n    constructor(locale, { colors, columns, removeButtonLabel, documentColorsLabel, documentColorsCount, colorPickerLabel, colorPickerViewConfig }) {\n        super(locale);\n        this.items = this.createCollection();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this._focusables = new ViewCollection();\n        this._colorPickerViewConfig = colorPickerViewConfig;\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate list items backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate list items forwards using the <kbd>Tab</kbd> key.\n                focusNext: 'tab'\n            }\n        });\n        this.colorGridsFragmentView = new ColorGridsFragmentView(locale, {\n            colors, columns, removeButtonLabel, documentColorsLabel, documentColorsCount, colorPickerLabel,\n            focusTracker: this.focusTracker,\n            focusables: this._focusables\n        });\n        this.colorPickerFragmentView = new ColorPickerFragmentView(locale, {\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokes: this.keystrokes,\n            colorPickerViewConfig\n        });\n        this.set('_isColorGridsFragmentVisible', true);\n        this.set('_isColorPickerFragmentVisible', false);\n        this.set('selectedColor', undefined);\n        this.colorGridsFragmentView.bind('isVisible').to(this, '_isColorGridsFragmentVisible');\n        this.colorPickerFragmentView.bind('isVisible').to(this, '_isColorPickerFragmentVisible');\n        /**\n         * This is kind of bindings. Unfortunately we could not use this.bind() method because the same property\n         * can not be bound twice. So this is work around how to bind 'selectedColor' property between components.\n         */\n        this.on('change:selectedColor', (evt, evtName, data) => {\n            this.colorGridsFragmentView.set('selectedColor', data);\n            this.colorPickerFragmentView.set('selectedColor', data);\n        });\n        this.colorGridsFragmentView.on('change:selectedColor', (evt, evtName, data) => {\n            this.set('selectedColor', data);\n        });\n        this.colorPickerFragmentView.on('change:selectedColor', (evt, evtName, data) => {\n            this.set('selectedColor', data);\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-color-selector'\n                ]\n            },\n            children: this.items\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Renders the internals of the component on demand:\n     * * {@link #colorPickerFragmentView},\n     * * {@link #colorGridsFragmentView}.\n     *\n     * It allows for deferring component initialization to improve the performance.\n     *\n     * See {@link #showColorPickerFragment}, {@link #showColorGridsFragment}.\n     */\n    appendUI() {\n        this._appendColorGridsFragment();\n        if (this._colorPickerViewConfig) {\n            this._appendColorPickerFragment();\n        }\n    }\n    /**\n     * Shows the {@link #colorPickerFragmentView} and hides the {@link #colorGridsFragmentView}.\n     *\n     * **Note**: It requires {@link #appendUI} to be called first.\n     *\n     * See {@link #showColorGridsFragment}, {@link ~ColorSelectorView#event:colorPicker:show}.\n     */\n    showColorPickerFragment() {\n        if (!this.colorPickerFragmentView.colorPickerView || this._isColorPickerFragmentVisible) {\n            return;\n        }\n        this._isColorPickerFragmentVisible = true;\n        this.colorPickerFragmentView.focus();\n        this._isColorGridsFragmentVisible = false;\n    }\n    /**\n     * Shows the {@link #colorGridsFragmentView} and hides the {@link #colorPickerFragmentView}.\n     *\n     * See {@link #showColorPickerFragment}.\n     *\n     * **Note**: It requires {@link #appendUI} to be called first.\n     */\n    showColorGridsFragment() {\n        if (this._isColorGridsFragmentVisible) {\n            return;\n        }\n        this._isColorGridsFragmentVisible = true;\n        this.colorGridsFragmentView.focus();\n        this._isColorPickerFragmentVisible = false;\n    }\n    /**\n     * Focuses the first focusable element in {@link #items}.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Focuses the last focusable element in {@link #items}.\n     */\n    focusLast() {\n        this._focusCycler.focusLast();\n    }\n    /**\n     * Scans through the editor model and searches for text node attributes with the given `attributeName`.\n     * Found entries are set as document colors in {@link #colorGridsFragmentView}.\n     *\n     * All the previously stored document colors will be lost in the process.\n     *\n     * @param model The model used as a source to obtain the document colors.\n     * @param attributeName Determines the name of the related model's attribute for a given dropdown.\n     */\n    updateDocumentColors(model, attributeName) {\n        this.colorGridsFragmentView.updateDocumentColors(model, attributeName);\n    }\n    /**\n     * Refreshes the state of the selected color in one or both grids located in {@link #colorGridsFragmentView}.\n     *\n     * It guarantees that the selection will occur only in one of them.\n     */\n    updateSelectedColors() {\n        this.colorGridsFragmentView.updateSelectedColors();\n    }\n    /**\n     * Appends the view containing static and document color grid views.\n     */\n    _appendColorGridsFragment() {\n        if (this.items.length) {\n            return;\n        }\n        this.items.add(this.colorGridsFragmentView);\n        this.colorGridsFragmentView.delegate('execute').to(this);\n        this.colorGridsFragmentView.delegate('colorPicker:show').to(this);\n    }\n    /**\n     * Appends the view with the color picker.\n     */\n    _appendColorPickerFragment() {\n        if (this.items.length === 2) {\n            return;\n        }\n        this.items.add(this.colorPickerFragmentView);\n        if (this.colorGridsFragmentView.colorPickerButtonView) {\n            this.colorGridsFragmentView.colorPickerButtonView.on('execute', () => {\n                this.showColorPickerFragment();\n            });\n        }\n        this.colorGridsFragmentView.addColorPickerButton();\n        this.colorPickerFragmentView.delegate('execute').to(this);\n        this.colorPickerFragmentView.delegate('colorPicker:cancel').to(this);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/componentfactory\n */\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * A helper class implementing the UI component ({@link module:ui/view~View view}) factory.\n *\n * It allows functions producing specific UI components to be registered under their unique names\n * in the factory. A registered component can be then instantiated by providing its name.\n * Note that the names are case insensitive.\n *\n * ```ts\n * // The editor provides localization tools for the factory.\n * const factory = new ComponentFactory( editor );\n *\n * factory.add( 'foo', locale => new FooView( locale ) );\n * factory.add( 'bar', locale => new BarView( locale ) );\n *\n * // An instance of FooView.\n * const fooInstance = factory.create( 'foo' );\n *\n * // Names are case insensitive so this is also allowed:\n * const barInstance = factory.create( 'Bar' );\n * ```\n *\n * The {@link module:core/editor/editor~Editor#locale editor locale} is passed to the factory\n * function when {@link module:ui/componentfactory~ComponentFactory#create} is called.\n */\nexport default class ComponentFactory {\n    /**\n     * Creates an instance of the factory.\n     *\n     * @param editor The editor instance.\n     */\n    constructor(editor) {\n        /**\n         * Registered component factories.\n         */\n        this._components = new Map();\n        this.editor = editor;\n    }\n    /**\n     * Returns an iterator of registered component names. Names are returned in lower case.\n     */\n    *names() {\n        for (const value of this._components.values()) {\n            yield value.originalName;\n        }\n    }\n    /**\n     * Registers a component factory function that will be used by the\n     * {@link #create create} method and called with the\n     * {@link module:core/editor/editor~Editor#locale editor locale} as an argument,\n     * allowing localization of the {@link module:ui/view~View view}.\n     *\n     * @param name The name of the component.\n     * @param callback The callback that returns the component.\n     */\n    add(name, callback) {\n        this._components.set(getNormalized(name), { callback, originalName: name });\n    }\n    /**\n     * Creates an instance of a component registered in the factory under a specific name.\n     *\n     * When called, the {@link module:core/editor/editor~Editor#locale editor locale} is passed to\n     * the previously {@link #add added} factory function, allowing localization of the\n     * {@link module:ui/view~View view}.\n     *\n     * @param name The name of the component.\n     * @returns The instantiated component view.\n     */\n    create(name) {\n        if (!this.has(name)) {\n            /**\n             * The required component is not registered in the component factory. Please make sure\n             * the provided name is correct and the component has been correctly\n             * {@link module:ui/componentfactory~ComponentFactory#add added} to the factory.\n             *\n             * @error componentfactory-item-missing\n             * @param name The name of the missing component.\n             */\n            throw new CKEditorError('componentfactory-item-missing', this, { name });\n        }\n        return this._components.get(getNormalized(name)).callback(this.editor.locale);\n    }\n    /**\n     * Checks if a component of a given name is registered in the factory.\n     *\n     * @param name The name of the component.\n     */\n    has(name) {\n        return this._components.has(getNormalized(name));\n    }\n}\n/**\n * Ensures that the component name used as the key in the internal map is in lower case.\n */\nfunction getNormalized(name) {\n    return String(name).toLowerCase();\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/panel/balloon/balloonpanelview\n */\nimport View from '../../view';\nimport { getOptimalPosition, global, isRange, toUnit } from '@ckeditor/ckeditor5-utils';\nimport { isElement } from 'lodash-es';\nimport '../../../theme/components/panel/balloonpanel.css';\nconst toPx = toUnit('px');\nconst defaultLimiterElement = global.document.body;\n// A static balloon panel positioning function that moves the balloon far off the viewport.\n// It is used as a fallback when there is no way to position the balloon using provided\n// positioning functions (see: `getOptimalPosition()`), for instance, when the target the\n// balloon should be attached to gets obscured by scrollable containers or the viewport.\n//\n// It prevents the balloon from being attached to the void and possible degradation of the UX.\n// At the same time, it keeps the balloon physically visible in the DOM so the focus remains\n// uninterrupted.\nconst POSITION_OFF_SCREEN = {\n    top: -99999,\n    left: -99999,\n    name: 'arrowless',\n    config: {\n        withArrow: false\n    }\n};\n/**\n * The balloon panel view class.\n *\n * A floating container which can\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#pin pin} to any\n * {@link module:utils/dom/position~Options#target target} in the DOM and remain in that position\n * e.g. when the web page is scrolled.\n *\n * The balloon panel can be used to display contextual, non-blocking UI like forms, toolbars and\n * the like in its {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#content} view\n * collection.\n *\n * There is a number of {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}\n * that the balloon can use, automatically switching from one to another when the viewport space becomes\n * scarce to keep the balloon visible to the user as long as it is possible. The balloon will also\n * accept any custom position set provided by the user compatible with the\n * {@link module:utils/dom/position~Options options}.\n *\n * ```ts\n * const panel = new BalloonPanelView( locale );\n * const childView = new ChildView();\n * const positions = BalloonPanelView.defaultPositions;\n *\n * panel.render();\n *\n * // Add a child view to the panel's content collection.\n * panel.content.add( childView );\n *\n * // Start pinning the panel to an element with the \"target\" id DOM.\n * // The balloon will remain pinned until unpin() is called.\n * panel.pin( {\n * \ttarget: document.querySelector( '#target' ),\n * \tpositions: [\n * \t\tpositions.northArrowSouth,\n * \t\tpositions.southArrowNorth\n * \t]\n * } );\n * ```\n */\nexport default class BalloonPanelView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('top', 0);\n        this.set('left', 0);\n        this.set('position', 'arrow_nw');\n        this.set('isVisible', false);\n        this.set('withArrow', true);\n        this.set('class', undefined);\n        this._pinWhenIsVisibleCallback = null;\n        this.content = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-balloon-panel',\n                    bind.to('position', value => `ck-balloon-panel_${value}`),\n                    bind.if('isVisible', 'ck-balloon-panel_visible'),\n                    bind.if('withArrow', 'ck-balloon-panel_with-arrow'),\n                    bind.to('class')\n                ],\n                style: {\n                    top: bind.to('top', toPx),\n                    left: bind.to('left', toPx)\n                }\n            },\n            children: this.content\n        });\n    }\n    /**\n     * Shows the panel.\n     *\n     * See {@link #isVisible}.\n     */\n    show() {\n        this.isVisible = true;\n    }\n    /**\n     * Hides the panel.\n     *\n     * See {@link #isVisible}.\n     */\n    hide() {\n        this.isVisible = false;\n    }\n    /**\n     * Attaches the panel to a specified {@link module:utils/dom/position~Options#target} with a\n     * smart positioning heuristics that chooses from available positions to make sure the panel\n     * is visible to the user i.e. within the limits of the viewport.\n     *\n     * This method accepts configuration {@link module:utils/dom/position~Options options}\n     * to set the `target`, optional `limiter` and `positions` the balloon should choose from.\n     *\n     * ```ts\n     * const panel = new BalloonPanelView( locale );\n     * const positions = BalloonPanelView.defaultPositions;\n     *\n     * panel.render();\n     *\n     * // Attach the panel to an element with the \"target\" id DOM.\n     * panel.attachTo( {\n     * \ttarget: document.querySelector( '#target' ),\n     * \tpositions: [\n     * \t\tpositions.northArrowSouth,\n     * \t\tpositions.southArrowNorth\n     * \t]\n     * } );\n     * ```\n     *\n     * **Note**: Attaching the panel will also automatically {@link #show} it.\n     *\n     * **Note**: An attached panel will not follow its target when the window is scrolled or resized.\n     * See the {@link #pin} method for a more permanent positioning strategy.\n     *\n     * @param options Positioning options compatible with {@link module:utils/dom/position~getOptimalPosition}.\n     * Default `positions` array is {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n     */\n    attachTo(options) {\n        this.show();\n        const defaultPositions = BalloonPanelView.defaultPositions;\n        const positionOptions = Object.assign({}, {\n            element: this.element,\n            positions: [\n                defaultPositions.southArrowNorth,\n                defaultPositions.southArrowNorthMiddleWest,\n                defaultPositions.southArrowNorthMiddleEast,\n                defaultPositions.southArrowNorthWest,\n                defaultPositions.southArrowNorthEast,\n                defaultPositions.northArrowSouth,\n                defaultPositions.northArrowSouthMiddleWest,\n                defaultPositions.northArrowSouthMiddleEast,\n                defaultPositions.northArrowSouthWest,\n                defaultPositions.northArrowSouthEast,\n                defaultPositions.viewportStickyNorth\n            ],\n            limiter: defaultLimiterElement,\n            fitInViewport: true\n        }, options);\n        const optimalPosition = BalloonPanelView._getOptimalPosition(positionOptions) || POSITION_OFF_SCREEN;\n        // Usually browsers make some problems with super accurate values like 104.345px\n        // so it is better to use int values.\n        const left = parseInt(optimalPosition.left);\n        const top = parseInt(optimalPosition.top);\n        const position = optimalPosition.name;\n        const config = optimalPosition.config || {};\n        const { withArrow = true } = config;\n        this.top = top;\n        this.left = left;\n        this.position = position;\n        this.withArrow = withArrow;\n    }\n    /**\n     * Works the same way as the {@link #attachTo} method except that the position of the panel is\n     * continuously updated when:\n     *\n     * * any ancestor of the {@link module:utils/dom/position~Options#target}\n     * or {@link module:utils/dom/position~Options#limiter} is scrolled,\n     * * the browser window gets resized or scrolled.\n     *\n     * Thanks to that, the panel always sticks to the {@link module:utils/dom/position~Options#target}\n     * and is immune to the changing environment.\n     *\n     * ```ts\n     * const panel = new BalloonPanelView( locale );\n     * const positions = BalloonPanelView.defaultPositions;\n     *\n     * panel.render();\n     *\n     * // Pin the panel to an element with the \"target\" id DOM.\n     * panel.pin( {\n     * \ttarget: document.querySelector( '#target' ),\n     * \tpositions: [\n     * \t\tpositions.northArrowSouth,\n     * \t\tpositions.southArrowNorth\n     * \t]\n     * } );\n     * ```\n     *\n     * To leave the pinned state, use the {@link #unpin} method.\n     *\n     * **Note**: Pinning the panel will also automatically {@link #show} it.\n     *\n     * @param options Positioning options compatible with {@link module:utils/dom/position~getOptimalPosition}.\n     * Default `positions` array is {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n     */\n    pin(options) {\n        this.unpin();\n        this._pinWhenIsVisibleCallback = () => {\n            if (this.isVisible) {\n                this._startPinning(options);\n            }\n            else {\n                this._stopPinning();\n            }\n        };\n        this._startPinning(options);\n        // Control the state of the listeners depending on whether the panel is visible\n        // or not.\n        // TODO: Use on() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n        this.listenTo(this, 'change:isVisible', this._pinWhenIsVisibleCallback);\n    }\n    /**\n     * Stops pinning the panel, as set up by {@link #pin}.\n     */\n    unpin() {\n        if (this._pinWhenIsVisibleCallback) {\n            // Deactivate listeners attached by pin().\n            this._stopPinning();\n            // Deactivate the panel pin() control logic.\n            // TODO: Use off() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n            this.stopListening(this, 'change:isVisible', this._pinWhenIsVisibleCallback);\n            this._pinWhenIsVisibleCallback = null;\n            this.hide();\n        }\n    }\n    /**\n     * Starts managing the pinned state of the panel. See {@link #pin}.\n     *\n     * @param options Positioning options compatible with {@link module:utils/dom/position~getOptimalPosition}.\n     */\n    _startPinning(options) {\n        this.attachTo(options);\n        const targetElement = getDomElement(options.target);\n        const limiterElement = options.limiter ? getDomElement(options.limiter) : defaultLimiterElement;\n        // Then we need to listen on scroll event of eny element in the document.\n        this.listenTo(global.document, 'scroll', (evt, domEvt) => {\n            const scrollTarget = domEvt.target;\n            // The position needs to be updated if the positioning target is within the scrolled element.\n            const isWithinScrollTarget = targetElement && scrollTarget.contains(targetElement);\n            // The position needs to be updated if the positioning limiter is within the scrolled element.\n            const isLimiterWithinScrollTarget = limiterElement && scrollTarget.contains(limiterElement);\n            // The positioning target and/or limiter can be a Rect, object etc..\n            // There's no way to optimize the listener then.\n            if (isWithinScrollTarget || isLimiterWithinScrollTarget || !targetElement || !limiterElement) {\n                this.attachTo(options);\n            }\n        }, { useCapture: true });\n        // We need to listen on window resize event and update position.\n        this.listenTo(global.window, 'resize', () => {\n            this.attachTo(options);\n        });\n    }\n    /**\n     * Stops managing the pinned state of the panel. See {@link #pin}.\n     */\n    _stopPinning() {\n        this.stopListening(global.document, 'scroll');\n        this.stopListening(global.window, 'resize');\n    }\n}\n/**\n * A side offset of the arrow tip from the edge of the balloon. Controlled by CSS.\n *\n * ```\n *\t\t ┌───────────────────────┐\n *\t\t │                       │\n *\t\t │         Balloon       │\n *\t\t │         Content       │\n *\t\t │                       │\n *\t\t └──+    +───────────────┘\n *\t\t |   \\  /\n *\t\t |    \\/\n *\t\t>┼─────┼< ─────────────────────── side offset\n *\n * ```\n *\n * @default 25\n */\nBalloonPanelView.arrowSideOffset = 25;\n/**\n * A height offset of the arrow from the edge of the balloon. Controlled by CSS.\n *\n * ```\n *\t\t ┌───────────────────────┐\n *\t\t │                       │\n *\t\t │         Balloon       │\n *\t\t │         Content       │      ╱-- arrow height offset\n *\t\t │                       │      V\n *\t\t └──+    +───────────────┘ --- ─┼───────\n *\t\t     \\  /                       │\n *\t\t      \\/                        │\n *\t\t────────────────────────────────┼───────\n *\t\t                                ^\n *\n *\n *\t\t>┼────┼<  arrow height offset\n *\t\t │    │\n *\t\t │    ┌────────────────────────┐\n *\t\t │    │                        │\n *\t\t │   ╱                         │\n *\t\t │ ╱            Balloon        │\n *\t\t │ ╲            Content        │\n *\t\t │   ╲                         │\n *\t\t │    │                        │\n *\t\t │    └────────────────────────┘\n * ```\n *\n * @default 10\n*/\nBalloonPanelView.arrowHeightOffset = 10;\n/**\n * A vertical offset of the balloon panel from the edge of the viewport if sticky.\n * It helps in accessing toolbar buttons underneath the balloon panel.\n *\n * ```\n *\t\t  ┌───────────────────────────────────────────────────┐\n *\t\t  │                      Target                       │\n *\t\t  │                                                   │\n *\t\t  │                            /── vertical offset    │\n *\t\t┌─────────────────────────────V─────────────────────────┐\n *\t\t│ Toolbar            ┌─────────────┐                    │\n *\t\t├────────────────────│   Balloon   │────────────────────┤\n *\t\t│ │                  └─────────────┘                  │ │\n *\t\t│ │                                                   │ │\n *\t\t│ │                                                   │ │\n *\t\t│ │                                                   │ │\n *\t\t│ └───────────────────────────────────────────────────┘ │\n *\t\t│                        Viewport                       │\n *\t\t└───────────────────────────────────────────────────────┘\n * ```\n *\n * @default 20\n */\nBalloonPanelView.stickyVerticalOffset = 20;\n/**\n * Function used to calculate the optimal position for the balloon.\n */\nBalloonPanelView._getOptimalPosition = getOptimalPosition;\n/**\n * A default set of positioning functions used by the balloon panel view\n * when attaching using the {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo} method.\n *\n * The available positioning functions are as follows:\n *\n * **North west**\n *\n * * `northWestArrowSouthWest`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t V\n *\t\t [ Target ]\n * ```\n *\n * * `northWestArrowSouthMiddleWest`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t    V\n *\t\t    [ Target ]\n * ```\n *\n * * `northWestArrowSouth`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t         V\n *\t\t         [ Target ]\n * ```\n *\n * * `northWestArrowSouthMiddleEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t             V\n *\t\t             [ Target ]\n * ```\n *\n * * `northWestArrowSouthEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t                 V\n *\t\t                 [ Target ]\n * ```\n *\n * **North**\n *\n * * `northArrowSouthWest`\n *\n * ```\n *\t\t    +-----------------+\n *\t\t    |     Balloon     |\n *\t\t    +-----------------+\n *\t\t     V\n *\t\t[ Target ]\n * ```\n *\n * * `northArrowSouthMiddleWest`\n *\n * ```\n *\t\t +-----------------+\n *\t\t |     Balloon     |\n *\t\t +-----------------+\n *\t\t     V\n *\t\t[ Target ]\n * ```\n * * `northArrowSouth`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t         V\n *\t\t    [ Target ]\n * ```\n *\n * * `northArrowSouthMiddleEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t             V\n *\t\t        [ Target ]\n * ```\n *\n * * `northArrowSouthEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t                V\n *\t\t           [ Target ]\n * ```\n *\n * **North east**\n *\n * * `northEastArrowSouthWest`\n *\n * ```\n *\t\t        +-----------------+\n *\t\t        |     Balloon     |\n *\t\t        +-----------------+\n *\t\t         V\n *\t\t[ Target ]\n * ```\n *\n * * `northEastArrowSouthMiddleWest`\n *\n * ```\n *\t\t     +-----------------+\n *\t\t     |     Balloon     |\n *\t\t     +-----------------+\n *\t\t         V\n *\t\t[ Target ]\n * ```\n *\n * * `northEastArrowSouth`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t         V\n *\t\t[ Target ]\n * ```\n *\n * * `northEastArrowSouthMiddleEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t             V\n *\t\t    [ Target ]\n * ```\n *\n * * `northEastArrowSouthEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t                 V\n *\t\t        [ Target ]\n * ```\n *\n * **South**\n *\n * * `southArrowNorthWest`\n *\n * ```\n *\t\t[ Target ]\n *\t\t     ^\n *\t\t    +-----------------+\n *\t\t    |     Balloon     |\n *\t\t    +-----------------+\n * ```\n *\n * * `southArrowNorthMiddleWest`\n *\n * ```\n *\t\t   [ Target ]\n *\t\t        ^\n *\t\t    +-----------------+\n *\t\t    |     Balloon     |\n *\t\t    +-----------------+\n * ```\n *\n * * `southArrowNorth`\n *\n * ```\n *\t\t    [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southArrowNorthMiddleEast`\n *\n * ```\n *\t\t            [ Target ]\n *\t\t                 ^\n *\t\t   +-----------------+\n *\t\t   |     Balloon     |\n *\t\t   +-----------------+\n * ```\n *\n * * `southArrowNorthEast`\n *\n * ```\n *\t\t            [ Target ]\n *\t\t                 ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * **South west**\n *\n * * `southWestArrowNorthWest`\n *\n *\n * ```\n *\t\t [ Target ]\n *\t\t ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southWestArrowNorthMiddleWest`\n *\n * ```\n *\t\t     [ Target ]\n *\t\t     ^\n *\t\t +-----------------+\n *\t\t |     Balloon     |\n *\t\t +-----------------+\n * ```\n *\n * * `southWestArrowNorth`\n *\n * ```\n *\t\t         [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southWestArrowNorthMiddleEast`\n *\n * ```\n *\t\t              [ Target ]\n *\t\t              ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southWestArrowNorthEast`\n *\n * ```\n *\t\t                 [ Target ]\n *\t\t                 ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * **South east**\n *\n * * `southEastArrowNorthWest`\n *\n * ```\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t        +-----------------+\n *\t\t        |     Balloon     |\n *\t\t        +-----------------+\n * ```\n *\n * * `southEastArrowNorthMiddleWest`\n *\n * ```\n *\t\t   [ Target ]\n *\t\t            ^\n *\t\t        +-----------------+\n *\t\t        |     Balloon     |\n *\t\t        +-----------------+\n * ```\n *\n * * `southEastArrowNorth`\n *\n * ```\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southEastArrowNorthMiddleEast`\n *\n * ```\n *\t\t     [ Target ]\n *\t\t              ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southEastArrowNorthEast`\n *\n * ```\n *\t\t        [ Target ]\n *\t\t                 ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * **West**\n *\n * * `westArrowEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |>[ Target ]\n *\t\t+-----------------+\n * ```\n *\n * **East**\n *\n * * `eastArrowWest`\n *\n * ```\n *\t\t           +-----------------+\n *\t\t[ Target ]<|     Balloon     |\n *\t\t           +-----------------+\n * ```\n *\n * **Sticky**\n *\n * * `viewportStickyNorth`\n *\n * ```\n *\t\t    +---------------------------+\n *\t\t    |        [ Target ]         |\n *\t\t    |                           |\n *\t\t+-----------------------------------+\n *\t\t|   |    +-----------------+    |   |\n *\t\t|   |    |     Balloon     |    |   |\n *\t\t|   |    +-----------------+    |   |\n *\t\t|   |                           |   |\n *\t\t|   |                           |   |\n *\t\t|   |                           |   |\n *\t\t|   |                           |   |\n *\t\t|   +---------------------------+   |\n *\t\t|             Viewport              |\n *\t\t+-----------------------------------+\n * ```\n *\n * See {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo}.\n *\n * Positioning functions must be compatible with {@link module:utils/dom/position~Position}.\n *\n * Default positioning functions with customized offsets can be generated using\n * {@link module:ui/panel/balloon/balloonpanelview~generatePositions}.\n *\n * The name that the position function returns will be reflected in the balloon panel's class that\n * controls the placement of the \"arrow\". See {@link #position} to learn more.\n */\nBalloonPanelView.defaultPositions = generatePositions();\n/**\n * Returns the DOM element for given object or null, if there is none,\n * e.g. when the passed object is a Rect instance or so.\n */\nfunction getDomElement(object) {\n    if (isElement(object)) {\n        return object;\n    }\n    if (isRange(object)) {\n        return object.commonAncestorContainer;\n    }\n    if (typeof object == 'function') {\n        return getDomElement(object());\n    }\n    return null;\n}\n/**\n * Returns available {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n * {@link module:utils/dom/position~PositioningFunction positioning functions} adjusted by the specific offsets.\n *\n * @internal\n * @param options Options to generate positions. If not specified, this helper will simply return\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n * @param options.sideOffset A custom side offset (in pixels) of each position. If\n * not specified, {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowSideOffset the default value}\n * will be used.\n * @param options.heightOffset A custom height offset (in pixels) of each position. If\n * not specified, {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowHeightOffset the default value}\n * will be used.\n * @param options.stickyVerticalOffset A custom offset (in pixels) of the `viewportStickyNorth` positioning function.\n * If not specified, {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.stickyVerticalOffset the default value}\n * will be used.\n * @param options.config Additional configuration of the balloon balloon panel view.\n * Currently only {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#withArrow} is supported. Learn more\n * about {@link module:utils/dom/position~PositioningFunction positioning functions}.\n */\nexport function generatePositions(options = {}) {\n    const { sideOffset = BalloonPanelView.arrowSideOffset, heightOffset = BalloonPanelView.arrowHeightOffset, stickyVerticalOffset = BalloonPanelView.stickyVerticalOffset, config } = options;\n    return {\n        // ------- North west\n        northWestArrowSouthWest: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left - sideOffset,\n            name: 'arrow_sw',\n            ...(config && { config })\n        }),\n        northWestArrowSouthMiddleWest: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left - (balloonRect.width * .25) - sideOffset,\n            name: 'arrow_smw',\n            ...(config && { config })\n        }),\n        northWestArrowSouth: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left - balloonRect.width / 2,\n            name: 'arrow_s',\n            ...(config && { config })\n        }),\n        northWestArrowSouthMiddleEast: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left - (balloonRect.width * .75) + sideOffset,\n            name: 'arrow_sme',\n            ...(config && { config })\n        }),\n        northWestArrowSouthEast: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left - balloonRect.width + sideOffset,\n            name: 'arrow_se',\n            ...(config && { config })\n        }),\n        // ------- North\n        northArrowSouthWest: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left + targetRect.width / 2 - sideOffset,\n            name: 'arrow_sw',\n            ...(config && { config })\n        }),\n        northArrowSouthMiddleWest: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left + targetRect.width / 2 - (balloonRect.width * .25) - sideOffset,\n            name: 'arrow_smw',\n            ...(config && { config })\n        }),\n        northArrowSouth: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n            name: 'arrow_s',\n            ...(config && { config })\n        }),\n        northArrowSouthMiddleEast: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left + targetRect.width / 2 - (balloonRect.width * .75) + sideOffset,\n            name: 'arrow_sme',\n            ...(config && { config })\n        }),\n        northArrowSouthEast: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left + targetRect.width / 2 - balloonRect.width + sideOffset,\n            name: 'arrow_se',\n            ...(config && { config })\n        }),\n        // ------- North east\n        northEastArrowSouthWest: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.right - sideOffset,\n            name: 'arrow_sw',\n            ...(config && { config })\n        }),\n        northEastArrowSouthMiddleWest: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.right - (balloonRect.width * .25) - sideOffset,\n            name: 'arrow_smw',\n            ...(config && { config })\n        }),\n        northEastArrowSouth: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.right - balloonRect.width / 2,\n            name: 'arrow_s',\n            ...(config && { config })\n        }),\n        northEastArrowSouthMiddleEast: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.right - (balloonRect.width * .75) + sideOffset,\n            name: 'arrow_sme',\n            ...(config && { config })\n        }),\n        northEastArrowSouthEast: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.right - balloonRect.width + sideOffset,\n            name: 'arrow_se',\n            ...(config && { config })\n        }),\n        // ------- South west\n        southWestArrowNorthWest: targetRect => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left - sideOffset,\n            name: 'arrow_nw',\n            ...(config && { config })\n        }),\n        southWestArrowNorthMiddleWest: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left - (balloonRect.width * .25) - sideOffset,\n            name: 'arrow_nmw',\n            ...(config && { config })\n        }),\n        southWestArrowNorth: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left - balloonRect.width / 2,\n            name: 'arrow_n',\n            ...(config && { config })\n        }),\n        southWestArrowNorthMiddleEast: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left - (balloonRect.width * .75) + sideOffset,\n            name: 'arrow_nme',\n            ...(config && { config })\n        }),\n        southWestArrowNorthEast: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left - balloonRect.width + sideOffset,\n            name: 'arrow_ne',\n            ...(config && { config })\n        }),\n        // ------- South\n        southArrowNorthWest: targetRect => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left + targetRect.width / 2 - sideOffset,\n            name: 'arrow_nw',\n            ...(config && { config })\n        }),\n        southArrowNorthMiddleWest: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left + targetRect.width / 2 - (balloonRect.width * 0.25) - sideOffset,\n            name: 'arrow_nmw',\n            ...(config && { config })\n        }),\n        southArrowNorth: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n            name: 'arrow_n',\n            ...(config && { config })\n        }),\n        southArrowNorthMiddleEast: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left + targetRect.width / 2 - (balloonRect.width * 0.75) + sideOffset,\n            name: 'arrow_nme',\n            ...(config && { config })\n        }),\n        southArrowNorthEast: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left + targetRect.width / 2 - balloonRect.width + sideOffset,\n            name: 'arrow_ne',\n            ...(config && { config })\n        }),\n        // ------- South east\n        southEastArrowNorthWest: targetRect => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.right - sideOffset,\n            name: 'arrow_nw',\n            ...(config && { config })\n        }),\n        southEastArrowNorthMiddleWest: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.right - (balloonRect.width * .25) - sideOffset,\n            name: 'arrow_nmw',\n            ...(config && { config })\n        }),\n        southEastArrowNorth: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.right - balloonRect.width / 2,\n            name: 'arrow_n',\n            ...(config && { config })\n        }),\n        southEastArrowNorthMiddleEast: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.right - (balloonRect.width * .75) + sideOffset,\n            name: 'arrow_nme',\n            ...(config && { config })\n        }),\n        southEastArrowNorthEast: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.right - balloonRect.width + sideOffset,\n            name: 'arrow_ne',\n            ...(config && { config })\n        }),\n        // ------- West\n        westArrowEast: (targetRect, balloonRect) => ({\n            top: targetRect.top + targetRect.height / 2 - balloonRect.height / 2,\n            left: targetRect.left - balloonRect.width - heightOffset,\n            name: 'arrow_e',\n            ...(config && { config })\n        }),\n        // ------- East\n        eastArrowWest: (targetRect, balloonRect) => ({\n            top: targetRect.top + targetRect.height / 2 - balloonRect.height / 2,\n            left: targetRect.right + heightOffset,\n            name: 'arrow_w',\n            ...(config && { config })\n        }),\n        // ------- Sticky\n        viewportStickyNorth: (targetRect, balloonRect, viewportRect, limiterRect) => {\n            const boundaryRect = limiterRect || viewportRect;\n            if (!targetRect.getIntersection(boundaryRect)) {\n                return null;\n            }\n            // Engage when the target top and bottom edges are close or off the boundary.\n            // By close, it means there's not enough space for the balloon arrow (offset).\n            if (boundaryRect.height - targetRect.height > stickyVerticalOffset) {\n                return null;\n            }\n            return {\n                top: boundaryRect.top + stickyVerticalOffset,\n                left: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n                name: 'arrowless',\n                config: {\n                    withArrow: false,\n                    ...config\n                }\n            };\n        }\n    };\n    /**\n     * Returns the top coordinate for positions starting with `north*`.\n     *\n     * @param targetRect A rect of the target.\n     * @param balloonRect A rect of the balloon.\n     */\n    function getNorthTop(targetRect, balloonRect) {\n        return targetRect.top - balloonRect.height - heightOffset;\n    }\n    /**\n     * Returns the top coordinate for positions starting with `south*`.\n     *\n     * @param targetRect A rect of the target.\n     */\n    function getSouthTop(targetRect) {\n        return targetRect.bottom + heightOffset;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/tooltipmanager\n */\nimport View from './view';\nimport BalloonPanelView, { generatePositions } from './panel/balloon/balloonpanelview';\nimport { DomEmitterMixin, ResizeObserver, first, global, isVisible } from '@ckeditor/ckeditor5-utils';\nimport { isElement, debounce } from 'lodash-es';\nimport '../theme/components/tooltip/tooltip.css';\nconst BALLOON_CLASS = 'ck-tooltip';\n/**\n * A tooltip manager class for the UI of the editor.\n *\n * **Note**: Most likely you do not have to use the `TooltipManager` API listed below in order to display tooltips. Popular\n * {@glink framework/architecture/ui-library UI components} support tooltips out-of-the-box via observable properties\n * (see {@link module:ui/button/buttonview~ButtonView#tooltip} and {@link module:ui/button/buttonview~ButtonView#tooltipPosition}).\n *\n * # Displaying tooltips\n *\n * To display a tooltip, set `data-cke-tooltip-text` attribute on any DOM element:\n *\n * ```ts\n * domElement.dataset.ckeTooltipText = 'My tooltip';\n * ```\n *\n * The tooltip will show up whenever the user moves the mouse over the element or the element gets focus in DOM.\n *\n * # Positioning tooltips\n *\n * To change the position of the tooltip, use the `data-cke-tooltip-position` attribute (`s`, `se`, `sw`, `n`, `e`, or `w`):\n *\n * ```ts\n * domElement.dataset.ckeTooltipText = 'Tooltip to the north';\n * domElement.dataset.ckeTooltipPosition = 'n';\n * ```\n *\n * # Disabling tooltips\n *\n * In order to disable the tooltip  temporarily, use the `data-cke-tooltip-disabled` attribute:\n *\n * ```ts\n * domElement.dataset.ckeTooltipText = 'Disabled. For now.';\n * domElement.dataset.ckeTooltipDisabled = 'true';\n * ```\n *\n * # Styling tooltips\n *\n * By default, the tooltip has `.ck-tooltip` class and its text inner `.ck-tooltip__text`.\n *\n * If your tooltip requires custom styling, using `data-cke-tooltip-class` attribute will add additional class to the balloon\n * displaying the tooltip:\n *\n * ```ts\n * domElement.dataset.ckeTooltipText = 'Tooltip with a red text';\n * domElement.dataset.ckeTooltipClass = 'my-class';\n * ```\n *\n * ```css\n * .ck.ck-tooltip.my-class { color: red }\n * ```\n *\n * **Note**: This class is a singleton. All editor instances re-use the same instance loaded by\n * {@link module:ui/editorui/editorui~EditorUI} of the first editor.\n */\nexport default class TooltipManager extends DomEmitterMixin() {\n    /**\n     * Creates an instance of the tooltip manager.\n     */\n    constructor(editor) {\n        super();\n        /**\n         * Stores the reference to the DOM element the tooltip is attached to. `null` when there's no tooltip\n         * in the UI.\n         */\n        this._currentElementWithTooltip = null;\n        /**\n         * Stores the current tooltip position. `null` when there's no tooltip in the UI.\n         */\n        this._currentTooltipPosition = null;\n        /**\n         * An instance of the resize observer that keeps track on target element visibility,\n         * when it hides the tooltip should also disappear.\n         *\n         * {@link module:core/editor/editorconfig~EditorConfig#balloonToolbar configuration}.\n         */\n        this._resizeObserver = null;\n        TooltipManager._editors.add(editor);\n        // TooltipManager must be a singleton. Multiple instances would mean multiple tooltips attached\n        // to the same DOM element with data-cke-tooltip-* attributes.\n        if (TooltipManager._instance) {\n            return TooltipManager._instance;\n        }\n        TooltipManager._instance = this;\n        this.tooltipTextView = new View(editor.locale);\n        this.tooltipTextView.set('text', '');\n        this.tooltipTextView.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-tooltip__text'\n                ]\n            },\n            children: [\n                {\n                    text: this.tooltipTextView.bindTemplate.to('text')\n                }\n            ]\n        });\n        this.balloonPanelView = new BalloonPanelView(editor.locale);\n        this.balloonPanelView.class = BALLOON_CLASS;\n        this.balloonPanelView.content.add(this.tooltipTextView);\n        this._pinTooltipDebounced = debounce(this._pinTooltip, 600);\n        this.listenTo(global.document, 'mouseenter', this._onEnterOrFocus.bind(this), { useCapture: true });\n        this.listenTo(global.document, 'mouseleave', this._onLeaveOrBlur.bind(this), { useCapture: true });\n        this.listenTo(global.document, 'focus', this._onEnterOrFocus.bind(this), { useCapture: true });\n        this.listenTo(global.document, 'blur', this._onLeaveOrBlur.bind(this), { useCapture: true });\n        this.listenTo(global.document, 'scroll', this._onScroll.bind(this), { useCapture: true });\n        // Because this class is a singleton, its only instance is shared across all editors and connects them through the reference.\n        // This causes issues with the ContextWatchdog. When an error is thrown in one editor, the watchdog traverses the references\n        // and (because of shared tooltip manager) figures that the error affects all editors and restarts them all.\n        // This flag, excludes tooltip manager instance from the traversal and brings ContextWatchdog back to normal.\n        // More in https://github.com/ckeditor/ckeditor5/issues/12292.\n        this._watchdogExcluded = true;\n    }\n    /**\n     * Destroys the tooltip manager.\n     *\n     * **Note**: The manager singleton cannot be destroyed until all editors that use it are destroyed.\n     *\n     * @param editor The editor the manager was created for.\n     */\n    destroy(editor) {\n        const editorBodyViewCollection = editor.ui.view && editor.ui.view.body;\n        TooltipManager._editors.delete(editor);\n        this.stopListening(editor.ui);\n        // Prevent the balloon panel from being destroyed in the EditorUI#destroy() cascade. It should be destroyed along\n        // with the last editor only (https://github.com/ckeditor/ckeditor5/issues/12602).\n        if (editorBodyViewCollection && editorBodyViewCollection.has(this.balloonPanelView)) {\n            editorBodyViewCollection.remove(this.balloonPanelView);\n        }\n        if (!TooltipManager._editors.size) {\n            this._unpinTooltip();\n            this.balloonPanelView.destroy();\n            this.stopListening();\n            TooltipManager._instance = null;\n        }\n    }\n    /**\n     * Returns {@link #balloonPanelView} {@link module:utils/dom/position~PositioningFunction positioning functions} for a given position\n     * name.\n     *\n     * @param position Name of the position (`s`, `se`, `sw`, `n`, `e`, or `w`).\n     * @returns Positioning functions to be used by the {@link #balloonPanelView}.\n     */\n    static getPositioningFunctions(position) {\n        const defaultPositions = TooltipManager.defaultBalloonPositions;\n        return {\n            // South is most popular. We can use positioning heuristics to avoid clipping by the viewport with the sane fallback.\n            s: [\n                defaultPositions.southArrowNorth,\n                defaultPositions.southArrowNorthEast,\n                defaultPositions.southArrowNorthWest\n            ],\n            n: [defaultPositions.northArrowSouth],\n            e: [defaultPositions.eastArrowWest],\n            w: [defaultPositions.westArrowEast],\n            sw: [defaultPositions.southArrowNorthEast],\n            se: [defaultPositions.southArrowNorthWest]\n        }[position];\n    }\n    /**\n     * Handles displaying tooltips on `mouseenter` and `focus` in DOM.\n     *\n     * @param evt An object containing information about the fired event.\n     * @param domEvent The DOM event.\n     */\n    _onEnterOrFocus(evt, { target }) {\n        const elementWithTooltipAttribute = getDescendantWithTooltip(target);\n        // Abort when there's no descendant needing tooltip.\n        if (!elementWithTooltipAttribute) {\n            return;\n        }\n        // Abort to avoid flashing when, for instance:\n        // * a tooltip is displayed for a focused element, then the same element gets mouseentered,\n        // * a tooltip is displayed for an element via mouseenter, then the focus moves to the same element.\n        if (elementWithTooltipAttribute === this._currentElementWithTooltip) {\n            return;\n        }\n        this._unpinTooltip();\n        this._pinTooltipDebounced(elementWithTooltipAttribute, getTooltipData(elementWithTooltipAttribute));\n    }\n    /**\n     * Handles hiding tooltips on `mouseleave` and `blur` in DOM.\n     *\n     * @param evt An object containing information about the fired event.\n     * @param domEvent The DOM event.\n     */\n    _onLeaveOrBlur(evt, { target, relatedTarget }) {\n        if (evt.name === 'mouseleave') {\n            // Don't act when the event does not concern a DOM element (e.g. a mouseleave out of an entire document),\n            if (!isElement(target)) {\n                return;\n            }\n            // If a tooltip is currently visible, don't act for a targets other than the one it is attached to.\n            // For instance, a random mouseleave far away in the page should not unpin the tooltip that was pinned because\n            // of a previous focus. Only leaving the same element should hide the tooltip.\n            if (this._currentElementWithTooltip && target !== this._currentElementWithTooltip) {\n                return;\n            }\n            const descendantWithTooltip = getDescendantWithTooltip(target);\n            const relatedDescendantWithTooltip = getDescendantWithTooltip(relatedTarget);\n            // Unpin when the mouse was leaving element with a tooltip to a place which does not have or has a different tooltip.\n            // Note that this should happen whether the tooltip is already visible or not, for instance, it could be invisible but queued\n            // (debounced): it should get canceled.\n            if (descendantWithTooltip && descendantWithTooltip !== relatedDescendantWithTooltip) {\n                this._unpinTooltip();\n            }\n        }\n        else {\n            // If a tooltip is currently visible, don't act for a targets other than the one it is attached to.\n            // For instance, a random blur in the web page should not unpin the tooltip that was pinned because of a previous mouseenter.\n            if (this._currentElementWithTooltip && target !== this._currentElementWithTooltip) {\n                return;\n            }\n            // Note that unpinning should happen whether the tooltip is already visible or not, for instance, it could be invisible but\n            // queued (debounced): it should get canceled (e.g. quick focus then quick blur using the keyboard).\n            this._unpinTooltip();\n        }\n    }\n    /**\n     * Handles hiding tooltips on `scroll` in DOM.\n     *\n     * @param evt An object containing information about the fired event.\n     * @param domEvent The DOM event.\n     */\n    _onScroll(evt, { target }) {\n        // No tooltip, no reason to react on scroll.\n        if (!this._currentElementWithTooltip) {\n            return;\n        }\n        // When scrolling a container that has both the balloon and the current element (common ancestor), the balloon can remain\n        // visible (e.g. scrolling ≤body>). Otherwise, to avoid glitches (clipping, lagging) better just hide the tooltip.\n        // Also, don't do anything when scrolling an unrelated DOM element that has nothing to do with the current element and the balloon.\n        if (target.contains(this.balloonPanelView.element) && target.contains(this._currentElementWithTooltip)) {\n            return;\n        }\n        this._unpinTooltip();\n    }\n    /**\n     * Pins the tooltip to a specific DOM element.\n     *\n     * @param options.text Text of the tooltip to display.\n     * @param options.position The position of the tooltip.\n     * @param options.cssClass Additional CSS class of the balloon with the tooltip.\n     */\n    _pinTooltip(targetDomElement, { text, position, cssClass }) {\n        // Use the body collection of the first editor.\n        const bodyViewCollection = first(TooltipManager._editors.values()).ui.view.body;\n        if (!bodyViewCollection.has(this.balloonPanelView)) {\n            bodyViewCollection.add(this.balloonPanelView);\n        }\n        this.tooltipTextView.text = text;\n        this.balloonPanelView.pin({\n            target: targetDomElement,\n            positions: TooltipManager.getPositioningFunctions(position)\n        });\n        this._resizeObserver = new ResizeObserver(targetDomElement, () => {\n            // The ResizeObserver will call its callback when the target element hides and the tooltip\n            // should also disappear (https://github.com/ckeditor/ckeditor5/issues/12492).\n            if (!isVisible(targetDomElement)) {\n                this._unpinTooltip();\n            }\n        });\n        this.balloonPanelView.class = [BALLOON_CLASS, cssClass]\n            .filter(className => className)\n            .join(' ');\n        // Start responding to changes in editor UI or content layout. For instance, when collaborators change content\n        // and a contextual toolbar attached to a content starts to move (and so should move the tooltip).\n        // Note: Using low priority to let other listeners that position contextual toolbars etc. to react first.\n        for (const editor of TooltipManager._editors) {\n            this.listenTo(editor.ui, 'update', this._updateTooltipPosition.bind(this), { priority: 'low' });\n        }\n        this._currentElementWithTooltip = targetDomElement;\n        this._currentTooltipPosition = position;\n    }\n    /**\n     * Unpins the tooltip and cancels all queued pinning.\n     */\n    _unpinTooltip() {\n        this._pinTooltipDebounced.cancel();\n        this.balloonPanelView.unpin();\n        for (const editor of TooltipManager._editors) {\n            this.stopListening(editor.ui, 'update');\n        }\n        this._currentElementWithTooltip = null;\n        this._currentTooltipPosition = null;\n        if (this._resizeObserver) {\n            this._resizeObserver.destroy();\n        }\n    }\n    /**\n     * Updates the position of the tooltip so it stays in sync with the element it is pinned to.\n     *\n     * Hides the tooltip when the element is no longer visible in DOM.\n     */\n    _updateTooltipPosition() {\n        // This could happen if the tooltip was attached somewhere in a contextual content toolbar and the toolbar\n        // disappeared (e.g. removed an image).\n        if (!isVisible(this._currentElementWithTooltip)) {\n            this._unpinTooltip();\n            return;\n        }\n        this.balloonPanelView.pin({\n            target: this._currentElementWithTooltip,\n            positions: TooltipManager.getPositioningFunctions(this._currentTooltipPosition)\n        });\n    }\n}\n/**\n * A set of default {@link module:utils/dom/position~PositioningFunction positioning functions} used by the `TooltipManager`\n * to pin tooltips in different positions.\n */\nTooltipManager.defaultBalloonPositions = generatePositions({\n    heightOffset: 5,\n    sideOffset: 13\n});\n/**\n * A set of editors the single tooltip manager instance must listen to.\n * This is mostly to handle `EditorUI#update` listeners from individual editors.\n */\nTooltipManager._editors = new Set();\n/**\n * A reference to the `TooltipManager` instance. The class is a singleton and as such,\n * successive attempts at creating instances should return this instance.\n */\nTooltipManager._instance = null;\nfunction getDescendantWithTooltip(element) {\n    if (!isElement(element)) {\n        return null;\n    }\n    return element.closest('[data-cke-tooltip-text]:not([data-cke-tooltip-disabled])');\n}\nfunction getTooltipData(element) {\n    return {\n        text: element.dataset.ckeTooltipText,\n        position: (element.dataset.ckeTooltipPosition || 's'),\n        cssClass: element.dataset.ckeTooltipClass || ''\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { DomEmitterMixin, Rect, verifyLicense } from '@ckeditor/ckeditor5-utils';\nimport BalloonPanelView from '../panel/balloon/balloonpanelview';\nimport IconView from '../icon/iconview';\nimport View from '../view';\nimport { throttle } from 'lodash-es';\nimport poweredByIcon from '../../theme/icons/project-logo.svg';\nconst ICON_WIDTH = 53;\nconst ICON_HEIGHT = 10;\n// ⚠ Note, whenever changing the threshold, make sure to update the docs/support/managing-ckeditor-logo.md docs\n// as this information is also mentioned there ⚠.\nconst NARROW_ROOT_HEIGHT_THRESHOLD = 50;\nconst NARROW_ROOT_WIDTH_THRESHOLD = 350;\nconst DEFAULT_LABEL = 'Powered by';\n/**\n * A helper that enables the \"powered by\" feature in the editor and renders a link to the project's\n * webpage next to the bottom of the editable element (editor root, source editing area, etc.) when the editor is focused.\n *\n * @private\n */\nexport default class PoweredBy extends DomEmitterMixin() {\n    /**\n     * Creates a \"powered by\" helper for a given editor. The feature is initialized on Editor#ready\n     * event.\n     *\n     * @param editor\n     */\n    constructor(editor) {\n        super();\n        this.editor = editor;\n        this._balloonView = null;\n        this._lastFocusedEditableElement = null;\n        this._showBalloonThrottled = throttle(this._showBalloon.bind(this), 50, { leading: true });\n        editor.on('ready', this._handleEditorReady.bind(this));\n    }\n    /**\n     * Destroys the \"powered by\" helper along with its view.\n     */\n    destroy() {\n        const balloon = this._balloonView;\n        if (balloon) {\n            // Balloon gets destroyed by the body collection.\n            // The powered by view gets destroyed by the balloon.\n            balloon.unpin();\n            this._balloonView = null;\n        }\n        this._showBalloonThrottled.cancel();\n        this.stopListening();\n    }\n    /**\n     * Enables \"powered by\" label once the editor (ui) is ready.\n     */\n    _handleEditorReady() {\n        const editor = this.editor;\n        const forceVisible = !!editor.config.get('ui.poweredBy.forceVisible');\n        /* istanbul ignore next -- @preserve */\n        if (!forceVisible && verifyLicense(editor.config.get('licenseKey')) === 'VALID') {\n            return;\n        }\n        // No view means no body collection to append the powered by balloon to.\n        if (!editor.ui.view) {\n            return;\n        }\n        editor.ui.focusTracker.on('change:isFocused', (evt, data, isFocused) => {\n            this._updateLastFocusedEditableElement();\n            if (isFocused) {\n                this._showBalloon();\n            }\n            else {\n                this._hideBalloon();\n            }\n        });\n        editor.ui.focusTracker.on('change:focusedElement', (evt, data, focusedElement) => {\n            this._updateLastFocusedEditableElement();\n            if (focusedElement) {\n                this._showBalloon();\n            }\n        });\n        editor.ui.on('update', () => {\n            this._showBalloonThrottled();\n        });\n    }\n    /**\n     * Creates an instance of the {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView balloon panel}\n     * with the \"powered by\" view inside ready for positioning.\n     */\n    _createBalloonView() {\n        const editor = this.editor;\n        const balloon = this._balloonView = new BalloonPanelView();\n        const poweredByConfig = getNormalizedConfig(editor);\n        const view = new PoweredByView(editor.locale, poweredByConfig.label);\n        balloon.content.add(view);\n        balloon.set({\n            class: 'ck-powered-by-balloon'\n        });\n        editor.ui.view.body.add(balloon);\n        editor.ui.focusTracker.add(balloon.element);\n        this._balloonView = balloon;\n    }\n    /**\n     * Attempts to display the balloon with the \"powered by\" view.\n     */\n    _showBalloon() {\n        if (!this._lastFocusedEditableElement) {\n            return;\n        }\n        const attachOptions = getBalloonAttachOptions(this.editor, this._lastFocusedEditableElement);\n        if (attachOptions) {\n            if (!this._balloonView) {\n                this._createBalloonView();\n            }\n            this._balloonView.pin(attachOptions);\n        }\n    }\n    /**\n     * Hides the \"powered by\" balloon if already visible.\n     */\n    _hideBalloon() {\n        if (this._balloonView) {\n            this._balloonView.unpin();\n        }\n    }\n    /**\n     * Updates the {@link #_lastFocusedEditableElement} based on the state of the global focus tracker.\n     */\n    _updateLastFocusedEditableElement() {\n        const editor = this.editor;\n        const isFocused = editor.ui.focusTracker.isFocused;\n        const focusedElement = editor.ui.focusTracker.focusedElement;\n        if (!isFocused || !focusedElement) {\n            this._lastFocusedEditableElement = null;\n            return;\n        }\n        const editableEditorElements = Array.from(editor.ui.getEditableElementsNames()).map(name => {\n            return editor.ui.getEditableElement(name);\n        });\n        if (editableEditorElements.includes(focusedElement)) {\n            this._lastFocusedEditableElement = focusedElement;\n        }\n        else {\n            // If it's none of the editable element, then the focus is somewhere in the UI. Let's display powered by\n            // over the first element then.\n            this._lastFocusedEditableElement = editableEditorElements[0];\n        }\n    }\n}\n/**\n * A view displaying a \"powered by\" label and project logo wrapped in a link.\n */\nclass PoweredByView extends View {\n    /**\n     * Created an instance of the \"powered by\" view.\n     *\n     * @param locale The localization services instance.\n     * @param label The label text.\n     */\n    constructor(locale, label) {\n        super(locale);\n        const iconView = new IconView();\n        const bind = this.bindTemplate;\n        iconView.set({\n            content: poweredByIcon,\n            isColorInherited: false\n        });\n        iconView.extendTemplate({\n            attributes: {\n                style: {\n                    width: ICON_WIDTH + 'px',\n                    height: ICON_HEIGHT + 'px'\n                }\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: ['ck', 'ck-powered-by'],\n                'aria-hidden': true\n            },\n            children: [\n                {\n                    tag: 'a',\n                    attributes: {\n                        href: 'https://ckeditor.com/?utm_source=ckeditor&' +\n                            'utm_medium=referral&utm_campaign=701Dn000000hVgmIAE_powered_by_ckeditor_logo',\n                        target: '_blank',\n                        tabindex: '-1'\n                    },\n                    children: [\n                        ...label ? [\n                            {\n                                tag: 'span',\n                                attributes: {\n                                    class: ['ck', 'ck-powered-by__label']\n                                },\n                                children: [label]\n                            }\n                        ] : [],\n                        iconView\n                    ],\n                    on: {\n                        dragstart: bind.to(evt => evt.preventDefault())\n                    }\n                }\n            ]\n        });\n    }\n}\nfunction getBalloonAttachOptions(editor, focusedEditableElement) {\n    const poweredByConfig = getNormalizedConfig(editor);\n    const positioningFunction = poweredByConfig.side === 'right' ?\n        getLowerRightCornerPosition(focusedEditableElement, poweredByConfig) :\n        getLowerLeftCornerPosition(focusedEditableElement, poweredByConfig);\n    return {\n        target: focusedEditableElement,\n        positions: [positioningFunction]\n    };\n}\nfunction getLowerRightCornerPosition(focusedEditableElement, config) {\n    return getLowerCornerPosition(focusedEditableElement, config, (rootRect, balloonRect) => {\n        return rootRect.left + rootRect.width - balloonRect.width - config.horizontalOffset;\n    });\n}\nfunction getLowerLeftCornerPosition(focusedEditableElement, config) {\n    return getLowerCornerPosition(focusedEditableElement, config, rootRect => rootRect.left + config.horizontalOffset);\n}\nfunction getLowerCornerPosition(focusedEditableElement, config, getBalloonLeft) {\n    return (visibleEditableElementRect, balloonRect) => {\n        const editableElementRect = new Rect(focusedEditableElement);\n        if (editableElementRect.width < NARROW_ROOT_WIDTH_THRESHOLD || editableElementRect.height < NARROW_ROOT_HEIGHT_THRESHOLD) {\n            return null;\n        }\n        let balloonTop;\n        if (config.position === 'inside') {\n            balloonTop = editableElementRect.bottom - balloonRect.height;\n        }\n        else {\n            balloonTop = editableElementRect.bottom - balloonRect.height / 2;\n        }\n        balloonTop -= config.verticalOffset;\n        const balloonLeft = getBalloonLeft(editableElementRect, balloonRect);\n        // Clone the editable element rect and place it where the balloon would be placed.\n        // This will allow getVisible() to work from editable element's perspective (rect source).\n        // and yield a result as if the balloon was on the same (scrollable) layer as the editable element.\n        const newBalloonPositionRect = visibleEditableElementRect\n            .clone()\n            .moveTo(balloonLeft, balloonTop)\n            .getIntersection(balloonRect.clone().moveTo(balloonLeft, balloonTop));\n        const newBalloonPositionVisibleRect = newBalloonPositionRect.getVisible();\n        if (!newBalloonPositionVisibleRect || newBalloonPositionVisibleRect.getArea() < balloonRect.getArea()) {\n            return null;\n        }\n        return {\n            top: balloonTop,\n            left: balloonLeft,\n            name: `position_${config.position}-side_${config.side}`,\n            config: {\n                withArrow: false\n            }\n        };\n    };\n}\nfunction getNormalizedConfig(editor) {\n    const userConfig = editor.config.get('ui.poweredBy');\n    const position = userConfig && userConfig.position || 'border';\n    return {\n        position,\n        label: DEFAULT_LABEL,\n        verticalOffset: position === 'inside' ? 5 : 0,\n        horizontalOffset: 5,\n        side: editor.locale.contentLanguageDirection === 'ltr' ? 'right' : 'left',\n        ...userConfig\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport View from './view';\nimport '../theme/components/arialiveannouncer/arialiveannouncer.css';\n/**\n * The politeness level of an `aria-live` announcement.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions#Politeness_levels\n */\nexport var AriaLiveAnnouncerPoliteness;\n(function (AriaLiveAnnouncerPoliteness) {\n    AriaLiveAnnouncerPoliteness[\"POLITE\"] = \"polite\";\n    AriaLiveAnnouncerPoliteness[\"ASSERTIVE\"] = \"assertive\";\n})(AriaLiveAnnouncerPoliteness || (AriaLiveAnnouncerPoliteness = {}));\n/**\n * An accessibility helper that manages all ARIA live regions associated with an editor instance. ARIA live regions announce changes\n * to the state of the editor features.\n *\n * These announcements are consumed and propagated by screen readers and give users a better understanding of the current\n * state of the editor.\n *\n * To announce a state change to an editor feature named `'Some feature'`, use the {@link #announce} method:\n * ```ts\n * editor.ui.ariaLiveAnnouncer.announce( 'Some feature', 'Text of an announcement.' );\n * ```\n */\nexport default class AriaLiveAnnouncer {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        this.editor = editor;\n    }\n    /**\n     * Sets an announcement text to an aria region associated with a specific editor feature. The text is then\n     * announced by a screen reader to the user.\n     *\n     * If the aria region of a given name does not exist, it will be created and can be re-used later. The name of the region\n     * groups announcements originating from a specific editor feature and does not get announced by a screen reader.\n     *\n     * Using multiple regions allows for many announcements to be emitted in a short period of time. Changes to ARIA-live announcements\n     * are captured by a screen reader and read out in the order they were emitted.\n     *\n     * The default announcement politeness level is `'polite'`.\n     *\n     * ```ts\n     * // Most screen readers will queue announcements from multiple aria-live regions and read them out in the order they were emitted.\n     * editor.ui.ariaLiveAnnouncer.announce( 'image', 'Image uploaded.' );\n     * editor.ui.ariaLiveAnnouncer.announce( 'network', 'Connection lost. Reconnecting.' );\n     * ```\n     */\n    announce(regionName, announcementText, politeness = AriaLiveAnnouncerPoliteness.POLITE) {\n        const editor = this.editor;\n        if (!this.view) {\n            this.view = new AriaLiveAnnouncerView(editor.locale);\n            editor.ui.view.body.add(this.view);\n        }\n        let regionView = this.view.regionViews.find(view => view.regionName === regionName);\n        if (!regionView) {\n            regionView = new AriaLiveAnnouncerRegionView(this.view.locale);\n            this.view.regionViews.add(regionView);\n        }\n        regionView.set({\n            regionName,\n            text: announcementText,\n            politeness\n        });\n    }\n}\n/**\n * The view that aggregates all `aria-live` regions.\n */\nexport class AriaLiveAnnouncerView extends View {\n    constructor(locale) {\n        super(locale);\n        this.regionViews = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-aria-live-announcer'\n                ]\n            },\n            children: this.regionViews\n        });\n    }\n}\n/**\n * The view that represents a single `aria-live` region (e.g. for a specific editor feature) and its text.\n */\nexport class AriaLiveAnnouncerRegionView extends View {\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('regionName', '');\n        this.set('text', '');\n        this.set('politeness', AriaLiveAnnouncerPoliteness.POLITE);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                role: 'region',\n                'data-region': bind.to('regionName'),\n                'aria-live': bind.to('politeness')\n            },\n            children: [\n                { text: bind.to('text') }\n            ]\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editorui/editorui\n */\n/* globals console */\nimport ComponentFactory from '../componentfactory';\nimport TooltipManager from '../tooltipmanager';\nimport PoweredBy from './poweredby';\nimport AriaLiveAnnouncer from '../arialiveannouncer';\nimport { ObservableMixin, isVisible, FocusTracker } from '@ckeditor/ckeditor5-utils';\n/**\n * A class providing the minimal interface that is required to successfully bootstrap any editor UI.\n */\nexport default class EditorUI extends ObservableMixin() {\n    /**\n     * Creates an instance of the editor UI class.\n     *\n     * @param editor The editor instance.\n     */\n    constructor(editor) {\n        super();\n        /**\n         * Indicates the UI is ready. Set `true` after {@link #event:ready} event is fired.\n         *\n         * @readonly\n         * @default false\n         */\n        this.isReady = false;\n        /**\n         * Stores all editable elements used by the editor instance.\n         */\n        this._editableElementsMap = new Map();\n        /**\n         * All available & focusable toolbars.\n         */\n        this._focusableToolbarDefinitions = [];\n        const editingView = editor.editing.view;\n        this.editor = editor;\n        this.componentFactory = new ComponentFactory(editor);\n        this.focusTracker = new FocusTracker();\n        this.tooltipManager = new TooltipManager(editor);\n        this.poweredBy = new PoweredBy(editor);\n        this.ariaLiveAnnouncer = new AriaLiveAnnouncer(editor);\n        this.set('viewportOffset', this._readViewportOffsetFromConfig());\n        this.once('ready', () => {\n            this.isReady = true;\n        });\n        // Informs UI components that should be refreshed after layout change.\n        this.listenTo(editingView.document, 'layoutChanged', this.update.bind(this));\n        this.listenTo(editingView, 'scrollToTheSelection', this._handleScrollToTheSelection.bind(this));\n        this._initFocusTracking();\n    }\n    /**\n     * The main (outermost) DOM element of the editor UI.\n     *\n     * For example, in {@link module:editor-classic/classiceditor~ClassicEditor} it is a `<div>` which\n     * wraps the editable element and the toolbar. In {@link module:editor-inline/inlineeditor~InlineEditor}\n     * it is the editable element itself (as there is no other wrapper). However, in\n     * {@link module:editor-decoupled/decouplededitor~DecoupledEditor} it is set to `null` because this editor does not\n     * come with a single \"main\" HTML element (its editable element and toolbar are separate).\n     *\n     * This property can be understood as a shorthand for retrieving the element that a specific editor integration\n     * considers to be its main DOM element.\n     */\n    get element() {\n        return null;\n    }\n    /**\n     * Fires the {@link module:ui/editorui/editorui~EditorUI#event:update `update`} event.\n     *\n     * This method should be called when the editor UI (e.g. positions of its balloons) needs to be updated due to\n     * some environmental change which CKEditor 5 is not aware of (e.g. resize of a container in which it is used).\n     */\n    update() {\n        this.fire('update');\n    }\n    /**\n     * Destroys the UI.\n     */\n    destroy() {\n        this.stopListening();\n        this.focusTracker.destroy();\n        this.tooltipManager.destroy(this.editor);\n        this.poweredBy.destroy();\n        // Clean–up the references to the CKEditor instance stored in the native editable DOM elements.\n        for (const domElement of this._editableElementsMap.values()) {\n            domElement.ckeditorInstance = null;\n            this.editor.keystrokes.stopListening(domElement);\n        }\n        this._editableElementsMap = new Map();\n        this._focusableToolbarDefinitions = [];\n    }\n    /**\n     * Stores the native DOM editable element used by the editor under a unique name.\n     *\n     * Also, registers the element in the editor to maintain the accessibility of the UI. When the user is editing text in a focusable\n     * editable area, they can use the <kbd>Alt</kbd> + <kbd>F10</kbd> keystroke to navigate over editor toolbars. See {@link #addToolbar}.\n     *\n     * @param rootName The unique name of the editable element.\n     * @param domElement The native DOM editable element.\n     */\n    setEditableElement(rootName, domElement) {\n        this._editableElementsMap.set(rootName, domElement);\n        // Put a reference to the CKEditor instance in the editable native DOM element.\n        // It helps 3rd–party software (browser extensions, other libraries) access and recognize\n        // CKEditor 5 instances (editing roots) and use their API (there is no global editor\n        // instance registry).\n        if (!domElement.ckeditorInstance) {\n            domElement.ckeditorInstance = this.editor;\n        }\n        // Register the element, so it becomes available for Alt+F10 and Esc navigation.\n        this.focusTracker.add(domElement);\n        const setUpKeystrokeHandler = () => {\n            // The editing view of the editor is already listening to keystrokes from DOM roots (see: KeyObserver).\n            // Do not duplicate listeners.\n            if (this.editor.editing.view.getDomRoot(rootName)) {\n                return;\n            }\n            this.editor.keystrokes.listenTo(domElement);\n        };\n        // For editable elements set by features after EditorUI is ready (e.g. source editing).\n        if (this.isReady) {\n            setUpKeystrokeHandler();\n        }\n        // For editable elements set while the editor is being created (e.g. DOM roots).\n        else {\n            this.once('ready', setUpKeystrokeHandler);\n        }\n    }\n    /**\n     * Removes the editable from the editor UI. Removes all handlers added by {@link #setEditableElement}.\n     *\n     * @param rootName The name of the editable element to remove.\n     */\n    removeEditableElement(rootName) {\n        const domElement = this._editableElementsMap.get(rootName);\n        if (!domElement) {\n            return;\n        }\n        this._editableElementsMap.delete(rootName);\n        this.editor.keystrokes.stopListening(domElement);\n        this.focusTracker.remove(domElement);\n        domElement.ckeditorInstance = null;\n    }\n    /**\n     * Returns the editable editor element with the given name or null if editable does not exist.\n     *\n     * @param rootName The editable name.\n     */\n    getEditableElement(rootName = 'main') {\n        return this._editableElementsMap.get(rootName);\n    }\n    /**\n     * Returns array of names of all editor editable elements.\n     */\n    getEditableElementsNames() {\n        return this._editableElementsMap.keys();\n    }\n    /**\n     * Adds a toolbar to the editor UI. Used primarily to maintain the accessibility of the UI.\n     *\n     * Focusable toolbars can be accessed (focused) by users by pressing the <kbd>Alt</kbd> + <kbd>F10</kbd> keystroke.\n     * Successive keystroke presses navigate over available toolbars.\n     *\n     * @param toolbarView A instance of the toolbar to be registered.\n     */\n    addToolbar(toolbarView, options = {}) {\n        if (toolbarView.isRendered) {\n            this.focusTracker.add(toolbarView.element);\n            this.editor.keystrokes.listenTo(toolbarView.element);\n        }\n        else {\n            toolbarView.once('render', () => {\n                this.focusTracker.add(toolbarView.element);\n                this.editor.keystrokes.listenTo(toolbarView.element);\n            });\n        }\n        this._focusableToolbarDefinitions.push({ toolbarView, options });\n    }\n    /**\n     * Stores all editable elements used by the editor instance.\n     *\n     * @deprecated\n     */\n    get _editableElements() {\n        /**\n         * The {@link module:ui/editorui/editorui~EditorUI#_editableElements `EditorUI#_editableElements`} property has been\n         * deprecated and will be removed in the near future. Please use\n         * {@link module:ui/editorui/editorui~EditorUI#setEditableElement `setEditableElement()`} and\n         * {@link module:ui/editorui/editorui~EditorUI#getEditableElement `getEditableElement()`} methods instead.\n         *\n         * @error editor-ui-deprecated-editable-elements\n         * @param editorUI Editor UI instance the deprecated property belongs to.\n         */\n        console.warn('editor-ui-deprecated-editable-elements: ' +\n            'The EditorUI#_editableElements property has been deprecated and will be removed in the near future.', { editorUI: this });\n        return this._editableElementsMap;\n    }\n    /**\n     * Returns viewport offsets object:\n     *\n     * ```js\n     * {\n     * \ttop: Number,\n     * \tright: Number,\n     * \tbottom: Number,\n     * \tleft: Number\n     * }\n     * ```\n     *\n     * Only top property is currently supported.\n     */\n    _readViewportOffsetFromConfig() {\n        const editor = this.editor;\n        const viewportOffsetConfig = editor.config.get('ui.viewportOffset');\n        if (viewportOffsetConfig) {\n            return viewportOffsetConfig;\n        }\n        // Not present in EditorConfig type, because it's legacy. Hence the `as` expression.\n        const legacyOffsetConfig = editor.config.get('toolbar.viewportTopOffset');\n        // Fall back to deprecated toolbar config.\n        if (legacyOffsetConfig) {\n            /**\n             * The {@link module:core/editor/editorconfig~EditorConfig#toolbar `EditorConfig#toolbar.viewportTopOffset`}\n             * property has been deprecated and will be removed in the near future. Please use\n             * {@link module:core/editor/editorconfig~EditorConfig#ui `EditorConfig#ui.viewportOffset`} instead.\n             *\n             * @error editor-ui-deprecated-viewport-offset-config\n             */\n            console.warn('editor-ui-deprecated-viewport-offset-config: ' +\n                'The `toolbar.vieportTopOffset` configuration option is deprecated. ' +\n                'It will be removed from future CKEditor versions. Use `ui.viewportOffset.top` instead.');\n            return { top: legacyOffsetConfig };\n        }\n        // More keys to come in the future.\n        return { top: 0 };\n    }\n    /**\n     * Starts listening for <kbd>Alt</kbd> + <kbd>F10</kbd> and <kbd>Esc</kbd> keystrokes in the context of focusable\n     * {@link #setEditableElement editable elements} and {@link #addToolbar toolbars}\n     * to allow users navigate across the UI.\n     */\n    _initFocusTracking() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        let lastFocusedForeignElement;\n        let candidateDefinitions;\n        // Focus the next focusable toolbar on <kbd>Alt</kbd> + <kbd>F10</kbd>.\n        editor.keystrokes.set('Alt+F10', (data, cancel) => {\n            const focusedElement = this.focusTracker.focusedElement;\n            // Focus moved out of a DOM element that\n            // * is not a toolbar,\n            // * does not belong to the editing view (e.g. source editing).\n            if (Array.from(this._editableElementsMap.values()).includes(focusedElement) &&\n                !Array.from(editingView.domRoots.values()).includes(focusedElement)) {\n                lastFocusedForeignElement = focusedElement;\n            }\n            const currentFocusedToolbarDefinition = this._getCurrentFocusedToolbarDefinition();\n            // * When focusing a toolbar for the first time, set the array of definitions for successive presses of Alt+F10.\n            // This ensures, the navigation works always the same and no pair of toolbars takes over\n            // (e.g. image and table toolbars when a selected image is inside a cell).\n            // * It could be that the focus went to the toolbar by clicking a toolbar item (e.g. a dropdown). In this case,\n            // there were no candidates so they must be obtained (#12339).\n            if (!currentFocusedToolbarDefinition || !candidateDefinitions) {\n                candidateDefinitions = this._getFocusableCandidateToolbarDefinitions();\n            }\n            // In a single Alt+F10 press, check all candidates but if none were focused, don't go any further.\n            // This prevents an infinite loop.\n            for (let i = 0; i < candidateDefinitions.length; i++) {\n                const candidateDefinition = candidateDefinitions.shift();\n                // Put the first definition to the back of the array. This allows circular navigation over all toolbars\n                // on successive presses of Alt+F10.\n                candidateDefinitions.push(candidateDefinition);\n                // Don't focus the same toolbar again. If you did, this would move focus from the nth focused toolbar item back to the\n                // first item as per ToolbarView#focus() if the user navigated inside the toolbar.\n                if (candidateDefinition !== currentFocusedToolbarDefinition &&\n                    this._focusFocusableCandidateToolbar(candidateDefinition)) {\n                    // Clean up after a current visible toolbar when switching to the next one.\n                    if (currentFocusedToolbarDefinition && currentFocusedToolbarDefinition.options.afterBlur) {\n                        currentFocusedToolbarDefinition.options.afterBlur();\n                    }\n                    break;\n                }\n            }\n            cancel();\n        });\n        // Blur the focused toolbar on <kbd>Esc</kbd> and bring the focus back to its origin.\n        editor.keystrokes.set('Esc', (data, cancel) => {\n            const focusedToolbarDef = this._getCurrentFocusedToolbarDefinition();\n            if (!focusedToolbarDef) {\n                return;\n            }\n            // Bring focus back to where it came from before focusing the toolbar:\n            // 1. If it came from outside the engine view (e.g. source editing), move it there.\n            if (lastFocusedForeignElement) {\n                lastFocusedForeignElement.focus();\n                lastFocusedForeignElement = null;\n            }\n            // 2. There are two possibilities left:\n            //   2.1. It could be that the focus went from an editable element in the view (root or nested).\n            //   2.2. It could be the focus went straight to the toolbar before even focusing the editing area.\n            // In either case, just focus the view editing. The focus will land where it belongs.\n            else {\n                editor.editing.view.focus();\n            }\n            // Clean up after the toolbar if there is anything to do there.\n            if (focusedToolbarDef.options.afterBlur) {\n                focusedToolbarDef.options.afterBlur();\n            }\n            cancel();\n        });\n    }\n    /**\n     * Returns definitions of toolbars that could potentially be focused, sorted by their importance for the user.\n     *\n     * Focusable toolbars candidates are either:\n     * * already visible,\n     * * have `beforeFocus()` set in their {@link module:ui/editorui/editorui~FocusableToolbarDefinition definition} that suggests that\n     * they might show up when called. Keep in mind that determining whether a toolbar will show up (and become focusable) is impossible\n     * at this stage because it depends on its implementation, that in turn depends on the editing context (selection).\n     *\n     * **Note**: Contextual toolbars take precedence over regular toolbars.\n     */\n    _getFocusableCandidateToolbarDefinitions() {\n        const definitions = [];\n        for (const toolbarDef of this._focusableToolbarDefinitions) {\n            const { toolbarView, options } = toolbarDef;\n            if (isVisible(toolbarView.element) || options.beforeFocus) {\n                definitions.push(toolbarDef);\n            }\n        }\n        // Contextual and already visible toolbars have higher priority. If both are true, the toolbar will always focus first.\n        // For instance, a selected widget toolbar vs inline editor toolbar: both are visible but the widget toolbar is contextual.\n        definitions.sort((defA, defB) => getToolbarDefinitionWeight(defA) - getToolbarDefinitionWeight(defB));\n        return definitions;\n    }\n    /**\n     * Returns a definition of the toolbar that is currently visible and focused (one of its children has focus).\n     *\n     * `null` is returned when no toolbar is currently focused.\n     */\n    _getCurrentFocusedToolbarDefinition() {\n        for (const definition of this._focusableToolbarDefinitions) {\n            if (definition.toolbarView.element && definition.toolbarView.element.contains(this.focusTracker.focusedElement)) {\n                return definition;\n            }\n        }\n        return null;\n    }\n    /**\n     * Focuses a focusable toolbar candidate using its definition.\n     *\n     * @param candidateToolbarDefinition A definition of the toolbar to focus.\n     * @returns `true` when the toolbar candidate was focused. `false` otherwise.\n     */\n    _focusFocusableCandidateToolbar(candidateToolbarDefinition) {\n        const { toolbarView, options: { beforeFocus } } = candidateToolbarDefinition;\n        if (beforeFocus) {\n            beforeFocus();\n        }\n        // If it didn't show up after beforeFocus(), it's not focusable at all.\n        if (!isVisible(toolbarView.element)) {\n            return false;\n        }\n        toolbarView.focus();\n        return true;\n    }\n    /**\n     * Provides an integration between {@link #viewportOffset} and {@link module:utils/dom/scroll~scrollViewportToShowTarget}.\n     * It allows the UI-agnostic engine method to consider user-configured viewport offsets specific for the integration.\n     *\n     * @param evt The `scrollToTheSelection` event info.\n     * @param data The payload carried by the `scrollToTheSelection` event.\n     */\n    _handleScrollToTheSelection(evt, data) {\n        const configuredViewportOffset = {\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            ...this.viewportOffset\n        };\n        data.viewportOffset.top += configuredViewportOffset.top;\n        data.viewportOffset.bottom += configuredViewportOffset.bottom;\n        data.viewportOffset.left += configuredViewportOffset.left;\n        data.viewportOffset.right += configuredViewportOffset.right;\n    }\n}\n/**\n * Returns a number (weight) for a toolbar definition. Visible toolbars have a higher priority and so do\n * contextual toolbars (displayed in the context of a content, for instance, an image toolbar).\n *\n * A standard invisible toolbar is the heaviest. A visible contextual toolbar is the lightest.\n *\n * @param toolbarDef A toolbar definition to be weighted.\n */\nfunction getToolbarDefinitionWeight(toolbarDef) {\n    const { toolbarView, options } = toolbarDef;\n    let weight = 10;\n    // Prioritize already visible toolbars. They should get focused first.\n    if (isVisible(toolbarView.element)) {\n        weight--;\n    }\n    // Prioritize contextual toolbars. They are displayed at the selection.\n    if (options.isContextual) {\n        weight--;\n    }\n    return weight;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editorui/editoruiview\n */\nimport View from '../view';\nimport BodyCollection from './bodycollection';\nimport '../../theme/components/editorui/editorui.css';\n/**\n * The editor UI view class. Base class for the editor main views.\n */\nexport default class EditorUIView extends View {\n    /**\n     * Creates an instance of the editor UI view class.\n     *\n     * @param locale The locale instance.\n     */\n    constructor(locale) {\n        super(locale);\n        this.body = new BodyCollection(locale);\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.body.attachToDom();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this.body.detachFromDom();\n        return super.destroy();\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/formheader/formheaderview\n */\nimport View from '../view';\nimport IconView from '../icon/iconview';\nimport '../../theme/components/formheader/formheader.css';\n/**\n * The class component representing a form header view. It should be used in more advanced forms to\n * describe the main purpose of the form.\n *\n * By default the component contains a bolded label view that has to be set. The label is usually a short (at most 3-word) string.\n * The component can also be extended by any other elements, like: icons, dropdowns, etc.\n *\n * It is used i.a.\n * by {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView}\n * and {@link module:special-characters/ui/specialcharactersnavigationview~SpecialCharactersNavigationView}.\n *\n * The latter is an example, where the component has been extended by {@link module:ui/dropdown/dropdownview~DropdownView} view.\n */\nexport default class FormHeaderView extends View {\n    /**\n     * Creates an instance of the form header class.\n     *\n     * @param locale The locale instance.\n     * @param options.label A label.\n     * @param options.class An additional class.\n     */\n    constructor(locale, options = {}) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('label', options.label || '');\n        this.set('class', options.class || null);\n        this.children = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-form__header',\n                    bind.to('class')\n                ]\n            },\n            children: this.children\n        });\n        if (options.icon) {\n            this.iconView = new IconView();\n            this.iconView.content = options.icon;\n            this.children.add(this.iconView);\n        }\n        const label = new View(locale);\n        label.setTemplate({\n            tag: 'h2',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-form__header__label'\n                ]\n            },\n            children: [\n                { text: bind.to('label') }\n            ]\n        });\n        this.children.add(label);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/model\n */\nimport { ObservableMixin } from '@ckeditor/ckeditor5-utils';\nimport { extend } from 'lodash-es';\n/**\n * The base MVC model class.\n */\nexport default class Model extends ObservableMixin() {\n    /**\n     * Creates a new Model instance.\n     *\n     * @param attributes The model state attributes to be defined during the instance creation.\n     * @param properties The (out of state) properties to be appended to the instance during creation.\n     */\n    constructor(attributes, properties) {\n        super();\n        // Extend this instance with the additional (out of state) properties.\n        if (properties) {\n            extend(this, properties);\n        }\n        // Initialize the attributes.\n        if (attributes) {\n            this.set(attributes);\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/panel/balloon/contextualballoon\n */\nimport BalloonPanelView from './balloonpanelview';\nimport View from '../../view';\nimport ButtonView from '../../button/buttonview';\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { CKEditorError, FocusTracker, Rect, toUnit } from '@ckeditor/ckeditor5-utils';\nimport prevIcon from '../../../theme/icons/previous-arrow.svg';\nimport nextIcon from '../../../theme/icons/next-arrow.svg';\nimport '../../../theme/components/panel/balloonrotator.css';\nimport '../../../theme/components/panel/fakepanel.css';\nconst toPx = toUnit('px');\n/**\n * Provides the common contextual balloon for the editor.\n *\n * The role of this plugin is to unify the contextual balloons logic, simplify views management and help\n * avoid the unnecessary complexity of handling multiple {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n * instances in the editor.\n *\n * This plugin allows for creating single or multiple panel stacks.\n *\n * Each stack may have multiple views, with the one on the top being visible. When the visible view is removed from the stack,\n * the previous view becomes visible.\n *\n * It might be useful to implement nested navigation in a balloon. For instance, a toolbar view may contain a link button.\n * When you click it, a link view (which lets you set the URL) is created and put on top of the toolbar view, so the link panel\n * is displayed. When you finish editing the link and close (remove) the link view, the toolbar view is visible again.\n *\n * However, there are cases when there are multiple independent balloons to be displayed, for instance, if the selection\n * is inside two inline comments at the same time. For such cases, you can create two independent panel stacks.\n * The contextual balloon plugin will create a navigation bar to let the users switch between these panel stacks using the \"Next\"\n * and \"Previous\" buttons.\n *\n * If there are no views in the current stack, the balloon panel will try to switch to the next stack. If there are no\n * panels in any stack, the balloon panel will be hidden.\n *\n * **Note**: To force the balloon panel to show only one view, even if there are other stacks, use the `singleViewMode=true` option\n * when {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon#add adding} a view to a panel.\n *\n * From the implementation point of view, the contextual ballon plugin is reusing a single\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView} instance to display multiple contextual balloon\n * panels in the editor. It also creates a special {@link module:ui/panel/balloon/contextualballoon~RotatorView rotator view},\n * used to manage multiple panel stacks. Rotator view is a child of the balloon panel view and the parent of the specific\n * view you want to display. If there is more than one panel stack to be displayed, the rotator view will add a\n * navigation bar. If there is only one stack, the rotator view is transparent (it does not add any UI elements).\n */\nexport default class ContextualBalloon extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'ContextualBalloon';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        /**\n         * The map of views and their stacks.\n         */\n        this._viewToStack = new Map();\n        /**\n         * The map of IDs and stacks.\n         */\n        this._idToStack = new Map();\n        /**\n         * The common balloon panel view.\n         */\n        this._view = null;\n        /**\n         * Rotator view embedded in the contextual balloon.\n         * Displays the currently visible view in the balloon and provides navigation for switching stacks.\n         */\n        this._rotatorView = null;\n        /**\n         * Displays fake panels under the balloon panel view when multiple stacks are added to the balloon.\n         */\n        this._fakePanelsView = null;\n        this.positionLimiter = () => {\n            const view = this.editor.editing.view;\n            const viewDocument = view.document;\n            const editableElement = viewDocument.selection.editableElement;\n            if (editableElement) {\n                return view.domConverter.mapViewToDom(editableElement.root);\n            }\n            return null;\n        };\n        this.set('visibleView', null);\n        this.set('_numberOfStacks', 0);\n        this.set('_singleViewMode', false);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        if (this._view) {\n            this._view.destroy();\n        }\n        if (this._rotatorView) {\n            this._rotatorView.destroy();\n        }\n        if (this._fakePanelsView) {\n            this._fakePanelsView.destroy();\n        }\n    }\n    /**\n     * The common balloon panel view.\n     */\n    get view() {\n        if (!this._view) {\n            this._createPanelView();\n        }\n        return this._view;\n    }\n    /**\n     * Returns `true` when the given view is in one of the stacks. Otherwise returns `false`.\n     */\n    hasView(view) {\n        return Array.from(this._viewToStack.keys()).includes(view);\n    }\n    /**\n     * Adds a new view to the stack and makes it visible if the current stack is visible\n     * or it is the first view in the balloon.\n     *\n     * @param data The configuration of the view.\n     * @param data.stackId The ID of the stack that the view is added to. Defaults to `'main'`.\n     * @param data.view The content of the balloon.\n     * @param data.position Positioning options.\n     * @param data.balloonClassName An additional CSS class added to the {@link #view balloon} when visible.\n     * @param data.withArrow Whether the {@link #view balloon} should be rendered with an arrow. Defaults to `true`.\n     * @param data.singleViewMode Whether the view should be the only visible view even if other stacks were added. Defaults to `false`.\n     */\n    add(data) {\n        if (!this._view) {\n            this._createPanelView();\n        }\n        if (this.hasView(data.view)) {\n            /**\n             * Trying to add configuration of the same view more than once.\n             *\n             * @error contextualballoon-add-view-exist\n             */\n            throw new CKEditorError('contextualballoon-add-view-exist', [this, data]);\n        }\n        const stackId = data.stackId || 'main';\n        // If new stack is added, creates it and show view from this stack.\n        if (!this._idToStack.has(stackId)) {\n            this._idToStack.set(stackId, new Map([[data.view, data]]));\n            this._viewToStack.set(data.view, this._idToStack.get(stackId));\n            this._numberOfStacks = this._idToStack.size;\n            if (!this._visibleStack || data.singleViewMode) {\n                this.showStack(stackId);\n            }\n            return;\n        }\n        const stack = this._idToStack.get(stackId);\n        if (data.singleViewMode) {\n            this.showStack(stackId);\n        }\n        // Add new view to the stack.\n        stack.set(data.view, data);\n        this._viewToStack.set(data.view, stack);\n        // And display it if is added to the currently visible stack.\n        if (stack === this._visibleStack) {\n            this._showView(data);\n        }\n    }\n    /**\n     * Removes the given view from the stack. If the removed view was visible,\n     * the view preceding it in the stack will become visible instead.\n     * When there is no view in the stack, the next stack will be displayed.\n     * When there are no more stacks, the balloon will hide.\n     *\n     * @param view A view to be removed from the balloon.\n     */\n    remove(view) {\n        if (!this.hasView(view)) {\n            /**\n             * Trying to remove the configuration of the view not defined in the stack.\n             *\n             * @error contextualballoon-remove-view-not-exist\n             */\n            throw new CKEditorError('contextualballoon-remove-view-not-exist', [this, view]);\n        }\n        const stack = this._viewToStack.get(view);\n        if (this._singleViewMode && this.visibleView === view) {\n            this._singleViewMode = false;\n        }\n        // When visible view will be removed we need to show a preceding view or next stack\n        // if a view is the only view in the stack.\n        if (this.visibleView === view) {\n            if (stack.size === 1) {\n                if (this._idToStack.size > 1) {\n                    this._showNextStack();\n                }\n                else {\n                    this.view.hide();\n                    this.visibleView = null;\n                    this._rotatorView.hideView();\n                }\n            }\n            else {\n                this._showView(Array.from(stack.values())[stack.size - 2]);\n            }\n        }\n        if (stack.size === 1) {\n            this._idToStack.delete(this._getStackId(stack));\n            this._numberOfStacks = this._idToStack.size;\n        }\n        else {\n            stack.delete(view);\n        }\n        this._viewToStack.delete(view);\n    }\n    /**\n     * Updates the position of the balloon using the position data of the first visible view in the stack.\n     * When new position data is given, the position data of the currently visible view will be updated.\n     *\n     * @param position Position options.\n     */\n    updatePosition(position) {\n        if (position) {\n            this._visibleStack.get(this.visibleView).position = position;\n        }\n        this.view.pin(this._getBalloonPosition());\n        this._fakePanelsView.updatePosition();\n    }\n    /**\n     * Shows the last view from the stack of a given ID.\n     */\n    showStack(id) {\n        this.visibleStack = id;\n        const stack = this._idToStack.get(id);\n        if (!stack) {\n            /**\n             * Trying to show a stack that does not exist.\n             *\n             * @error contextualballoon-showstack-stack-not-exist\n             */\n            throw new CKEditorError('contextualballoon-showstack-stack-not-exist', this);\n        }\n        if (this._visibleStack === stack) {\n            return;\n        }\n        this._showView(Array.from(stack.values()).pop());\n    }\n    /**\n     * Initializes view instances.\n     */\n    _createPanelView() {\n        this._view = new BalloonPanelView(this.editor.locale);\n        this.editor.ui.view.body.add(this._view);\n        this.editor.ui.focusTracker.add(this._view.element);\n        this._rotatorView = this._createRotatorView();\n        this._fakePanelsView = this._createFakePanelsView();\n    }\n    /**\n     * Returns the stack of the currently visible view.\n     */\n    get _visibleStack() {\n        return this._viewToStack.get(this.visibleView);\n    }\n    /**\n     * Returns the ID of the given stack.\n     */\n    _getStackId(stack) {\n        const entry = Array.from(this._idToStack.entries()).find(entry => entry[1] === stack);\n        return entry[0];\n    }\n    /**\n     * Shows the last view from the next stack.\n     */\n    _showNextStack() {\n        const stacks = Array.from(this._idToStack.values());\n        let nextIndex = stacks.indexOf(this._visibleStack) + 1;\n        if (!stacks[nextIndex]) {\n            nextIndex = 0;\n        }\n        this.showStack(this._getStackId(stacks[nextIndex]));\n    }\n    /**\n     * Shows the last view from the previous stack.\n     */\n    _showPrevStack() {\n        const stacks = Array.from(this._idToStack.values());\n        let nextIndex = stacks.indexOf(this._visibleStack) - 1;\n        if (!stacks[nextIndex]) {\n            nextIndex = stacks.length - 1;\n        }\n        this.showStack(this._getStackId(stacks[nextIndex]));\n    }\n    /**\n     * Creates a rotator view.\n     */\n    _createRotatorView() {\n        const view = new RotatorView(this.editor.locale);\n        const t = this.editor.locale.t;\n        this.view.content.add(view);\n        // Hide navigation when there is only a one stack & not in single view mode.\n        view.bind('isNavigationVisible').to(this, '_numberOfStacks', this, '_singleViewMode', (value, isSingleViewMode) => {\n            return !isSingleViewMode && value > 1;\n        });\n        // Update balloon position after toggling navigation.\n        view.on('change:isNavigationVisible', () => (this.updatePosition()), { priority: 'low' });\n        // Update stacks counter value.\n        view.bind('counter').to(this, 'visibleView', this, '_numberOfStacks', (visibleView, numberOfStacks) => {\n            if (numberOfStacks < 2) {\n                return '';\n            }\n            const current = Array.from(this._idToStack.values()).indexOf(this._visibleStack) + 1;\n            return t('%0 of %1', [current, numberOfStacks]);\n        });\n        view.buttonNextView.on('execute', () => {\n            // When current view has a focus then move focus to the editable before removing it,\n            // otherwise editor will lost focus.\n            if (view.focusTracker.isFocused) {\n                this.editor.editing.view.focus();\n            }\n            this._showNextStack();\n        });\n        view.buttonPrevView.on('execute', () => {\n            // When current view has a focus then move focus to the editable before removing it,\n            // otherwise editor will lost focus.\n            if (view.focusTracker.isFocused) {\n                this.editor.editing.view.focus();\n            }\n            this._showPrevStack();\n        });\n        return view;\n    }\n    /**\n     * Creates a fake panels view.\n     */\n    _createFakePanelsView() {\n        const view = new FakePanelsView(this.editor.locale, this.view);\n        view.bind('numberOfPanels').to(this, '_numberOfStacks', this, '_singleViewMode', (number, isSingleViewMode) => {\n            const showPanels = !isSingleViewMode && number >= 2;\n            return showPanels ? Math.min(number - 1, 2) : 0;\n        });\n        view.listenTo(this.view, 'change:top', () => view.updatePosition());\n        view.listenTo(this.view, 'change:left', () => view.updatePosition());\n        this.editor.ui.view.body.add(view);\n        return view;\n    }\n    /**\n     * Sets the view as the content of the balloon and attaches the balloon using position\n     * options of the first view.\n     *\n     * @param data Configuration.\n     * @param data.view The view to show in the balloon.\n     * @param data.balloonClassName Additional class name which will be added to the {@link #view balloon}.\n     * @param data.withArrow Whether the {@link #view balloon} should be rendered with an arrow.\n     */\n    _showView({ view, balloonClassName = '', withArrow = true, singleViewMode = false }) {\n        this.view.class = balloonClassName;\n        this.view.withArrow = withArrow;\n        this._rotatorView.showView(view);\n        this.visibleView = view;\n        this.view.pin(this._getBalloonPosition());\n        this._fakePanelsView.updatePosition();\n        if (singleViewMode) {\n            this._singleViewMode = true;\n        }\n    }\n    /**\n     * Returns position options of the last view in the stack.\n     * This keeps the balloon in the same position when the view is changed.\n     */\n    _getBalloonPosition() {\n        let position = Array.from(this._visibleStack.values()).pop().position;\n        if (position) {\n            // Use the default limiter if none has been specified.\n            if (!position.limiter) {\n                // Don't modify the original options object.\n                position = Object.assign({}, position, {\n                    limiter: this.positionLimiter\n                });\n            }\n            // Don't modify the original options object.\n            position = Object.assign({}, position, {\n                viewportOffsetConfig: this.editor.ui.viewportOffset\n            });\n        }\n        return position;\n    }\n}\n/**\n * Rotator view is a helper class for the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon}.\n * It is used for displaying the last view from the current stack and providing navigation buttons for switching stacks.\n * See the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon} documentation to learn more.\n */\nexport class RotatorView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const t = locale.t;\n        const bind = this.bindTemplate;\n        this.set('isNavigationVisible', true);\n        this.focusTracker = new FocusTracker();\n        this.buttonPrevView = this._createButtonView(t('Previous'), prevIcon);\n        this.buttonNextView = this._createButtonView(t('Next'), nextIcon);\n        this.content = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-balloon-rotator'\n                ],\n                'z-index': '-1'\n            },\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck-balloon-rotator__navigation',\n                            bind.to('isNavigationVisible', value => value ? '' : 'ck-hidden')\n                        ]\n                    },\n                    children: [\n                        this.buttonPrevView,\n                        {\n                            tag: 'span',\n                            attributes: {\n                                class: [\n                                    'ck-balloon-rotator__counter'\n                                ]\n                            },\n                            children: [\n                                {\n                                    text: bind.to('counter')\n                                }\n                            ]\n                        },\n                        this.buttonNextView\n                    ]\n                },\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: 'ck-balloon-rotator__content'\n                    },\n                    children: this.content\n                }\n            ]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.focusTracker.add(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n    }\n    /**\n     * Shows a given view.\n     *\n     * @param view The view to show.\n     */\n    showView(view) {\n        this.hideView();\n        this.content.add(view);\n    }\n    /**\n     * Hides the currently displayed view.\n     */\n    hideView() {\n        this.content.clear();\n    }\n    /**\n     * Creates a navigation button view.\n     *\n     * @param label The button label.\n     * @param icon The button icon.\n     */\n    _createButtonView(label, icon) {\n        const view = new ButtonView(this.locale);\n        view.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        return view;\n    }\n}\n/**\n * Displays additional layers under the balloon when multiple stacks are added to the balloon.\n */\nclass FakePanelsView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale, balloonPanelView) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('top', 0);\n        this.set('left', 0);\n        this.set('height', 0);\n        this.set('width', 0);\n        this.set('numberOfPanels', 0);\n        this.content = this.createCollection();\n        this._balloonPanelView = balloonPanelView;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck-fake-panel',\n                    bind.to('numberOfPanels', number => number ? '' : 'ck-hidden')\n                ],\n                style: {\n                    top: bind.to('top', toPx),\n                    left: bind.to('left', toPx),\n                    width: bind.to('width', toPx),\n                    height: bind.to('height', toPx)\n                }\n            },\n            children: this.content\n        });\n        this.on('change:numberOfPanels', (evt, name, next, prev) => {\n            if (next > prev) {\n                this._addPanels(next - prev);\n            }\n            else {\n                this._removePanels(prev - next);\n            }\n            this.updatePosition();\n        });\n    }\n    _addPanels(number) {\n        while (number--) {\n            const view = new View();\n            view.setTemplate({ tag: 'div' });\n            this.content.add(view);\n            this.registerChild(view);\n        }\n    }\n    _removePanels(number) {\n        while (number--) {\n            const view = this.content.last;\n            this.content.remove(view);\n            this.deregisterChild(view);\n            view.destroy();\n        }\n    }\n    /**\n     * Updates coordinates of fake panels.\n     */\n    updatePosition() {\n        if (this.numberOfPanels) {\n            const { top, left } = this._balloonPanelView;\n            const { width, height } = new Rect(this._balloonPanelView.element);\n            Object.assign(this, { top, left, width, height });\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/panel/sticky/stickypanelview\n */\nimport View from '../../view';\nimport Template from '../../template';\nimport { global, toUnit, Rect } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_STICKYPANEL // const {\n// @if CK_DEBUG_STICKYPANEL // \tdefault: RectDrawer,\n// @if CK_DEBUG_STICKYPANEL // \tdiagonalStylesBlack\n// @if CK_DEBUG_STICKYPANEL // } = require( '@ckeditor/ckeditor5-utils/tests/_utils/rectdrawer' );\nimport '../../../theme/components/panel/stickypanel.css';\nconst toPx = toUnit('px');\n/**\n * The sticky panel view class.\n */\nexport default class StickyPanelView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('isActive', false);\n        this.set('isSticky', false);\n        this.set('limiterElement', null);\n        this.set('limiterBottomOffset', 50);\n        this.set('viewportTopOffset', 0);\n        this.set('_marginLeft', null);\n        this.set('_isStickyToTheBottomOfLimiter', false);\n        this.set('_stickyTopOffset', null);\n        this.set('_stickyBottomOffset', null);\n        this.content = this.createCollection();\n        this._contentPanelPlaceholder = new Template({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-sticky-panel__placeholder'\n                ],\n                style: {\n                    display: bind.to('isSticky', isSticky => isSticky ? 'block' : 'none'),\n                    height: bind.to('isSticky', isSticky => {\n                        return isSticky ? toPx(this._contentPanelRect.height) : null;\n                    })\n                }\n            }\n        }).render();\n        this._contentPanel = new Template({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-sticky-panel__content',\n                    // Toggle class of the panel when \"sticky\" state changes in the view.\n                    bind.if('isSticky', 'ck-sticky-panel__content_sticky'),\n                    bind.if('_isStickyToTheBottomOfLimiter', 'ck-sticky-panel__content_sticky_bottom-limit')\n                ],\n                style: {\n                    width: bind.to('isSticky', isSticky => {\n                        return isSticky ? toPx(this._contentPanelPlaceholder.getBoundingClientRect().width) : null;\n                    }),\n                    top: bind.to('_stickyTopOffset', value => value ? toPx(value) : value),\n                    bottom: bind.to('_stickyBottomOffset', value => value ? toPx(value) : value),\n                    marginLeft: bind.to('_marginLeft')\n                }\n            },\n            children: this.content\n        }).render();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-sticky-panel'\n                ]\n            },\n            children: [\n                this._contentPanelPlaceholder,\n                this._contentPanel\n            ]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Check if the panel should go into the sticky state immediately.\n        this.checkIfShouldBeSticky();\n        // Update sticky state of the panel as the window and ancestors are being scrolled.\n        this.listenTo(global.document, 'scroll', () => {\n            this.checkIfShouldBeSticky();\n        }, { useCapture: true });\n        // Synchronize with `model.isActive` because sticking an inactive panel is pointless.\n        this.listenTo(this, 'change:isActive', () => {\n            this.checkIfShouldBeSticky();\n        });\n    }\n    /**\n     * Analyzes the environment to decide whether the panel should be sticky or not.\n     * Then handles the positioning of the panel.\n     */\n    checkIfShouldBeSticky() {\n        // @if CK_DEBUG_STICKYPANEL // RectDrawer.clear();\n        if (!this.limiterElement || !this.isActive) {\n            this._unstick();\n            return;\n        }\n        const limiterRect = new Rect(this.limiterElement);\n        let visibleLimiterRect = limiterRect.getVisible();\n        if (visibleLimiterRect) {\n            const windowRect = new Rect(global.window);\n            windowRect.top += this.viewportTopOffset;\n            windowRect.height -= this.viewportTopOffset;\n            visibleLimiterRect = visibleLimiterRect.getIntersection(windowRect);\n        }\n        // @if CK_DEBUG_STICKYPANEL // if ( visibleLimiterRect ) {\n        // @if CK_DEBUG_STICKYPANEL // \tRectDrawer.draw( visibleLimiterRect,\n        // @if CK_DEBUG_STICKYPANEL // \t\t{ outlineWidth: '3px', opacity: '.8', outlineColor: 'red', outlineOffset: '-3px' },\n        // @if CK_DEBUG_STICKYPANEL // \t\t'Visible anc'\n        // @if CK_DEBUG_STICKYPANEL // \t);\n        // @if CK_DEBUG_STICKYPANEL // }\n        // @if CK_DEBUG_STICKYPANEL //\n        // @if CK_DEBUG_STICKYPANEL // RectDrawer.draw( limiterRect,\n        // @if CK_DEBUG_STICKYPANEL // \t{ outlineWidth: '3px', opacity: '.8', outlineColor: 'green', outlineOffset: '-3px' },\n        // @if CK_DEBUG_STICKYPANEL // \t'Limiter'\n        // @if CK_DEBUG_STICKYPANEL // );\n        // Stick the panel only if\n        // * the limiter's ancestors are intersecting with each other so that some of their rects are visible,\n        // * and the limiter's top edge is above the visible ancestors' top edge.\n        if (visibleLimiterRect && limiterRect.top < visibleLimiterRect.top) {\n            // @if CK_DEBUG_STICKYPANEL // RectDrawer.draw( visibleLimiterRect,\n            // @if CK_DEBUG_STICKYPANEL // \t{ outlineWidth: '3px', opacity: '.8', outlineColor: 'fuchsia', outlineOffset: '-3px',\n            // @if CK_DEBUG_STICKYPANEL // \t\tbackgroundColor: 'rgba(255, 0, 255, .3)' },\n            // @if CK_DEBUG_STICKYPANEL // \t'Visible limiter'\n            // @if CK_DEBUG_STICKYPANEL // );\n            const visibleLimiterTop = visibleLimiterRect.top;\n            // Check if there's a change the panel can be sticky to the bottom of the limiter.\n            if (visibleLimiterTop + this._contentPanelRect.height + this.limiterBottomOffset > visibleLimiterRect.bottom) {\n                const stickyBottomOffset = Math.max(limiterRect.bottom - visibleLimiterRect.bottom, 0) + this.limiterBottomOffset;\n                // @if CK_DEBUG_STICKYPANEL // const stickyBottomOffsetRect = new Rect( {\n                // @if CK_DEBUG_STICKYPANEL // \ttop: limiterRect.bottom - stickyBottomOffset, left: 0, right: 2000,\n                // @if CK_DEBUG_STICKYPANEL // \tbottom: limiterRect.bottom - stickyBottomOffset, width: 2000, height: 1\n                // @if CK_DEBUG_STICKYPANEL // } );\n                // @if CK_DEBUG_STICKYPANEL // RectDrawer.draw( stickyBottomOffsetRect,\n                // @if CK_DEBUG_STICKYPANEL // \t{ outlineWidth: '1px', opacity: '.8', outlineColor: 'black' },\n                // @if CK_DEBUG_STICKYPANEL // \t'Sticky bottom offset'\n                // @if CK_DEBUG_STICKYPANEL // );\n                // Check if sticking the panel to the bottom of the limiter does not cause it to suddenly\n                // move upwards if there's not enough space for it.\n                if (limiterRect.bottom - stickyBottomOffset > limiterRect.top + this._contentPanelRect.height) {\n                    this._stickToBottomOfLimiter(stickyBottomOffset);\n                }\n                else {\n                    this._unstick();\n                }\n            }\n            else {\n                if (this._contentPanelRect.height + this.limiterBottomOffset < limiterRect.height) {\n                    this._stickToTopOfAncestors(visibleLimiterTop);\n                }\n                else {\n                    this._unstick();\n                }\n            }\n        }\n        else {\n            this._unstick();\n        }\n        // @if CK_DEBUG_STICKYPANEL // console.clear();\n        // @if CK_DEBUG_STICKYPANEL // console.log( 'isSticky', this.isSticky );\n        // @if CK_DEBUG_STICKYPANEL // console.log( '_isStickyToTheBottomOfLimiter', this._isStickyToTheBottomOfLimiter );\n        // @if CK_DEBUG_STICKYPANEL // console.log( '_stickyTopOffset', this._stickyTopOffset );\n        // @if CK_DEBUG_STICKYPANEL // console.log( '_stickyBottomOffset', this._stickyBottomOffset );\n        // @if CK_DEBUG_STICKYPANEL // if ( visibleLimiterRect ) {\n        // @if CK_DEBUG_STICKYPANEL // \tRectDrawer.draw( visibleLimiterRect,\n        // @if CK_DEBUG_STICKYPANEL // \t\t{ ...diagonalStylesBlack,\n        // @if CK_DEBUG_STICKYPANEL // \t\t\toutlineWidth: '3px', opacity: '.8', outlineColor: 'orange', outlineOffset: '-3px',\n        // @if CK_DEBUG_STICKYPANEL // \t\t\tbackgroundColor: 'rgba(0, 0, 255, .2)' },\n        // @if CK_DEBUG_STICKYPANEL // \t\t'visibleLimiterRect'\n        // @if CK_DEBUG_STICKYPANEL // \t);\n        // @if CK_DEBUG_STICKYPANEL // }\n    }\n    /**\n     * Sticks the panel at the given CSS `top` offset.\n     *\n     * @private\n     * @param topOffset\n     */\n    _stickToTopOfAncestors(topOffset) {\n        this.isSticky = true;\n        this._isStickyToTheBottomOfLimiter = false;\n        this._stickyTopOffset = topOffset;\n        this._stickyBottomOffset = null;\n        this._marginLeft = toPx(-global.window.scrollX);\n    }\n    /**\n     * Sticks the panel at the bottom of the limiter with a given CSS `bottom` offset.\n     *\n     * @private\n     * @param stickyBottomOffset\n     */\n    _stickToBottomOfLimiter(stickyBottomOffset) {\n        this.isSticky = true;\n        this._isStickyToTheBottomOfLimiter = true;\n        this._stickyTopOffset = null;\n        this._stickyBottomOffset = stickyBottomOffset;\n        this._marginLeft = toPx(-global.window.scrollX);\n    }\n    /**\n     * Unsticks the panel putting it back to its original position.\n     *\n     * @private\n     */\n    _unstick() {\n        this.isSticky = false;\n        this._isStickyToTheBottomOfLimiter = false;\n        this._stickyTopOffset = null;\n        this._stickyBottomOffset = null;\n        this._marginLeft = null;\n    }\n    /**\n     * Returns the bounding rect of the {@link #_contentPanel}.\n     *\n     * @private\n     */\n    get _contentPanelRect() {\n        return new Rect(this._contentPanel);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/search/text/searchtextqueryview\n */\nimport ButtonView from '../../button/buttonview';\nimport IconView from '../../icon/iconview';\nimport LabeledFieldView from '../../labeledfield/labeledfieldview';\nimport { createLabeledInputText } from '../../labeledfield/utils';\nimport { icons } from '@ckeditor/ckeditor5-core';\n/**\n * A search input field for the {@link module:ui/search/text/searchtextview~SearchTextView} component.\n *\n * @internal\n * @extends module:ui/labeledfield/labeledfieldview~LabeledFieldView\n */\nexport default class SearchTextQueryView extends LabeledFieldView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale, config) {\n        const t = locale.t;\n        const viewConfig = Object.assign({}, {\n            showResetButton: true,\n            showIcon: true,\n            creator: createLabeledInputText\n        }, config);\n        super(locale, viewConfig.creator);\n        this.label = config.label;\n        this._viewConfig = viewConfig;\n        if (this._viewConfig.showIcon) {\n            this.iconView = new IconView();\n            this.iconView.content = icons.loupe;\n            this.fieldWrapperChildren.add(this.iconView, 0);\n            this.extendTemplate({\n                attributes: {\n                    class: 'ck-search__query_with-icon'\n                }\n            });\n        }\n        if (this._viewConfig.showResetButton) {\n            this.resetButtonView = new ButtonView(locale);\n            this.resetButtonView.set({\n                label: t('Clear'),\n                icon: icons.cancel,\n                class: 'ck-search__reset',\n                isVisible: false,\n                tooltip: true\n            });\n            this.resetButtonView.on('execute', () => {\n                this.reset();\n                this.focus();\n                this.fire('reset');\n            });\n            this.resetButtonView.bind('isVisible').to(this.fieldView, 'isEmpty', isEmpty => !isEmpty);\n            this.fieldWrapperChildren.add(this.resetButtonView);\n            this.extendTemplate({\n                attributes: {\n                    class: 'ck-search__query_with-reset'\n                }\n            });\n        }\n    }\n    /**\n     * Resets the search field to its default state.\n     */\n    reset() {\n        this.fieldView.reset();\n        if (this._viewConfig.showResetButton) {\n            this.resetButtonView.isVisible = false;\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport View from '../view';\n/**\n * A view displaying an information text related to different states of {@link module:ui/search/text/searchtextview~SearchTextView}.\n *\n * @internal\n */\nexport default class SearchInfoView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor() {\n        super();\n        const bind = this.bindTemplate;\n        this.set({\n            isVisible: false,\n            primaryText: '',\n            secondaryText: ''\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-search__info',\n                    bind.if('isVisible', 'ck-hidden', value => !value)\n                ],\n                tabindex: -1\n            },\n            children: [\n                {\n                    tag: 'span',\n                    children: [\n                        {\n                            text: [bind.to('primaryText')]\n                        }\n                    ]\n                },\n                {\n                    tag: 'span',\n                    children: [\n                        {\n                            text: [bind.to('secondaryText')]\n                        }\n                    ]\n                }\n            ]\n        });\n    }\n    /**\n     * Focuses the view\n     */\n    focus() {\n        this.element.focus();\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/search/searchresultsview\n */\nimport View from '../view';\nimport { FocusTracker } from '@ckeditor/ckeditor5-utils';\nimport { default as FocusCycler } from '../focuscycler';\n/**\n * A sub-component of {@link module:ui/search/text/searchtextview~SearchTextView}. It hosts the filtered and the information views.\n */\nexport default class SearchResultsView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.children = this.createCollection();\n        this.focusTracker = new FocusTracker();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-search__results'\n                ],\n                tabindex: -1\n            },\n            children: this.children\n        });\n        this._focusCycler = new FocusCycler({\n            focusables: this.children,\n            focusTracker: this.focusTracker\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        for (const child of this.children) {\n            this.focusTracker.add(child.element);\n        }\n    }\n    /**\n     * Focuses the view.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Focuses the first child view.\n     */\n    focusFirst() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Focuses the last child view.\n     */\n    focusLast() {\n        this._focusCycler.focusLast();\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/search/text/searchtextview\n*/\nimport { FocusTracker, KeystrokeHandler } from '@ckeditor/ckeditor5-utils';\nimport View from '../../view';\nimport { default as SearchTextQueryView } from './searchtextqueryview';\nimport SearchInfoView from '../searchinfoview';\nimport SearchResultsView from '../searchresultsview';\nimport FocusCycler from '../../focuscycler';\nimport { escapeRegExp } from 'lodash-es';\nimport '../../../theme/components/search/search.css';\n/**\n * A search component that allows filtering of an arbitrary view based on a search query\n * specified by the user in a text field.\n *\n *```ts\n * // This view must specify the `filter()` and `focus()` methods.\n * const filteredView = ...;\n *\n * const searchView = new SearchTextView( locale, {\n * \tsearchFieldLabel: 'Search list items',\n * \tfilteredView\n * } );\n *\n * view.render();\n *\n * document.body.append( view.element );\n * ```\n */\nexport default class SearchTextView extends View {\n    /**\n     * Creates an instance of the {@link module:ui/search/text/searchtextview~SearchTextView} class.\n     *\n     * @param locale The localization services instance.\n     * @param config Configuration of the view.\n     */\n    constructor(locale, config) {\n        super(locale);\n        this._config = config;\n        this.filteredView = config.filteredView;\n        this.queryView = this._createSearchTextQueryView();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.resultsView = new SearchResultsView(locale);\n        this.children = this.createCollection();\n        this.focusableChildren = this.createCollection([this.queryView, this.resultsView]);\n        this.set('isEnabled', true);\n        this.set('resultsCount', 0);\n        this.set('totalItemsCount', 0);\n        if (config.infoView && config.infoView.instance) {\n            this.infoView = config.infoView.instance;\n        }\n        else {\n            this.infoView = new SearchInfoView();\n            this._enableDefaultInfoViewBehavior();\n            this.on('render', () => {\n                // Initial search that determines if there are any searchable items\n                // and displays the corresponding info text.\n                this.search('');\n            });\n        }\n        this.resultsView.children.addMany([this.infoView, this.filteredView]);\n        this.focusCycler = new FocusCycler({\n            focusables: this.focusableChildren,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.on('search', (evt, { resultsCount, totalItemsCount }) => {\n            this.resultsCount = resultsCount;\n            this.totalItemsCount = totalItemsCount;\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-search',\n                    config.class || null\n                ],\n                tabindex: '-1'\n            },\n            children: this.children\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.children.addMany([\n            this.queryView,\n            this.resultsView\n        ]);\n        const stopPropagation = (data) => data.stopPropagation();\n        for (const focusableChild of this.focusableChildren) {\n            this.focusTracker.add(focusableChild.element);\n        }\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n        // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n        // keystroke handler would take over the key management in the URL input. We need to prevent\n        // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n        this.keystrokes.set('arrowright', stopPropagation);\n        this.keystrokes.set('arrowleft', stopPropagation);\n        this.keystrokes.set('arrowup', stopPropagation);\n        this.keystrokes.set('arrowdown', stopPropagation);\n    }\n    /**\n     * Focuses the {@link #queryView}.\n     */\n    focus() {\n        this.queryView.focus();\n    }\n    /**\n     * Resets the component to its initial state.\n     */\n    reset() {\n        this.queryView.reset();\n        this.search('');\n    }\n    /**\n     * Searches the {@link #filteredView} for the given query.\n     *\n     * @internal\n     * @param query The search query string.\n     */\n    search(query) {\n        const regExp = query ? new RegExp(escapeRegExp(query), 'ig') : null;\n        const filteringResults = this.filteredView.filter(regExp);\n        this.fire('search', { query, ...filteringResults });\n    }\n    /**\n     * Creates a search field view based on configured creator..\n     */\n    _createSearchTextQueryView() {\n        const queryView = new SearchTextQueryView(this.locale, this._config.queryView);\n        this.listenTo(queryView.fieldView, 'input', () => {\n            this.search(queryView.fieldView.element.value);\n        });\n        queryView.on('reset', () => this.reset());\n        queryView.bind('isEnabled').to(this);\n        return queryView;\n    }\n    /**\n     * Initializes the default {@link #infoView} behavior with default text labels when no custom info view\n     * was specified in the view config.\n     */\n    _enableDefaultInfoViewBehavior() {\n        const t = this.locale.t;\n        const infoView = this.infoView;\n        this.on('search', (evt, data) => {\n            if (!data.resultsCount) {\n                const defaultTextConfig = this._config.infoView && this._config.infoView.text;\n                let primaryText, secondaryText;\n                if (data.totalItemsCount) {\n                    if (defaultTextConfig && defaultTextConfig.notFound) {\n                        primaryText = defaultTextConfig.notFound.primary;\n                        secondaryText = defaultTextConfig.notFound.secondary;\n                    }\n                    else {\n                        primaryText = t('No results found');\n                        secondaryText = '';\n                    }\n                }\n                else {\n                    if (defaultTextConfig && defaultTextConfig.noSearchableItems) {\n                        primaryText = defaultTextConfig.noSearchableItems.primary;\n                        secondaryText = defaultTextConfig.noSearchableItems.secondary;\n                    }\n                    else {\n                        primaryText = t('No searchable items');\n                        secondaryText = '';\n                    }\n                }\n                infoView.set({\n                    primaryText: normalizeInfoText(primaryText, data),\n                    secondaryText: normalizeInfoText(secondaryText, data),\n                    isVisible: true\n                });\n            }\n            else {\n                infoView.set({\n                    isVisible: false\n                });\n            }\n        });\n        function normalizeInfoText(text, { query, resultsCount, totalItemsCount }) {\n            return typeof text === 'function' ? text(query, resultsCount, totalItemsCount) : text;\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/autocomplete/autocompleteview\n*/\nimport { getOptimalPosition, global, toUnit, Rect } from '@ckeditor/ckeditor5-utils';\nimport SearchTextView from '../search/text/searchtextview';\nimport '../../theme/components/autocomplete/autocomplete.css';\n/**\n * The autocomplete component's view class. It extends the {@link module:ui/search/text/searchtextview~SearchTextView} class\n * with a floating {@link #resultsView} that shows up when the user starts typing and hides when they blur\n * the component.\n */\nexport default class AutocompleteView extends SearchTextView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale, config) {\n        super(locale, config);\n        this._config = config;\n        const toPx = toUnit('px');\n        this.extendTemplate({\n            attributes: {\n                class: ['ck-autocomplete']\n            }\n        });\n        const bindResultsView = this.resultsView.bindTemplate;\n        this.resultsView.set('isVisible', false);\n        this.resultsView.set('_position', 's');\n        this.resultsView.set('_width', 0);\n        this.resultsView.extendTemplate({\n            attributes: {\n                class: [\n                    bindResultsView.if('isVisible', 'ck-hidden', value => !value),\n                    bindResultsView.to('_position', value => `ck-search__results_${value}`)\n                ],\n                style: {\n                    width: bindResultsView.to('_width', toPx)\n                }\n            }\n        });\n        // Update the visibility of the results view when the user focuses or blurs the component.\n        // This is also integration for the `resetOnBlur` configuration.\n        this.focusTracker.on('change:isFocused', (evt, name, isFocused) => {\n            this._updateResultsVisibility();\n            if (isFocused) {\n                // Reset the scroll position of the results view whenever the autocomplete reopens.\n                this.resultsView.element.scrollTop = 0;\n            }\n            else if (config.resetOnBlur) {\n                this.queryView.reset();\n            }\n        });\n        // Update the visibility of the results view when the user types in the query field.\n        // This is an integration for `queryMinChars` configuration.\n        // This is an integration for search results changing length and the #resultsView requiring to be repositioned.\n        this.on('search', () => {\n            this._updateResultsVisibility();\n            this._updateResultsViewWidthAndPosition();\n        });\n        // Hide the results view when the user presses the ESC key.\n        this.keystrokes.set('esc', (evt, cancel) => {\n            // Let the DOM event pass through if the focus is in the query view.\n            if (!this.resultsView.isVisible) {\n                return;\n            }\n            // Focus the query view first and only then close the results view. Otherwise, if the focus\n            // was in the results view, it will get lost.\n            this.queryView.focus();\n            this.resultsView.isVisible = false;\n            cancel();\n        });\n        // Update the position of the results view when the user scrolls the page.\n        // TODO: This needs to be debounced down the road.\n        this.listenTo(global.document, 'scroll', () => {\n            this._updateResultsViewWidthAndPosition();\n        });\n        // Hide the results when the component becomes disabled.\n        this.on('change:isEnabled', () => {\n            this._updateResultsVisibility();\n        });\n        // Update the value of the query field when the user selects a result.\n        this.filteredView.on('execute', (evt, { value }) => {\n            // Focus the query view first to avoid losing the focus.\n            this.focus();\n            // Resetting the view will ensure that the #queryView will update its empty state correctly.\n            // This prevents bugs related to dynamic labels or auto-grow when re-setting the same value\n            // to #queryView.fieldView.value (which does not trigger empty state change) to an\n            // #queryView.fieldView.element that has been changed by the user.\n            this.reset();\n            // Update the value of the query field.\n            this.queryView.fieldView.value = this.queryView.fieldView.element.value = value;\n            // Finally, hide the results view. The focus has been moved earlier so this is safe.\n            this.resultsView.isVisible = false;\n        });\n        // Update the position and width of the results view when it becomes visible.\n        this.resultsView.on('change:isVisible', () => {\n            this._updateResultsViewWidthAndPosition();\n        });\n    }\n    /**\n     * Updates the position of the results view on demand.\n     */\n    _updateResultsViewWidthAndPosition() {\n        if (!this.resultsView.isVisible) {\n            return;\n        }\n        this.resultsView._width = new Rect(this.queryView.fieldView.element).width;\n        const optimalResultsPosition = AutocompleteView._getOptimalPosition({\n            element: this.resultsView.element,\n            target: this.queryView.element,\n            fitInViewport: true,\n            positions: AutocompleteView.defaultResultsPositions\n        });\n        // _getOptimalPosition will return null if there is no optimal position found (e.g. target is off the viewport).\n        this.resultsView._position = optimalResultsPosition ? optimalResultsPosition.name : 's';\n    }\n    /**\n     * Updates the visibility of the results view on demand.\n     */\n    _updateResultsVisibility() {\n        const queryMinChars = typeof this._config.queryMinChars === 'undefined' ? 0 : this._config.queryMinChars;\n        const queryLength = this.queryView.fieldView.element.value.length;\n        this.resultsView.isVisible = this.focusTracker.isFocused && this.isEnabled && queryLength >= queryMinChars;\n    }\n}\n/**\n * Positions for the autocomplete results view. Two positions are defined by default:\n * * `s` - below the search field,\n * * `n` - above the search field.\n */\nAutocompleteView.defaultResultsPositions = [\n    (fieldRect => {\n        return {\n            top: fieldRect.bottom,\n            left: fieldRect.left,\n            name: 's'\n        };\n    }),\n    ((fieldRect, resultsRect) => {\n        return {\n            top: fieldRect.top - resultsRect.height,\n            left: fieldRect.left,\n            name: 'n'\n        };\n    })\n];\n/**\n * A function used to calculate the optimal position for the dropdown panel.\n */\nAutocompleteView._getOptimalPosition = getOptimalPosition;\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/highlightedtext/highlightedtextview\n */\nimport View from '../view';\nimport { escape } from 'lodash-es';\nimport '../../theme/components/highlightedtext/highlightedtext.css';\n/**\n * A class representing a view that displays a text which subset can be highlighted using the\n * {@link #highlightText} method.\n */\nexport default class HighlightedTextView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor() {\n        super();\n        this.set('text', undefined);\n        this.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: ['ck', 'ck-highlighted-text']\n            }\n        });\n        this.on('render', () => {\n            // Classic setTemplate binding for #text will not work because highlightText() replaces the\n            // pre-rendered DOM text node new a new one (and <mark> elements).\n            this.on('change:text', () => {\n                this._updateInnerHTML(this.text);\n            });\n            this._updateInnerHTML(this.text);\n        });\n    }\n    /**\n     * Highlights view's {@link #text} according to the specified `RegExp`. If the passed RegExp is `null`, the\n     * highlighting is removed\n     *\n     * @param regExp\n     */\n    highlightText(regExp) {\n        this._updateInnerHTML(markText(this.text || '', regExp));\n    }\n    /**\n     * Updates element's `innerHTML` with the passed content.\n     */\n    _updateInnerHTML(newInnerHTML) {\n        this.element.innerHTML = newInnerHTML || '';\n    }\n}\n/**\n * Replaces `regExp` occurrences with `<mark>` tags in a text.\n *\n * @param text A text to get marked.\n * @param regExp An optional `RegExp`. If not passed, this is a pass-through function.\n * @returns A text with `RegExp` occurrences marked by `<mark>`.\n */\nfunction markText(text, regExp) {\n    if (!regExp) {\n        return escape(text);\n    }\n    const textParts = [];\n    let lastMatchEnd = 0;\n    let matchInfo = regExp.exec(text);\n    // Iterate over all matches and create an array of text parts. The idea is to mark which parts are query matches\n    // so that later on they can be highlighted.\n    while (matchInfo !== null) {\n        const curMatchStart = matchInfo.index;\n        // Detect if there was something between last match and this one.\n        if (curMatchStart !== lastMatchEnd) {\n            textParts.push({\n                text: text.substring(lastMatchEnd, curMatchStart),\n                isMatch: false\n            });\n        }\n        textParts.push({\n            text: matchInfo[0],\n            isMatch: true\n        });\n        lastMatchEnd = regExp.lastIndex;\n        matchInfo = regExp.exec(text);\n    }\n    // Your match might not be the last part of a string. Be sure to add any plain text following the last match.\n    if (lastMatchEnd !== text.length) {\n        textParts.push({\n            text: text.substring(lastMatchEnd),\n            isMatch: false\n        });\n    }\n    const outputHtml = textParts\n        // The entire text should be escaped.\n        .map(part => {\n        part.text = escape(part.text);\n        return part;\n    })\n        // Only matched text should be wrapped with HTML mark element.\n        .map(part => part.isMatch ? `<mark>${part.text}</mark>` : part.text)\n        .join('');\n    return outputHtml;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport View from '../view';\nimport ButtonView from '../button/buttonview';\nimport dropdownArrowIcon from '../../theme/icons/dropdown-arrow.svg';\nimport '../../theme/components/collapsible/collapsible.css';\n/**\n * A collapsible UI component. Consists of a labeled button and a container which can be collapsed\n * by clicking the button. The collapsible container can be a host to other UI views.\n *\n * @internal\n */\nexport default class CollapsibleView extends View {\n    /**\n     * Creates an instance of the collapsible view.\n     *\n     * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n     * @param childViews An optional array of initial child views to be inserted into the collapsible.\n     */\n    constructor(locale, childViews) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('isCollapsed', false);\n        this.set('label', '');\n        this.buttonView = this._createButtonView();\n        this.children = this.createCollection();\n        this.set('_collapsibleAriaLabelUid', undefined);\n        if (childViews) {\n            this.children.addMany(childViews);\n        }\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-collapsible',\n                    bind.if('isCollapsed', 'ck-collapsible_collapsed')\n                ]\n            },\n            children: [\n                this.buttonView,\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-collapsible__children'\n                        ],\n                        role: 'region',\n                        hidden: bind.if('isCollapsed', 'hidden'),\n                        'aria-labelledby': bind.to('_collapsibleAriaLabelUid')\n                    },\n                    children: this.children\n                }\n            ]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this._collapsibleAriaLabelUid = this.buttonView.labelView.element.id;\n    }\n    /**\n     * Focuses the first focusable.\n     */\n    focus() {\n        this.buttonView.focus();\n    }\n    /**\n     * Creates the main {@link #buttonView} of the collapsible.\n     */\n    _createButtonView() {\n        const buttonView = new ButtonView(this.locale);\n        const bind = buttonView.bindTemplate;\n        buttonView.set({\n            withText: true,\n            icon: dropdownArrowIcon\n        });\n        buttonView.extendTemplate({\n            attributes: {\n                'aria-expanded': bind.to('isOn', value => String(value))\n            }\n        });\n        buttonView.bind('label').to(this);\n        buttonView.bind('isOn').to(this, 'isCollapsed', isCollapsed => !isCollapsed);\n        buttonView.on('execute', () => {\n            this.isCollapsed = !this.isCollapsed;\n        });\n        return buttonView;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/spinner/spinnerview\n */\nimport View from '../view';\nimport '../../theme/components/spinner/spinner.css';\n/**\n * The spinner view class.\n */\nexport default class SpinnerView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor() {\n        super();\n        this.set('isVisible', false);\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-spinner-container',\n                    bind.if('isVisible', 'ck-hidden', value => !value)\n                ]\n            },\n            children: [{\n                    tag: 'span',\n                    attributes: {\n                        class: ['ck', 'ck-spinner']\n                    }\n                }]\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/balloon/balloontoolbar\n */\nimport ContextualBalloon from '../../panel/balloon/contextualballoon';\nimport ToolbarView from '../toolbarview';\nimport BalloonPanelView, { generatePositions } from '../../panel/balloon/balloonpanelview';\nimport normalizeToolbarConfig from '../normalizetoolbarconfig';\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { FocusTracker, Rect, ResizeObserver, env, global, toUnit } from '@ckeditor/ckeditor5-utils';\nimport { debounce } from 'lodash-es';\nconst toPx = toUnit('px');\n/**\n * The contextual toolbar.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */\nexport default class BalloonToolbar extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'BalloonToolbar';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        /**\n         * An instance of the resize observer that allows to respond to changes in editable's geometry\n         * so the toolbar can stay within its boundaries (and group toolbar items that do not fit).\n         *\n         * **Note**: Used only when `shouldNotGroupWhenFull` was **not** set in the\n         * {@link module:core/editor/editorconfig~EditorConfig#balloonToolbar configuration}.\n         *\n         * **Note:** Created in {@link #init}.\n         */\n        this._resizeObserver = null;\n        this._balloonConfig = normalizeToolbarConfig(editor.config.get('balloonToolbar'));\n        this.toolbarView = this._createToolbarView();\n        this.focusTracker = new FocusTracker();\n        // Wait for the EditorUI#init. EditableElement is not available before.\n        editor.ui.once('ready', () => {\n            this.focusTracker.add(editor.ui.getEditableElement());\n            this.focusTracker.add(this.toolbarView.element);\n        });\n        // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n        editor.ui.addToolbar(this.toolbarView, {\n            beforeFocus: () => this.show(true),\n            afterBlur: () => this.hide(),\n            isContextual: true\n        });\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        this._fireSelectionChangeDebounced = debounce(() => this.fire('_selectionChangeDebounced'), 200);\n        // The appearance of the BalloonToolbar method is event–driven.\n        // It is possible to stop the #show event and this prevent the toolbar from showing up.\n        this.decorate('show');\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        // Show/hide the toolbar on editable focus/blur.\n        this.listenTo(this.focusTracker, 'change:isFocused', (evt, name, isFocused) => {\n            const isToolbarVisible = this._balloon.visibleView === this.toolbarView;\n            if (!isFocused && isToolbarVisible) {\n                this.hide();\n            }\n            else if (isFocused) {\n                this.show();\n            }\n        });\n        // Hide the toolbar when the selection is changed by a direct change or has changed to collapsed.\n        this.listenTo(selection, 'change:range', (evt, data) => {\n            if (data.directChange || selection.isCollapsed) {\n                this.hide();\n            }\n            // Fire internal `_selectionChangeDebounced` event to use it for showing\n            // the toolbar after the selection stops changing.\n            this._fireSelectionChangeDebounced();\n        });\n        // Show the toolbar when the selection stops changing.\n        this.listenTo(this, '_selectionChangeDebounced', () => {\n            if (this.editor.editing.view.document.isFocused) {\n                this.show();\n            }\n        });\n        if (!this._balloonConfig.shouldNotGroupWhenFull) {\n            this.listenTo(editor, 'ready', () => {\n                const editableElement = editor.ui.view.editable.element;\n                // Set #toolbarView's max-width on the initialization and update it on the editable resize.\n                this._resizeObserver = new ResizeObserver(editableElement, entry => {\n                    // The max-width equals 90% of the editable's width for the best user experience.\n                    // The value keeps the balloon very close to the boundaries of the editable and limits the cases\n                    // when the balloon juts out from the editable element it belongs to.\n                    this.toolbarView.maxWidth = toPx(entry.contentRect.width * .9);\n                });\n            });\n        }\n        // Listen to the toolbar view and whenever it changes its geometry due to some items being\n        // grouped or ungrouped, update the position of the balloon because a shorter/longer toolbar\n        // means the balloon could be pointing at the wrong place. Once updated, the balloon will point\n        // at the right selection in the content again.\n        // https://github.com/ckeditor/ckeditor5/issues/6444\n        this.listenTo(this.toolbarView, 'groupedItemsUpdate', () => {\n            this._updatePosition();\n        });\n    }\n    /**\n     * Creates toolbar components based on given configuration.\n     * This needs to be done when all plugins are ready.\n     */\n    afterInit() {\n        const factory = this.editor.ui.componentFactory;\n        this.toolbarView.fillFromConfig(this._balloonConfig, factory);\n    }\n    /**\n     * Creates the toolbar view instance.\n     */\n    _createToolbarView() {\n        const t = this.editor.locale.t;\n        const shouldGroupWhenFull = !this._balloonConfig.shouldNotGroupWhenFull;\n        const toolbarView = new ToolbarView(this.editor.locale, {\n            shouldGroupWhenFull,\n            isFloating: true\n        });\n        toolbarView.ariaLabel = t('Editor contextual toolbar');\n        toolbarView.render();\n        return toolbarView;\n    }\n    /**\n     * Shows the toolbar and attaches it to the selection.\n     *\n     * Fires {@link #event:show} event which can be stopped to prevent the toolbar from showing up.\n     *\n     * @param showForCollapsedSelection When set `true`, the toolbar will show despite collapsed selection in the\n     * editing view.\n     */\n    show(showForCollapsedSelection = false) {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const schema = editor.model.schema;\n        // Do not add the toolbar to the balloon stack twice.\n        if (this._balloon.hasView(this.toolbarView)) {\n            return;\n        }\n        // Do not show the toolbar when the selection is collapsed.\n        if (selection.isCollapsed && !showForCollapsedSelection) {\n            return;\n        }\n        // Do not show the toolbar when there is more than one range in the selection and they fully contain selectable elements.\n        // See https://github.com/ckeditor/ckeditor5/issues/6443.\n        if (selectionContainsOnlyMultipleSelectables(selection, schema)) {\n            return;\n        }\n        // Don not show the toolbar when all components inside are disabled\n        // see https://github.com/ckeditor/ckeditor5-ui/issues/269.\n        if (Array.from(this.toolbarView.items).every((item) => item.isEnabled !== undefined && !item.isEnabled)) {\n            return;\n        }\n        // Update the toolbar position when the editor ui should be refreshed.\n        this.listenTo(this.editor.ui, 'update', () => {\n            this._updatePosition();\n        });\n        // Add the toolbar to the common editor contextual balloon.\n        this._balloon.add({\n            view: this.toolbarView,\n            position: this._getBalloonPositionData(),\n            balloonClassName: 'ck-toolbar-container'\n        });\n    }\n    /**\n     * Hides the toolbar.\n     */\n    hide() {\n        if (this._balloon.hasView(this.toolbarView)) {\n            this.stopListening(this.editor.ui, 'update');\n            this._balloon.remove(this.toolbarView);\n        }\n    }\n    /**\n     * Returns positioning options for the {@link #_balloon}. They control the way balloon is attached\n     * to the selection.\n     */\n    _getBalloonPositionData() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const viewSelection = viewDocument.selection;\n        // Get direction of the selection.\n        const isBackward = viewDocument.selection.isBackward;\n        return {\n            // Because the target for BalloonPanelView is a Rect (not DOMRange), it's geometry will stay fixed\n            // as the window scrolls. To let the BalloonPanelView follow such Rect, is must be continuously\n            // computed and hence, the target is defined as a function instead of a static value.\n            // https://github.com/ckeditor/ckeditor5-ui/issues/195\n            target: () => {\n                const range = isBackward ? viewSelection.getFirstRange() : viewSelection.getLastRange();\n                const rangeRects = Rect.getDomRangeRects(view.domConverter.viewRangeToDom(range));\n                // Select the proper range rect depending on the direction of the selection.\n                if (isBackward) {\n                    return rangeRects[0];\n                }\n                else {\n                    // Ditch the zero-width \"orphan\" rect in the next line for the forward selection if there's\n                    // another one preceding it. It is not rendered as a selection by the web browser anyway.\n                    // https://github.com/ckeditor/ckeditor5-ui/issues/308\n                    if (rangeRects.length > 1 && rangeRects[rangeRects.length - 1].width === 0) {\n                        rangeRects.pop();\n                    }\n                    return rangeRects[rangeRects.length - 1];\n                }\n            },\n            positions: this._getBalloonPositions(isBackward)\n        };\n    }\n    /**\n     * Updates the position of the {@link #_balloon} to make up for changes:\n     *\n     * * in the geometry of the selection it is attached to (e.g. the selection moved in the viewport or expanded or shrunk),\n     * * or the geometry of the balloon toolbar itself (e.g. the toolbar has grouped or ungrouped some items and it is shorter or longer).\n     */\n    _updatePosition() {\n        this._balloon.updatePosition(this._getBalloonPositionData());\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.stopListening();\n        this._fireSelectionChangeDebounced.cancel();\n        this.toolbarView.destroy();\n        this.focusTracker.destroy();\n        if (this._resizeObserver) {\n            this._resizeObserver.destroy();\n        }\n    }\n    /**\n     * Returns toolbar positions for the given direction of the selection.\n     */\n    _getBalloonPositions(isBackward) {\n        const isSafariIniOS = env.isSafari && env.isiOS;\n        // https://github.com/ckeditor/ckeditor5/issues/7707\n        const positions = isSafariIniOS ? generatePositions({\n            // 20px when zoomed out. Less then 20px when zoomed in; the \"radius\" of the native selection handle gets\n            // smaller as the user zooms in. No less than the default v-offset, though.\n            heightOffset: Math.max(BalloonPanelView.arrowHeightOffset, Math.round(20 / global.window.visualViewport.scale))\n        }) : BalloonPanelView.defaultPositions;\n        return isBackward ? [\n            positions.northWestArrowSouth,\n            positions.northWestArrowSouthWest,\n            positions.northWestArrowSouthEast,\n            positions.northWestArrowSouthMiddleEast,\n            positions.northWestArrowSouthMiddleWest,\n            positions.southWestArrowNorth,\n            positions.southWestArrowNorthWest,\n            positions.southWestArrowNorthEast,\n            positions.southWestArrowNorthMiddleWest,\n            positions.southWestArrowNorthMiddleEast\n        ] : [\n            positions.southEastArrowNorth,\n            positions.southEastArrowNorthEast,\n            positions.southEastArrowNorthWest,\n            positions.southEastArrowNorthMiddleEast,\n            positions.southEastArrowNorthMiddleWest,\n            positions.northEastArrowSouth,\n            positions.northEastArrowSouthEast,\n            positions.northEastArrowSouthWest,\n            positions.northEastArrowSouthMiddleEast,\n            positions.northEastArrowSouthMiddleWest\n        ];\n    }\n}\n/**\n * Returns \"true\" when the selection has multiple ranges and each range contains a selectable element\n * and nothing else.\n */\nfunction selectionContainsOnlyMultipleSelectables(selection, schema) {\n    // It doesn't contain multiple objects if there is only one range.\n    if (selection.rangeCount === 1) {\n        return false;\n    }\n    return [...selection.getRanges()].every(range => {\n        const element = range.getContainedElement();\n        return element && schema.isSelectable(element);\n    });\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/block/blockbuttonview\n */\nimport ButtonView from '../../button/buttonview';\nimport { toUnit } from '@ckeditor/ckeditor5-utils';\nimport '../../../theme/components/toolbar/blocktoolbar.css';\nconst toPx = toUnit('px');\n/**\n * The block button view class.\n *\n * This view represents a button attached next to block element where the selection is anchored.\n *\n * See {@link module:ui/toolbar/block/blocktoolbar~BlockToolbar}.\n */\nexport default class BlockButtonView extends ButtonView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        // Hide button on init.\n        this.isVisible = false;\n        this.isToggleable = true;\n        this.set('top', 0);\n        this.set('left', 0);\n        this.extendTemplate({\n            attributes: {\n                class: 'ck-block-toolbar-button',\n                style: {\n                    top: bind.to('top', val => toPx(val)),\n                    left: bind.to('left', val => toPx(val))\n                }\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/block/blocktoolbar\n */\n/* global window */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { Rect, ResizeObserver, toUnit } from '@ckeditor/ckeditor5-utils';\nimport BlockButtonView from './blockbuttonview';\nimport BalloonPanelView from '../../panel/balloon/balloonpanelview';\nimport ToolbarView, { NESTED_TOOLBAR_ICONS } from '../toolbarview';\nimport clickOutsideHandler from '../../bindings/clickoutsidehandler';\nimport normalizeToolbarConfig from '../normalizetoolbarconfig';\nconst toPx = toUnit('px');\n/**\n * The block toolbar plugin.\n *\n * This plugin provides a button positioned next to the block of content where the selection is anchored.\n * Upon clicking the button, a dropdown providing access to editor features shows up, as configured in\n * {@link module:core/editor/editorconfig~EditorConfig#blockToolbar}.\n *\n * By default, the button is displayed next to all elements marked in {@link module:engine/model/schema~Schema}\n * as `$block` for which the toolbar provides at least one option.\n *\n * By default, the button is attached so its right boundary is touching the\n * {@link module:engine/view/editableelement~EditableElement}:\n *\n * ```\n *  __ |\n * |  ||  This is a block of content that the\n *  ¯¯ |  button is attached to. This is a\n *     |  block of content that the button is\n *     |  attached to.\n * ```\n *\n * The position of the button can be adjusted using the CSS `transform` property:\n *\n * ```css\n * .ck-block-toolbar-button {\n * \ttransform: translateX( -10px );\n * }\n * ```\n *\n * ```\n *  __   |\n * |  |  |  This is a block of content that the\n *  ¯¯   |  button is attached to. This is a\n *       |  block of content that the button is\n *       |  attached to.\n * ```\n *\n * **Note**: If you plan to run the editor in a right–to–left (RTL) language, keep in mind the button\n * will be attached to the **right** boundary of the editable area. In that case, make sure the\n * CSS position adjustment works properly by adding the following styles:\n *\n * ```css\n * .ck[dir=\"rtl\"] .ck-block-toolbar-button {\n * \ttransform: translateX( 10px );\n * }\n * ```\n */\nexport default class BlockToolbar extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'BlockToolbar';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        /**\n         * An instance of the resize observer that allows to respond to changes in editable's geometry\n         * so the toolbar can stay within its boundaries (and group toolbar items that do not fit).\n         *\n         * **Note**: Used only when `shouldNotGroupWhenFull` was **not** set in the\n         * {@link module:core/editor/editorconfig~EditorConfig#blockToolbar configuration}.\n         *\n         * **Note:** Created in {@link #afterInit}.\n         */\n        this._resizeObserver = null;\n        this._blockToolbarConfig = normalizeToolbarConfig(this.editor.config.get('blockToolbar'));\n        this.toolbarView = this._createToolbarView();\n        this.panelView = this._createPanelView();\n        this.buttonView = this._createButtonView();\n        // Close the #panelView upon clicking outside of the plugin UI.\n        clickOutsideHandler({\n            emitter: this.panelView,\n            contextElements: [this.panelView.element, this.buttonView.element],\n            activator: () => this.panelView.isVisible,\n            callback: () => this._hidePanel()\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const editBlockText = t('Click to edit block');\n        const dragToMoveText = t('Drag to move');\n        const editBlockLabel = t('Edit block');\n        const isDragDropBlockToolbarPluginLoaded = editor.plugins.has('DragDropBlockToolbar');\n        const label = isDragDropBlockToolbarPluginLoaded ? `${editBlockText}\\n${dragToMoveText}` : editBlockLabel;\n        this.buttonView.label = label;\n        if (isDragDropBlockToolbarPluginLoaded) {\n            this.buttonView.element.dataset.ckeTooltipClass = 'ck-tooltip_multi-line';\n        }\n        // Hides panel on a direct selection change.\n        this.listenTo(editor.model.document.selection, 'change:range', (evt, data) => {\n            if (data.directChange) {\n                this._hidePanel();\n            }\n        });\n        this.listenTo(editor.ui, 'update', () => this._updateButton());\n        // `low` priority is used because of https://github.com/ckeditor/ckeditor5-core/issues/133.\n        this.listenTo(editor, 'change:isReadOnly', () => this._updateButton(), { priority: 'low' });\n        this.listenTo(editor.ui.focusTracker, 'change:isFocused', () => this._updateButton());\n        // Reposition button on resize.\n        this.listenTo(this.buttonView, 'change:isVisible', (evt, name, isVisible) => {\n            if (isVisible) {\n                // Keep correct position of button and panel on window#resize.\n                this.buttonView.listenTo(window, 'resize', () => this._updateButton());\n            }\n            else {\n                // Stop repositioning button when is hidden.\n                this.buttonView.stopListening(window, 'resize');\n                // Hide the panel when the button disappears.\n                this._hidePanel();\n            }\n        });\n        // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n        editor.ui.addToolbar(this.toolbarView, {\n            beforeFocus: () => this._showPanel(),\n            afterBlur: () => this._hidePanel()\n        });\n    }\n    /**\n     * Fills the toolbar with its items based on the configuration.\n     *\n     * **Note:** This needs to be done after all plugins are ready.\n     */\n    afterInit() {\n        this.toolbarView.fillFromConfig(this._blockToolbarConfig, this.editor.ui.componentFactory);\n        // Hide panel before executing each button in the panel.\n        for (const item of this.toolbarView.items) {\n            item.on('execute', () => this._hidePanel(true), { priority: 'high' });\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n        this.panelView.destroy();\n        this.buttonView.destroy();\n        this.toolbarView.destroy();\n        if (this._resizeObserver) {\n            this._resizeObserver.destroy();\n        }\n    }\n    /**\n     * Creates the {@link #toolbarView}.\n     */\n    _createToolbarView() {\n        const t = this.editor.locale.t;\n        const shouldGroupWhenFull = !this._blockToolbarConfig.shouldNotGroupWhenFull;\n        const toolbarView = new ToolbarView(this.editor.locale, {\n            shouldGroupWhenFull,\n            isFloating: true\n        });\n        toolbarView.ariaLabel = t('Editor block content toolbar');\n        return toolbarView;\n    }\n    /**\n     * Creates the {@link #panelView}.\n     */\n    _createPanelView() {\n        const editor = this.editor;\n        const panelView = new BalloonPanelView(editor.locale);\n        panelView.content.add(this.toolbarView);\n        panelView.class = 'ck-toolbar-container';\n        editor.ui.view.body.add(panelView);\n        editor.ui.focusTracker.add(panelView.element);\n        // Close #panelView on `Esc` press.\n        this.toolbarView.keystrokes.set('Esc', (evt, cancel) => {\n            this._hidePanel(true);\n            cancel();\n        });\n        return panelView;\n    }\n    /**\n     * Creates the {@link #buttonView}.\n     */\n    _createButtonView() {\n        const editor = this.editor;\n        const t = editor.t;\n        const buttonView = new BlockButtonView(editor.locale);\n        const iconFromConfig = this._blockToolbarConfig.icon;\n        const icon = NESTED_TOOLBAR_ICONS[iconFromConfig] || iconFromConfig || NESTED_TOOLBAR_ICONS.dragIndicator;\n        buttonView.set({\n            label: t('Edit block'),\n            icon,\n            withText: false\n        });\n        // Bind the panelView observable properties to the buttonView.\n        buttonView.bind('isOn').to(this.panelView, 'isVisible');\n        buttonView.bind('tooltip').to(this.panelView, 'isVisible', isVisible => !isVisible);\n        // Toggle the panelView upon buttonView#execute.\n        this.listenTo(buttonView, 'execute', () => {\n            if (!this.panelView.isVisible) {\n                this._showPanel();\n            }\n            else {\n                this._hidePanel(true);\n            }\n        });\n        editor.ui.view.body.add(buttonView);\n        editor.ui.focusTracker.add(buttonView.element);\n        return buttonView;\n    }\n    /**\n     * Shows or hides the button.\n     * When all the conditions for displaying the button are matched, it shows the button. Hides otherwise.\n     */\n    _updateButton() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        // Hides the button when the editor is not focused.\n        if (!editor.ui.focusTracker.isFocused) {\n            this._hideButton();\n            return;\n        }\n        // Hides the button when the selection is in non-editable place.\n        if (!editor.model.canEditAt(editor.model.document.selection)) {\n            this._hideButton();\n            return;\n        }\n        // Get the first selected block, button will be attached to this element.\n        const modelTarget = Array.from(model.document.selection.getSelectedBlocks())[0];\n        // Hides the button when there is no enabled item in toolbar for the current block element.\n        if (!modelTarget || Array.from(this.toolbarView.items).every((item) => !item.isEnabled)) {\n            this._hideButton();\n            return;\n        }\n        // Get DOM target element.\n        const domTarget = view.domConverter.mapViewToDom(editor.editing.mapper.toViewElement(modelTarget));\n        // Show block button.\n        this.buttonView.isVisible = true;\n        // Make sure that the block toolbar panel is resized properly.\n        this._setupToolbarResize();\n        // Attach block button to target DOM element.\n        this._attachButtonToElement(domTarget);\n        // When panel is opened then refresh it position to be properly aligned with block button.\n        if (this.panelView.isVisible) {\n            this._showPanel();\n        }\n    }\n    /**\n     * Hides the button.\n     */\n    _hideButton() {\n        this.buttonView.isVisible = false;\n    }\n    /**\n     * Shows the {@link #toolbarView} attached to the {@link #buttonView}.\n     * If the toolbar is already visible, then it simply repositions it.\n     */\n    _showPanel() {\n        // Usually, the only way to show the toolbar is by pressing the block button. It makes it impossible for\n        // the toolbar to show up when the button is invisible (feature does not make sense for the selection then).\n        // The toolbar navigation using Alt+F10 does not access the button but shows the panel directly using this method.\n        // So we need to check whether this is possible first.\n        if (!this.buttonView.isVisible) {\n            return;\n        }\n        const wasVisible = this.panelView.isVisible;\n        // So here's the thing: If there was no initial panelView#show() or these two were in different order, the toolbar\n        // positioning will break in RTL editors. Weird, right? What you show know is that the toolbar\n        // grouping works thanks to:\n        //\n        // * the ResizeObserver, which kicks in as soon as the toolbar shows up in DOM (becomes visible again).\n        // * the observable ToolbarView#maxWidth, which triggers re-grouping when changed.\n        //\n        // Here are the possible scenarios:\n        //\n        // 1. (WRONG ❌) If the #maxWidth is set when the toolbar is invisible, it won't affect item grouping (no DOMRects, no grouping).\n        //    Then, when panelView.pin() is called, the position of the toolbar will be calculated for the old\n        //    items grouping state, and when finally ResizeObserver kicks in (hey, the toolbar is visible now, right?)\n        //    it will group/ungroup some items and the length of the toolbar will change. But since in RTL the toolbar\n        //    is attached on the right side and the positioning uses CSS \"left\", it will result in the toolbar shifting\n        //    to the left and being displayed in the wrong place.\n        // 2. (WRONG ❌) If the panelView.pin() is called first and #maxWidth set next, then basically the story repeats. The balloon\n        //    calculates the position for the old toolbar grouping state, then the toolbar re-groups items and because\n        //    it is positioned using CSS \"left\" it will move.\n        // 3. (RIGHT ✅) We show the panel first (the toolbar does re-grouping but it does not matter), then the #maxWidth\n        //    is set allowing the toolbar to re-group again and finally panelView.pin() does the positioning when the\n        //    items grouping state is stable and final.\n        //\n        // https://github.com/ckeditor/ckeditor5/issues/6449, https://github.com/ckeditor/ckeditor5/issues/6575\n        this.panelView.show();\n        const editableElement = this._getSelectedEditableElement();\n        this.toolbarView.maxWidth = this._getToolbarMaxWidth(editableElement);\n        this.panelView.pin({\n            target: this.buttonView.element,\n            limiter: editableElement\n        });\n        if (!wasVisible) {\n            this.toolbarView.items.get(0).focus();\n        }\n    }\n    /**\n     * Returns currently selected editable, based on the model selection.\n     */\n    _getSelectedEditableElement() {\n        const selectedModelRootName = this.editor.model.document.selection.getFirstRange().root.rootName;\n        return this.editor.ui.getEditableElement(selectedModelRootName);\n    }\n    /**\n     * Hides the {@link #toolbarView}.\n     *\n     * @param focusEditable When `true`, the editable will be focused after hiding the panel.\n     */\n    _hidePanel(focusEditable) {\n        this.panelView.isVisible = false;\n        if (focusEditable) {\n            this.editor.editing.view.focus();\n        }\n    }\n    /**\n     * Attaches the {@link #buttonView} to the target block of content.\n     *\n     * @param targetElement Target element.\n     */\n    _attachButtonToElement(targetElement) {\n        const contentStyles = window.getComputedStyle(targetElement);\n        const editableRect = new Rect(this._getSelectedEditableElement());\n        const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n        // When line height is not an integer then treat it as \"normal\".\n        // MDN says that 'normal' == ~1.2 on desktop browsers.\n        const contentLineHeight = parseInt(contentStyles.lineHeight, 10) || parseInt(contentStyles.fontSize, 10) * 1.2;\n        const buttonRect = new Rect(this.buttonView.element);\n        const contentRect = new Rect(targetElement);\n        let positionLeft;\n        if (this.editor.locale.uiLanguageDirection === 'ltr') {\n            positionLeft = editableRect.left - buttonRect.width;\n        }\n        else {\n            positionLeft = editableRect.right;\n        }\n        const positionTop = contentRect.top + contentPaddingTop + (contentLineHeight - buttonRect.height) / 2;\n        buttonRect.moveTo(positionLeft, positionTop);\n        const absoluteButtonRect = buttonRect.toAbsoluteRect();\n        this.buttonView.top = absoluteButtonRect.top;\n        this.buttonView.left = absoluteButtonRect.left;\n    }\n    /**\n     * Creates a resize observer that observes selected editable and resizes the toolbar panel accordingly.\n     */\n    _setupToolbarResize() {\n        const editableElement = this._getSelectedEditableElement();\n        // Do this only if the automatic grouping is turned on.\n        if (!this._blockToolbarConfig.shouldNotGroupWhenFull) {\n            // If resize observer is attached to a different editable than currently selected editable, re-attach it.\n            if (this._resizeObserver && this._resizeObserver.element !== editableElement) {\n                this._resizeObserver.destroy();\n                this._resizeObserver = null;\n            }\n            if (!this._resizeObserver) {\n                this._resizeObserver = new ResizeObserver(editableElement, () => {\n                    this.toolbarView.maxWidth = this._getToolbarMaxWidth(editableElement);\n                });\n            }\n        }\n    }\n    /**\n     * Gets the {@link #toolbarView} max-width, based on given `editableElement` width plus the distance between the farthest\n     * edge of the {@link #buttonView} and the editable.\n     *\n     * @returns A maximum width that toolbar can have, in pixels.\n     */\n    _getToolbarMaxWidth(editableElement) {\n        const editableRect = new Rect(editableElement);\n        const buttonRect = new Rect(this.buttonView.element);\n        const isRTL = this.editor.locale.uiLanguageDirection === 'rtl';\n        const offset = isRTL ? (buttonRect.left - editableRect.right) + buttonRect.width : editableRect.left - buttonRect.left;\n        return toPx(editableRect.width + offset);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui\n */\nexport { default as clickOutsideHandler } from './bindings/clickoutsidehandler';\nexport { default as injectCssTransitionDisabler } from './bindings/injectcsstransitiondisabler';\nexport { default as CssTransitionDisablerMixin } from './bindings/csstransitiondisablermixin';\nexport { default as submitHandler } from './bindings/submithandler';\nexport { default as addKeyboardHandlingForGrid } from './bindings/addkeyboardhandlingforgrid';\nexport { default as BodyCollection } from './editorui/bodycollection';\nexport { default as ButtonView } from './button/buttonview';\nexport { default as ButtonLabelView } from './button/buttonlabelview';\nexport { default as SwitchButtonView } from './button/switchbuttonview';\nexport * from './colorgrid/utils';\nexport { default as ColorGridView } from './colorgrid/colorgridview';\nexport { default as ColorTileView } from './colorgrid/colortileview';\nexport { default as ColorPickerView } from './colorpicker/colorpickerview';\nexport { default as ColorSelectorView } from './colorselector/colorselectorview';\nexport { default as ComponentFactory } from './componentfactory';\nexport { default as DropdownView } from './dropdown/dropdownview';\nexport { default as DropdownPanelView } from './dropdown/dropdownpanelview';\nexport { default as DropdownButtonView } from './dropdown/button/dropdownbuttonview';\nexport { default as SplitButtonView } from './dropdown/button/splitbuttonview';\nexport * from './dropdown/utils';\nexport { default as EditorUI } from './editorui/editorui';\nexport { default as EditorUIView } from './editorui/editoruiview';\nexport { default as BoxedEditorUIView } from './editorui/boxed/boxededitoruiview';\nexport { default as InlineEditableUIView } from './editableui/inline/inlineeditableuiview';\nexport { default as FormHeaderView } from './formheader/formheaderview';\nexport { default as FocusCycler } from './focuscycler';\nexport { default as IconView } from './icon/iconview';\nexport { default as InputView } from './input/inputview';\nexport { default as InputTextView } from './inputtext/inputtextview';\nexport { default as InputNumberView } from './inputnumber/inputnumberview';\nexport { default as TextareaView } from './textarea/textareaview';\nexport { default as IframeView } from './iframe/iframeview';\nexport { default as LabelView } from './label/labelview';\nexport { default as LabeledFieldView } from './labeledfield/labeledfieldview';\nexport * from './labeledfield/utils';\nexport { default as ListItemGroupView } from './list/listitemgroupview';\nexport { default as ListItemView } from './list/listitemview';\nexport { default as ListView } from './list/listview';\nexport { default as Notification } from './notification/notification';\nexport { default as Model } from './model';\nexport { default as BalloonPanelView } from './panel/balloon/balloonpanelview';\nexport { default as ContextualBalloon } from './panel/balloon/contextualballoon';\nexport { default as StickyPanelView } from './panel/sticky/stickypanelview';\nexport { default as AutocompleteView } from './autocomplete/autocompleteview';\nexport { default as SearchTextView } from './search/text/searchtextview';\nexport { default as SearchInfoView } from './search/searchinfoview';\nexport { default as HighlightedTextView } from './highlightedtext/highlightedtextview';\nexport { default as CollapsibleView } from './collapsible/collapsibleview';\nexport { default as TooltipManager } from './tooltipmanager';\nexport { default as Template } from './template';\nexport { default as SpinnerView } from './spinner/spinnerview';\nexport { default as ToolbarView } from './toolbar/toolbarview';\nexport { default as ToolbarLineBreakView } from './toolbar/toolbarlinebreakview';\nexport { default as ToolbarSeparatorView } from './toolbar/toolbarseparatorview';\nexport { default as normalizeToolbarConfig } from './toolbar/normalizetoolbarconfig';\nexport { default as BalloonToolbar } from './toolbar/balloon/balloontoolbar';\nexport { default as BlockToolbar } from './toolbar/block/blocktoolbar';\nexport { default as View } from './view';\nexport { default as ViewCollection } from './viewcollection';\nimport { default as colorPaletteIcon } from '../theme/icons/color-palette.svg';\nexport const icons = {\n    colorPaletteIcon\n};\nimport './augmentation';\n"],
  "mappings": "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",
  "names": ["convert", "convert", "clone", "dropdownArrowIcon", "first", "first", "AriaLiveAnnouncerPoliteness", "toPx", "toPx", "toPx", "dropdownArrowIcon", "toPx", "toPx", "toPx", "colorPaletteIcon"]
}
