export interface Props {
    value?: string;
    label?: string;
    hasError?: boolean;
    hasSuccess?: boolean;
    successMessage?: string;
    errorMessage?: string;
    placeholder?: string;
    name?: string;
    required?: boolean;
    defaultCountry?: string;
    arrow?: boolean;
    listHeight?: number;
    allowed?: string[];
}
import { type Ref } from "vue";
import type { Country } from './parts/types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    value: string;
    label: string;
    hasError: boolean;
    hasSuccess: boolean;
    successMessage: string;
    errorMessage: string;
    placeholder: string;
    name: string;
    required: boolean;
    defaultCountry: string;
    arrow: boolean;
    listHeight: number;
    allowed: () => never[];
}>, {
    defaultSelected: Ref<Country>;
    defaultCountry: Ref<string>;
    phone: Ref<string>;
    popupPos: Ref<string>;
    listHeight: Ref<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    phone: (...args: any[]) => void;
    country: (...args: any[]) => void;
    phoneData: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    value: string;
    label: string;
    hasError: boolean;
    hasSuccess: boolean;
    successMessage: string;
    errorMessage: string;
    placeholder: string;
    name: string;
    required: boolean;
    defaultCountry: string;
    arrow: boolean;
    listHeight: number;
    allowed: () => never[];
}>>> & {
    onPhone?: ((...args: any[]) => any) | undefined;
    onCountry?: ((...args: any[]) => any) | undefined;
    onPhoneData?: ((...args: any[]) => any) | undefined;
}, {
    required: boolean;
    label: string;
    name: string;
    value: string;
    hasError: boolean;
    hasSuccess: boolean;
    successMessage: string;
    errorMessage: string;
    placeholder: string;
    defaultCountry: string;
    arrow: boolean;
    listHeight: number;
    allowed: string[];
}, {}>, {
    arrow?(_: {}): any;
    default?(_: {}): any;
}>;
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
declare type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
declare type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
